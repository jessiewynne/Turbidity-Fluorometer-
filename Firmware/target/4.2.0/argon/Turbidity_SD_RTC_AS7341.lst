
/Users/jessiewynne/Turbidity_SD_RTC_AS7341/target/4.2.0/argon/Turbidity_SD_RTC_AS7341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000054c0  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b94e0  000b94e0  000094e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b9504  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000c4  2003e0ec  000b9508  0001e0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000640  2003e1b0  2003e1b0  0002e1b0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b95cc  000b95cc  000295cc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b95f4  000b95f4  000295f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001967c2  00000000  00000000  000295f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001b3db  00000000  00000000  001bfdba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00042901  00000000  00000000  001db195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003080  00000000  00000000  0021da96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000ae80  00000000  00000000  00220b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000492da  00000000  00000000  0022b996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005f333  00000000  00000000  00274c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00139bac  00000000  00000000  002d3fa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008dd8  00000000  00000000  0040db50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f004 fec5 	bl	b8dc0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f004 fecd 	bl	b8ddc <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e0ec 	.word	0x2003e0ec
   b404c:	000b9508 	.word	0x000b9508
   b4050:	2003e1b0 	.word	0x2003e1b0
   b4054:	2003e1b0 	.word	0x2003e1b0
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f004 f877 	bl	b8154 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b94b0 	.word	0x000b94b0
   b4080:	000b94d4 	.word	0x000b94d4

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b8a6 	b.w	b41d4 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 fd93 	bl	b4bb4 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f004 b817 	b.w	b80c4 <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 ba67 	b.w	b7568 <malloc>

000b409a <_Znaj>:
   b409a:	f003 ba65 	b.w	b7568 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 ba6b 	b.w	b7578 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40b2:	4770      	bx	lr

000b40b4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40b4:	7c03      	ldrb	r3, [r0, #16]
   b40b6:	f013 0308 	ands.w	r3, r3, #8
   b40ba:	bf1e      	ittt	ne
   b40bc:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40be:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40c0:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40c2:	2b00      	cmp	r3, #0
  }
   b40c4:	bfac      	ite	ge
   b40c6:	4618      	movge	r0, r3
   b40c8:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40cc:	4770      	bx	lr

000b40ce <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40ce:	4770      	bx	lr

000b40d0 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40d0:	b510      	push	{r4, lr}
  }
   b40d2:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40d4:	4604      	mov	r4, r0
  }
   b40d6:	f7ff ffe2 	bl	b409e <_ZdlPvj>
   b40da:	4620      	mov	r0, r4
   b40dc:	bd10      	pop	{r4, pc}

000b40de <_ZN4FileD0Ev>:
   b40de:	b510      	push	{r4, lr}
   b40e0:	2134      	movs	r1, #52	; 0x34
   b40e2:	4604      	mov	r4, r0
   b40e4:	f7ff ffdb 	bl	b409e <_ZdlPvj>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}

000b40ec <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b40ec:	3010      	adds	r0, #16
   b40ee:	f001 bf39 	b.w	b5f64 <_ZN7FatFile4syncEv>

000b40f2 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b40f2:	3010      	adds	r0, #16
   b40f4:	f001 be57 	b.w	b5da6 <_ZN7FatFile4peekEv>

000b40f8 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b40f8:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b40fa:	2201      	movs	r2, #1
   b40fc:	f10d 0107 	add.w	r1, sp, #7
   b4100:	3010      	adds	r0, #16
   b4102:	f001 fda2 	bl	b5c4a <_ZN7FatFile4readEPvj>
   b4106:	2801      	cmp	r0, #1
   b4108:	bf0c      	ite	eq
   b410a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b410e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b4112:	b003      	add	sp, #12
   b4114:	f85d fb04 	ldr.w	pc, [sp], #4

000b4118 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4118:	3010      	adds	r0, #16
   b411a:	f001 bfad 	b.w	b6078 <_ZN7FatFile5writeEPKvj>

000b411e <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b411e:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b4120:	2201      	movs	r2, #1
   b4122:	f88d 1007 	strb.w	r1, [sp, #7]
   b4126:	3010      	adds	r0, #16
   b4128:	f10d 0107 	add.w	r1, sp, #7
   b412c:	f001 ffa4 	bl	b6078 <_ZN7FatFile5writeEPKvj>
  }
   b4130:	b003      	add	sp, #12
   b4132:	f85d fb04 	ldr.w	pc, [sp], #4

000b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   b4136:	b410      	push	{r4}
{
    if (base == 0) {
   b4138:	b92a      	cbnz	r2, b4146 <_ZN5Print5printItLi0EEEjT_i.isra.0+0x10>
        return write(n);
   b413a:	6802      	ldr	r2, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   b413c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   b4140:	6892      	ldr	r2, [r2, #8]
   b4142:	b2c9      	uxtb	r1, r1
   b4144:	4710      	bx	r2
}
   b4146:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   b414a:	b2d2      	uxtb	r2, r2
   b414c:	f003 bc6f 	b.w	b7a2e <_ZN5Print11printNumberEmh>

000b4150 <_ZN5Print7printlnItLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b4150:	b510      	push	{r4, lr}
   b4152:	4604      	mov	r4, r0
        size_t n = print(b, base);
   b4154:	f7ff ffef 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
        n += println();
   b4158:	4620      	mov	r0, r4
    }
   b415a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b415e:	f003 bc4e 	b.w	b79fe <_ZN5Print7printlnEv>

000b4162 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4162:	b40e      	push	{r1, r2, r3}
   b4164:	b503      	push	{r0, r1, lr}
   b4166:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b4168:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b416a:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b416e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4170:	f003 fd53 	bl	b7c1a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b4174:	b002      	add	sp, #8
   b4176:	f85d eb04 	ldr.w	lr, [sp], #4
   b417a:	b003      	add	sp, #12
   b417c:	4770      	bx	lr
	...

000b4180 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4180:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4182:	4604      	mov	r4, r0
   b4184:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4186:	7922      	ldrb	r2, [r4, #4]
   b4188:	68a3      	ldr	r3, [r4, #8]
   b418a:	b132      	cbz	r2, b419a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b418c:	b9a3      	cbnz	r3, b41b8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b418e:	490b      	ldr	r1, [pc, #44]	; (b41bc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4190:	b002      	add	sp, #8
   b4192:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4196:	f003 bc2b 	b.w	b79f0 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b419a:	4a09      	ldr	r2, [pc, #36]	; (b41c0 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b419c:	7b26      	ldrb	r6, [r4, #12]
   b419e:	4d09      	ldr	r5, [pc, #36]	; (b41c4 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b41a0:	4909      	ldr	r1, [pc, #36]	; (b41c8 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b41a2:	7b64      	ldrb	r4, [r4, #13]
   b41a4:	2e01      	cmp	r6, #1
   b41a6:	bf18      	it	ne
   b41a8:	4629      	movne	r1, r5
   b41aa:	e9cd 1400 	strd	r1, r4, [sp]
   b41ae:	4907      	ldr	r1, [pc, #28]	; (b41cc <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b41b0:	f7ff ffd7 	bl	b4162 <_ZN5Print6printfEPKcz>
  }
   b41b4:	b002      	add	sp, #8
   b41b6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b41b8:	4a05      	ldr	r2, [pc, #20]	; (b41d0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b41ba:	e7ef      	b.n	b419c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b41bc:	000b8f49 	.word	0x000b8f49
   b41c0:	000b9194 	.word	0x000b9194
   b41c4:	000b8f45 	.word	0x000b8f45
   b41c8:	000b8f41 	.word	0x000b8f41
   b41cc:	000b8f5f 	.word	0x000b8f5f
   b41d0:	000b8f38 	.word	0x000b8f38

000b41d4 <setup>:
SdFat SD;

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   b41d4:	b570      	push	{r4, r5, r6, lr}
   b41d6:	b08e      	sub	sp, #56	; 0x38
  Serial.begin(9600);
   b41d8:	f003 feee 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b41dc:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b41e0:	f003 fed8 	bl	b7f94 <_ZN9USBSerial5beginEl>

  // Wait for communication with the host computer serial monitor
  while (!Serial) {
   b41e4:	f003 fee8 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b41e8:	f003 fedb 	bl	b7fa2 <_ZN9USBSerialcvbEv>
   b41ec:	b918      	cbnz	r0, b41f6 <setup+0x22>
    delay(1);
   b41ee:	2001      	movs	r0, #1
   b41f0:	f003 f9e2 	bl	b75b8 <delay>
  while (!Serial) {
   b41f4:	e7f6      	b.n	b41e4 <setup+0x10>
  }
  
  if (!as7341.begin(0x39)){
   b41f6:	f004 f863 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b41fa:	2300      	movs	r3, #0
   b41fc:	4602      	mov	r2, r0
   b41fe:	2139      	movs	r1, #57	; 0x39
   b4200:	484f      	ldr	r0, [pc, #316]	; (b4340 <setup+0x16c>)
   b4202:	f000 fd43 	bl	b4c8c <_ZN15Adafruit_AS73415beginEhP7TwoWirel>
   b4206:	b940      	cbnz	r0, b421a <setup+0x46>
    Serial.println("Could not find AS7341");
   b4208:	f003 fed6 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b420c:	494d      	ldr	r1, [pc, #308]	; (b4344 <setup+0x170>)
   b420e:	f003 fc02 	bl	b7a16 <_ZN5Print7printlnEPKc>
    while (1) { delay(10); }
   b4212:	200a      	movs	r0, #10
   b4214:	f003 f9d0 	bl	b75b8 <delay>
   b4218:	e7fb      	b.n	b4212 <setup+0x3e>
  }
  // // Configure the LED Register to turn off the onboard LED
  // as7341.writeRegister(AS7341_LED, 0x00);

  // use ATIME of 103, ASTEP of 3457, and GAIN of 512x for dark counts during optical calibration
  as7341.setATIME(255);      
   b421a:	21ff      	movs	r1, #255	; 0xff
   b421c:	4848      	ldr	r0, [pc, #288]	; (b4340 <setup+0x16c>)
   b421e:	f000 fe0d 	bl	b4e3c <_ZN15Adafruit_AS73418setATIMEEh>
  as7341.setASTEP(999);
   b4222:	f240 31e7 	movw	r1, #999	; 0x3e7
   b4226:	4846      	ldr	r0, [pc, #280]	; (b4340 <setup+0x16c>)
   b4228:	f000 fe2d 	bl	b4e86 <_ZN15Adafruit_AS73418setASTEPEt>
  as7341.setGain(AS7341_GAIN_128X);
   b422c:	4844      	ldr	r0, [pc, #272]	; (b4340 <setup+0x16c>)
   b422e:	2108      	movs	r1, #8
   b4230:	f000 fe50 	bl	b4ed4 <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>

  if (! rtc.begin()) {
   b4234:	4844      	ldr	r0, [pc, #272]	; (b4348 <setup+0x174>)
   b4236:	f001 fbef 	bl	b5a18 <_ZN11RTC_PCF85235beginEv>
   b423a:	b928      	cbnz	r0, b4248 <setup+0x74>
    Serial.println("Couldn't find RTC");
   b423c:	f003 febc 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4240:	4942      	ldr	r1, [pc, #264]	; (b434c <setup+0x178>)
   b4242:	f003 fbe8 	bl	b7a16 <_ZN5Print7printlnEPKc>
    while (1);
   b4246:	e7fe      	b.n	b4246 <setup+0x72>
  }

  if (! rtc.initialized()) {
   b4248:	483f      	ldr	r0, [pc, #252]	; (b4348 <setup+0x174>)
   b424a:	f001 fbe7 	bl	b5a1c <_ZN11RTC_PCF852311initializedEv>
   b424e:	b920      	cbnz	r0, b425a <setup+0x86>
    Serial.println("RTC is NOT running!");
   b4250:	f003 feb2 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4254:	493e      	ldr	r1, [pc, #248]	; (b4350 <setup+0x17c>)
   b4256:	f003 fbde 	bl	b7a16 <_ZN5Print7printlnEPKc>
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
 //rtc.adjust(DateTime(2024, 4, 8, 14, 10, 0));
  }

  if (! aw.begin(0x58)) {
   b425a:	f004 f831 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b425e:	2158      	movs	r1, #88	; 0x58
   b4260:	4602      	mov	r2, r0
   b4262:	483c      	ldr	r0, [pc, #240]	; (b4354 <setup+0x180>)
   b4264:	f001 f896 	bl	b5394 <_ZN15Adafruit_AW95235beginEhP7TwoWire>
   b4268:	b940      	cbnz	r0, b427c <setup+0xa8>
    Serial.println("AW9523 not found? Check wiring!");
   b426a:	f003 fea5 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b426e:	493a      	ldr	r1, [pc, #232]	; (b4358 <setup+0x184>)
   b4270:	f003 fbd1 	bl	b7a16 <_ZN5Print7printlnEPKc>
    while (1) delay(10);  // halt forever
   b4274:	200a      	movs	r0, #10
   b4276:	f003 f99f 	bl	b75b8 <delay>
   b427a:	e7fb      	b.n	b4274 <setup+0xa0>
  }

  Serial.println("AW9523 found!");
   b427c:	f003 fe9c 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4280:	4936      	ldr	r1, [pc, #216]	; (b435c <setup+0x188>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4282:	4c37      	ldr	r4, [pc, #220]	; (b4360 <setup+0x18c>)
   b4284:	f003 fbc7 	bl	b7a16 <_ZN5Print7printlnEPKc>
  aw.pinMode(LedPin, AW9523_LED_MODE);
   b4288:	4b36      	ldr	r3, [pc, #216]	; (b4364 <setup+0x190>)
   b428a:	4832      	ldr	r0, [pc, #200]	; (b4354 <setup+0x180>)
   b428c:	7819      	ldrb	r1, [r3, #0]
   b428e:	2203      	movs	r2, #3
   b4290:	f001 f825 	bl	b52de <_ZN15Adafruit_AW95237pinModeEhh>
class SPISettings : public Printable {
   b4294:	4b34      	ldr	r3, [pc, #208]	; (b4368 <setup+0x194>)
   b4296:	9301      	str	r3, [sp, #4]
   b4298:	2300      	movs	r3, #0
   b429a:	f88d 3008 	strb.w	r3, [sp, #8]
   b429e:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   b42a2:	4b32      	ldr	r3, [pc, #200]	; (b436c <setup+0x198>)
   b42a4:	9303      	str	r3, [sp, #12]
   b42a6:	2501      	movs	r5, #1
   b42a8:	ab01      	add	r3, sp, #4
   b42aa:	2205      	movs	r2, #5
   b42ac:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   b42b0:	4630      	mov	r0, r6
   b42b2:	f8ad 5010 	strh.w	r5, [sp, #16]
   b42b6:	f002 fd29 	bl	b6d0c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b42ba:	b1f8      	cbz	r0, b42fc <setup+0x128>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   b42bc:	f204 403c 	addw	r0, r4, #1084	; 0x43c
    m_blockDev = blockDev;
   b42c0:	6026      	str	r6, [r4, #0]
    vwd()->close();
   b42c2:	f001 fe85 	bl	b5fd0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b42c6:	4629      	mov	r1, r5
   b42c8:	4620      	mov	r0, r4
   b42ca:	f002 fbc9 	bl	b6a60 <_ZN9FatVolume4initEh>
   b42ce:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   b42d2:	4601      	mov	r1, r0
   b42d4:	b168      	cbz	r0, b42f2 <setup+0x11e>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b42d6:	4922      	ldr	r1, [pc, #136]	; (b4360 <setup+0x18c>)
   b42d8:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   b42dc:	f001 fcaf 	bl	b5c3e <_ZN7FatFile8openRootEP9FatVolume>
   b42e0:	b160      	cbz	r0, b42fc <setup+0x128>
    if (!dir->isDir()) {
   b42e2:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b42e6:	f013 0f70 	tst.w	r3, #112	; 0x70
    m_cwd = dir;
   b42ea:	bf1c      	itt	ne
   b42ec:	4b20      	ldrne	r3, [pc, #128]	; (b4370 <setup+0x19c>)
   b42ee:	601d      	strne	r5, [r3, #0]
    return true;
   b42f0:	e004      	b.n	b42fc <setup+0x128>
    return (part ? init(part) : init(1) || init(0))
   b42f2:	4620      	mov	r0, r4
   b42f4:	f002 fbb4 	bl	b6a60 <_ZN9FatVolume4initEh>
   b42f8:	2800      	cmp	r0, #0
   b42fa:	d1ec      	bne.n	b42d6 <setup+0x102>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b42fc:	2300      	movs	r3, #0
   b42fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b4302:	e9cd 3202 	strd	r3, r2, [sp, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4306:	9305      	str	r3, [sp, #20]
  File() {}
   b4308:	4b1a      	ldr	r3, [pc, #104]	; (b4374 <setup+0x1a0>)
   b430a:	9301      	str	r3, [sp, #4]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   b430c:	4a1a      	ldr	r2, [pc, #104]	; (b4378 <setup+0x1a4>)
   b430e:	491b      	ldr	r1, [pc, #108]	; (b437c <setup+0x1a8>)
   b4310:	f244 2302 	movw	r3, #16898	; 0x4202
   b4314:	a805      	add	r0, sp, #20
   b4316:	f001 fe62 	bl	b5fde <_ZN7FatFile4openEPS_PKci>

  SD.begin(SD_CHIP_SELECT);
 
  File file = SD.open("4_9_24_700ms_128x_2_turbidity.csv", FILE_WRITE);

  if (file) {
   b431a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b431e:	b143      	cbz	r3, b4332 <setup+0x15e>
    file.println("Date and Time,ASTEP,ATIME,GAIN,LED Status,LED Intensity,Test,Seconds,Milliseconds,Type,F1 (Basic),F2 (Basic),F3 (Basic),F4 (Basic),F5 (Basic),F6 (Basic),F7 (Basic),F8 (Basic),Clear (Basic),NIR (Basic),Type,F1 (Raw),F2 (Raw),F3 (Raw),F4 (Raw),F5 (Raw),F6 (Raw),F7 (Raw),F8 (Raw),Clear (Raw),NIR (Raw), Approx Time"); // Headers
   b4320:	4917      	ldr	r1, [pc, #92]	; (b4380 <setup+0x1ac>)
   b4322:	a801      	add	r0, sp, #4
   b4324:	f003 fb77 	bl	b7a16 <_ZN5Print7printlnEPKc>
    file.close();
   b4328:	a805      	add	r0, sp, #20
   b432a:	f001 fe51 	bl	b5fd0 <_ZN7FatFile5closeEv>
    } else {
    Serial.println(F("Error opening file!"));
  }
}
   b432e:	b00e      	add	sp, #56	; 0x38
   b4330:	bd70      	pop	{r4, r5, r6, pc}
    Serial.println(F("Error opening file!"));
   b4332:	f003 fe41 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4336:	4913      	ldr	r1, [pc, #76]	; (b4384 <setup+0x1b0>)
   b4338:	f003 fb77 	bl	b7a2a <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   b433c:	e7f7      	b.n	b432e <setup+0x15a>
   b433e:	bf00      	nop
   b4340:	2003e650 	.word	0x2003e650
   b4344:	000b8f7c 	.word	0x000b8f7c
   b4348:	2003e6b0 	.word	0x2003e6b0
   b434c:	000b8f92 	.word	0x000b8f92
   b4350:	000b8fa4 	.word	0x000b8fa4
   b4354:	2003e678 	.word	0x2003e678
   b4358:	000b8fb8 	.word	0x000b8fb8
   b435c:	000b8fd8 	.word	0x000b8fd8
   b4360:	2003e1c0 	.word	0x2003e1c0
   b4364:	2003e1bc 	.word	0x2003e1bc
   b4368:	000b923c 	.word	0x000b923c
   b436c:	02faf080 	.word	0x02faf080
   b4370:	2003e6b8 	.word	0x2003e6b8
   b4374:	000b9250 	.word	0x000b9250
   b4378:	000b8fe6 	.word	0x000b8fe6
   b437c:	2003e5fc 	.word	0x2003e5fc
   b4380:	000b9008 	.word	0x000b9008
   b4384:	000b9141 	.word	0x000b9141

000b4388 <_Z18serialprintresultsv>:


}

void serialprintresults() 
{
   b4388:	b5f0      	push	{r4, r5, r6, r7, lr}
   b438a:	b095      	sub	sp, #84	; 0x54

DateTime now = rtc.now();
   b438c:	4668      	mov	r0, sp
   b438e:	f001 fb66 	bl	b5a5e <_ZN11RTC_PCF85233nowEv>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4392:	f002 feed 	bl	b7170 <HAL_Timer_Get_Milli_Seconds>
unsigned long decimalseconds_to_record = (millis() % 1000)/1; //the divided by 1 has to stay, otherwise the program gets stuck during serial monitor!
   b4396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b439a:	fbb0 f5f3 	udiv	r5, r0, r3
   b439e:	fb05 0513 	mls	r5, r5, r3, r0

Serial.print("LED INTENSITY:");
   b43a2:	f003 fe09 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b43a6:	494a      	ldr	r1, [pc, #296]	; (b44d0 <_Z18serialprintresultsv+0x148>)
   b43a8:	f003 fb22 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(" ");
   b43ac:	f003 fe04 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b43b0:	4948      	ldr	r1, [pc, #288]	; (b44d4 <_Z18serialprintresultsv+0x14c>)
   b43b2:	f003 fb1d 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.println(LEDbright);
   b43b6:	f003 fdff 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b43ba:	4b47      	ldr	r3, [pc, #284]	; (b44d8 <_Z18serialprintresultsv+0x150>)
   b43bc:	681c      	ldr	r4, [r3, #0]
        if (n < 0 && base == 10) {
   b43be:	2c00      	cmp	r4, #0
   b43c0:	4606      	mov	r6, r0
   b43c2:	f280 8083 	bge.w	b44cc <_Z18serialprintresultsv+0x144>
            t = print('-');
   b43c6:	212d      	movs	r1, #45	; 0x2d
   b43c8:	f003 fb16 	bl	b79f8 <_ZN5Print5printEc>
            val = -n;
   b43cc:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b43ce:	220a      	movs	r2, #10
   b43d0:	4630      	mov	r0, r6
   b43d2:	f003 fb2c 	bl	b7a2e <_ZN5Print11printNumberEmh>
        n += println();
   b43d6:	4630      	mov	r0, r6
   b43d8:	f003 fb11 	bl	b79fe <_ZN5Print7printlnEv>
  Serial.println();
   b43dc:	f003 fdec 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b43e0:	f003 fb0d 	bl	b79fe <_ZN5Print7printlnEv>
  Serial.print(now.year(), DEC);
   b43e4:	f003 fde8 	bl	b7fb8 <_Z16_fetch_usbserialv>
    DateTime (uint16_t year, uint8_t month, uint8_t day,
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
   b43e8:	f89d 1000 	ldrb.w	r1, [sp]
   b43ec:	220a      	movs	r2, #10
   b43ee:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
   b43f2:	f7ff fea0 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
  Serial.print('/');
   b43f6:	f003 fddf 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b43fa:	212f      	movs	r1, #47	; 0x2f
   b43fc:	f003 fafc 	bl	b79f8 <_ZN5Print5printEc>
  Serial.print(now.month(), DEC);
   b4400:	f003 fdda 	bl	b7fb8 <_Z16_fetch_usbserialv>
        return printNumber(val, base) + t;
   b4404:	220a      	movs	r2, #10
   b4406:	f89d 1001 	ldrb.w	r1, [sp, #1]
   b440a:	f003 fb10 	bl	b7a2e <_ZN5Print11printNumberEmh>
  Serial.print('/');
   b440e:	f003 fdd3 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4412:	212f      	movs	r1, #47	; 0x2f
   b4414:	f003 faf0 	bl	b79f8 <_ZN5Print5printEc>
  Serial.print(now.day(), DEC);
   b4418:	f003 fdce 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b441c:	220a      	movs	r2, #10
   b441e:	f89d 1002 	ldrb.w	r1, [sp, #2]
   b4422:	f003 fb04 	bl	b7a2e <_ZN5Print11printNumberEmh>
  Serial.print(" (");
   b4426:	f003 fdc7 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b442a:	492c      	ldr	r1, [pc, #176]	; (b44dc <_Z18serialprintresultsv+0x154>)
   b442c:	f003 fae0 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(daysOfTheWeek[now.dayOfTheWeek()]);
   b4430:	f003 fdc2 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4434:	4604      	mov	r4, r0
   b4436:	4668      	mov	r0, sp
   b4438:	f001 fad8 	bl	b59ec <_ZNK8DateTime12dayOfTheWeekEv>
   b443c:	4928      	ldr	r1, [pc, #160]	; (b44e0 <_Z18serialprintresultsv+0x158>)
   b443e:	b203      	sxth	r3, r0
   b4440:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4444:	eb01 0183 	add.w	r1, r1, r3, lsl #2
   b4448:	4620      	mov	r0, r4
   b444a:	f003 fad1 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(") ");
   b444e:	f003 fdb3 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4452:	4924      	ldr	r1, [pc, #144]	; (b44e4 <_Z18serialprintresultsv+0x15c>)
   b4454:	f003 facc 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(now.hour(), DEC);
   b4458:	f003 fdae 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b445c:	220a      	movs	r2, #10
   b445e:	f89d 1003 	ldrb.w	r1, [sp, #3]
   b4462:	f003 fae4 	bl	b7a2e <_ZN5Print11printNumberEmh>
  Serial.print(':');
   b4466:	f003 fda7 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b446a:	213a      	movs	r1, #58	; 0x3a
   b446c:	f003 fac4 	bl	b79f8 <_ZN5Print5printEc>
  Serial.print(now.minute(), DEC);
   b4470:	f003 fda2 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4474:	220a      	movs	r2, #10
   b4476:	f89d 1004 	ldrb.w	r1, [sp, #4]
   b447a:	f003 fad8 	bl	b7a2e <_ZN5Print11printNumberEmh>
  Serial.print(':');
   b447e:	f003 fd9b 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4482:	213a      	movs	r1, #58	; 0x3a
   b4484:	f003 fab8 	bl	b79f8 <_ZN5Print5printEc>
  Serial.print(now.second(), DEC);
   b4488:	f003 fd96 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b448c:	220a      	movs	r2, #10
   b448e:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b4492:	f003 facc 	bl	b7a2e <_ZN5Print11printNumberEmh>
  Serial.print('.');
   b4496:	f003 fd8f 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b449a:	212e      	movs	r1, #46	; 0x2e
   b449c:	f003 faac 	bl	b79f8 <_ZN5Print5printEc>
  Serial.print(decimalseconds_to_record, DEC);
   b44a0:	f003 fd8a 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b44a4:	4629      	mov	r1, r5
   b44a6:	220a      	movs	r2, #10
   b44a8:	f003 fac1 	bl	b7a2e <_ZN5Print11printNumberEmh>
  Serial.println();
   b44ac:	f003 fd84 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b44b0:	f003 faa5 	bl	b79fe <_ZN5Print7printlnEv>

  uint16_t readings[12];
  float counts[12];

    if (!as7341.readAllChannels(readings)){
   b44b4:	480c      	ldr	r0, [pc, #48]	; (b44e8 <_Z18serialprintresultsv+0x160>)
   b44b6:	a902      	add	r1, sp, #8
   b44b8:	f000 fe77 	bl	b51aa <_ZN15Adafruit_AS734115readAllChannelsEPt>
   b44bc:	b9c0      	cbnz	r0, b44f0 <_Z18serialprintresultsv+0x168>
    Serial.println("Error reading all channels!");
   b44be:	f003 fd7b 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b44c2:	490a      	ldr	r1, [pc, #40]	; (b44ec <_Z18serialprintresultsv+0x164>)
   b44c4:	f003 faa7 	bl	b7a16 <_ZN5Print7printlnEPKc>
  Serial.print("  ");
  Serial.print("Raw Value : ");
  Serial.println(readings[11]);
  Serial.print("  ");
  Serial.println();
}
   b44c8:	b015      	add	sp, #84	; 0x54
   b44ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
            val = n;
   b44cc:	4621      	mov	r1, r4
   b44ce:	e77e      	b.n	b43ce <_Z18serialprintresultsv+0x46>
   b44d0:	000b9155 	.word	0x000b9155
   b44d4:	000b9193 	.word	0x000b9193
   b44d8:	2003e0ec 	.word	0x2003e0ec
   b44dc:	000b9164 	.word	0x000b9164
   b44e0:	2003e0f0 	.word	0x2003e0f0
   b44e4:	000b9167 	.word	0x000b9167
   b44e8:	2003e650 	.word	0x2003e650
   b44ec:	000b916a 	.word	0x000b916a
    counts[i] = as7341.toBasicCounts(readings[i]);
   b44f0:	4faa      	ldr	r7, [pc, #680]	; (b479c <_Z18serialprintresultsv+0x414>)
   b44f2:	ad02      	add	r5, sp, #8
   b44f4:	ae08      	add	r6, sp, #32
    if (!as7341.readAllChannels(readings)){
   b44f6:	24fc      	movs	r4, #252	; 0xfc
    if(i == 4 || i == 5) continue;
   b44f8:	2c01      	cmp	r4, #1
   b44fa:	d905      	bls.n	b4508 <_Z18serialprintresultsv+0x180>
    counts[i] = as7341.toBasicCounts(readings[i]);
   b44fc:	8829      	ldrh	r1, [r5, #0]
   b44fe:	4638      	mov	r0, r7
   b4500:	f000 fd0e 	bl	b4f20 <_ZN15Adafruit_AS734113toBasicCountsEt>
   b4504:	ed86 0a00 	vstr	s0, [r6]
  for(uint8_t i = 0; i < 12; i++) {
   b4508:	3401      	adds	r4, #1
   b450a:	b2e4      	uxtb	r4, r4
   b450c:	2c08      	cmp	r4, #8
   b450e:	f105 0502 	add.w	r5, r5, #2
   b4512:	f106 0604 	add.w	r6, r6, #4
   b4516:	d1ef      	bne.n	b44f8 <_Z18serialprintresultsv+0x170>
  Serial.print(',');
   b4518:	f003 fd4e 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b451c:	212c      	movs	r1, #44	; 0x2c
   b451e:	f003 fa6b 	bl	b79f8 <_ZN5Print5printEc>
  Serial.println(millis() / 1000);
   b4522:	f003 fd49 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4526:	4604      	mov	r4, r0
   b4528:	f002 fe22 	bl	b7170 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   b452c:	220a      	movs	r2, #10
   b452e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4532:	fbb0 f1f1 	udiv	r1, r0, r1
   b4536:	4620      	mov	r0, r4
   b4538:	f003 fa79 	bl	b7a2e <_ZN5Print11printNumberEmh>
        n += println();
   b453c:	4620      	mov	r0, r4
   b453e:	f003 fa5e 	bl	b79fe <_ZN5Print7printlnEv>
  Serial.print("F1 415nm : ");
   b4542:	f003 fd39 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4546:	4996      	ldr	r1, [pc, #600]	; (b47a0 <_Z18serialprintresultsv+0x418>)
   b4548:	f003 fa52 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(counts[0]);
   b454c:	f003 fd34 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4550:	ed9d 0a08 	vldr	s0, [sp, #32]
   b4554:	2102      	movs	r1, #2
   b4556:	f003 fb51 	bl	b7bfc <_ZN5Print5printEfi>
  Serial.print("  ");
   b455a:	f003 fd2d 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b455e:	4991      	ldr	r1, [pc, #580]	; (b47a4 <_Z18serialprintresultsv+0x41c>)
   b4560:	f003 fa46 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   b4564:	f003 fd28 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4568:	498f      	ldr	r1, [pc, #572]	; (b47a8 <_Z18serialprintresultsv+0x420>)
   b456a:	f003 fa41 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.println(readings[0]);
   b456e:	f003 fd23 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4572:	220a      	movs	r2, #10
   b4574:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   b4578:	f7ff fdea 	bl	b4150 <_ZN5Print7printlnItLi0EEEjT_i.isra.0>
  Serial.print("F2 445nm : ");
   b457c:	f003 fd1c 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4580:	498a      	ldr	r1, [pc, #552]	; (b47ac <_Z18serialprintresultsv+0x424>)
   b4582:	f003 fa35 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(counts[1]);
   b4586:	f003 fd17 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b458a:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   b458e:	2102      	movs	r1, #2
   b4590:	f003 fb34 	bl	b7bfc <_ZN5Print5printEfi>
  Serial.print("  ");
   b4594:	f003 fd10 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4598:	4982      	ldr	r1, [pc, #520]	; (b47a4 <_Z18serialprintresultsv+0x41c>)
   b459a:	f003 fa29 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   b459e:	f003 fd0b 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b45a2:	4981      	ldr	r1, [pc, #516]	; (b47a8 <_Z18serialprintresultsv+0x420>)
   b45a4:	f003 fa24 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.println(readings[1]);
   b45a8:	f003 fd06 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b45ac:	220a      	movs	r2, #10
   b45ae:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   b45b2:	f7ff fdcd 	bl	b4150 <_ZN5Print7printlnItLi0EEEjT_i.isra.0>
  Serial.print("F3 480nm : ");
   b45b6:	f003 fcff 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b45ba:	497d      	ldr	r1, [pc, #500]	; (b47b0 <_Z18serialprintresultsv+0x428>)
   b45bc:	f003 fa18 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(counts[2]);
   b45c0:	f003 fcfa 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b45c4:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
   b45c8:	2102      	movs	r1, #2
   b45ca:	f003 fb17 	bl	b7bfc <_ZN5Print5printEfi>
  Serial.print("  ");
   b45ce:	f003 fcf3 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b45d2:	4974      	ldr	r1, [pc, #464]	; (b47a4 <_Z18serialprintresultsv+0x41c>)
   b45d4:	f003 fa0c 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   b45d8:	f003 fcee 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b45dc:	4972      	ldr	r1, [pc, #456]	; (b47a8 <_Z18serialprintresultsv+0x420>)
   b45de:	f003 fa07 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.println(readings[2]);
   b45e2:	f003 fce9 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b45e6:	220a      	movs	r2, #10
   b45e8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b45ec:	f7ff fdb0 	bl	b4150 <_ZN5Print7printlnItLi0EEEjT_i.isra.0>
  Serial.print("F4 515nm : ");
   b45f0:	f003 fce2 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b45f4:	496f      	ldr	r1, [pc, #444]	; (b47b4 <_Z18serialprintresultsv+0x42c>)
   b45f6:	f003 f9fb 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(counts[3]);
   b45fa:	f003 fcdd 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b45fe:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   b4602:	2102      	movs	r1, #2
   b4604:	f003 fafa 	bl	b7bfc <_ZN5Print5printEfi>
  Serial.print("  ");
   b4608:	f003 fcd6 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b460c:	4965      	ldr	r1, [pc, #404]	; (b47a4 <_Z18serialprintresultsv+0x41c>)
   b460e:	f003 f9ef 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   b4612:	f003 fcd1 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4616:	4964      	ldr	r1, [pc, #400]	; (b47a8 <_Z18serialprintresultsv+0x420>)
   b4618:	f003 f9ea 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.println(readings[3]);
   b461c:	f003 fccc 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4620:	220a      	movs	r2, #10
   b4622:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   b4626:	f7ff fd93 	bl	b4150 <_ZN5Print7printlnItLi0EEEjT_i.isra.0>
  Serial.print("F5 555nm : ");
   b462a:	f003 fcc5 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b462e:	4962      	ldr	r1, [pc, #392]	; (b47b8 <_Z18serialprintresultsv+0x430>)
   b4630:	f003 f9de 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(counts[6]);
   b4634:	f003 fcc0 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4638:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
   b463c:	2102      	movs	r1, #2
   b463e:	f003 fadd 	bl	b7bfc <_ZN5Print5printEfi>
  Serial.print("  ");
   b4642:	f003 fcb9 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4646:	4957      	ldr	r1, [pc, #348]	; (b47a4 <_Z18serialprintresultsv+0x41c>)
   b4648:	f003 f9d2 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   b464c:	f003 fcb4 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4650:	4955      	ldr	r1, [pc, #340]	; (b47a8 <_Z18serialprintresultsv+0x420>)
   b4652:	f003 f9cd 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.println(readings[6]);
   b4656:	f003 fcaf 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b465a:	220a      	movs	r2, #10
   b465c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   b4660:	f7ff fd76 	bl	b4150 <_ZN5Print7printlnItLi0EEEjT_i.isra.0>
  Serial.print("F6 590nm : ");
   b4664:	f003 fca8 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4668:	4954      	ldr	r1, [pc, #336]	; (b47bc <_Z18serialprintresultsv+0x434>)
   b466a:	f003 f9c1 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(counts[7]);
   b466e:	f003 fca3 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4672:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
   b4676:	2102      	movs	r1, #2
   b4678:	f003 fac0 	bl	b7bfc <_ZN5Print5printEfi>
  Serial.print("  ");
   b467c:	f003 fc9c 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4680:	4948      	ldr	r1, [pc, #288]	; (b47a4 <_Z18serialprintresultsv+0x41c>)
   b4682:	f003 f9b5 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   b4686:	f003 fc97 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b468a:	4947      	ldr	r1, [pc, #284]	; (b47a8 <_Z18serialprintresultsv+0x420>)
   b468c:	f003 f9b0 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.println(readings[7]);
   b4690:	f003 fc92 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4694:	220a      	movs	r2, #10
   b4696:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   b469a:	f7ff fd59 	bl	b4150 <_ZN5Print7printlnItLi0EEEjT_i.isra.0>
  Serial.print("F7 630nm : ");
   b469e:	f003 fc8b 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b46a2:	4947      	ldr	r1, [pc, #284]	; (b47c0 <_Z18serialprintresultsv+0x438>)
   b46a4:	f003 f9a4 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(counts[8]);
   b46a8:	f003 fc86 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b46ac:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   b46b0:	2102      	movs	r1, #2
   b46b2:	f003 faa3 	bl	b7bfc <_ZN5Print5printEfi>
  Serial.print("  ");
   b46b6:	f003 fc7f 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b46ba:	493a      	ldr	r1, [pc, #232]	; (b47a4 <_Z18serialprintresultsv+0x41c>)
   b46bc:	f003 f998 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   b46c0:	f003 fc7a 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b46c4:	4938      	ldr	r1, [pc, #224]	; (b47a8 <_Z18serialprintresultsv+0x420>)
   b46c6:	f003 f993 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.println(readings[8]);
   b46ca:	f003 fc75 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b46ce:	220a      	movs	r2, #10
   b46d0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   b46d4:	f7ff fd3c 	bl	b4150 <_ZN5Print7printlnItLi0EEEjT_i.isra.0>
  Serial.print("F8 680nm : ");
   b46d8:	f003 fc6e 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b46dc:	4939      	ldr	r1, [pc, #228]	; (b47c4 <_Z18serialprintresultsv+0x43c>)
   b46de:	f003 f987 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(counts[9]);
   b46e2:	f003 fc69 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b46e6:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   b46ea:	2102      	movs	r1, #2
   b46ec:	f003 fa86 	bl	b7bfc <_ZN5Print5printEfi>
  Serial.print("  ");
   b46f0:	f003 fc62 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b46f4:	492b      	ldr	r1, [pc, #172]	; (b47a4 <_Z18serialprintresultsv+0x41c>)
   b46f6:	f003 f97b 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   b46fa:	f003 fc5d 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b46fe:	492a      	ldr	r1, [pc, #168]	; (b47a8 <_Z18serialprintresultsv+0x420>)
   b4700:	f003 f976 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.println(readings[9]);
   b4704:	f003 fc58 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4708:	220a      	movs	r2, #10
   b470a:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   b470e:	f7ff fd1f 	bl	b4150 <_ZN5Print7printlnItLi0EEEjT_i.isra.0>
  Serial.print("Clear    : ");
   b4712:	f003 fc51 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4716:	492c      	ldr	r1, [pc, #176]	; (b47c8 <_Z18serialprintresultsv+0x440>)
   b4718:	f003 f96a 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(counts[10]);
   b471c:	f003 fc4c 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4720:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   b4724:	2102      	movs	r1, #2
   b4726:	f003 fa69 	bl	b7bfc <_ZN5Print5printEfi>
  Serial.print("  ");
   b472a:	f003 fc45 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b472e:	491d      	ldr	r1, [pc, #116]	; (b47a4 <_Z18serialprintresultsv+0x41c>)
   b4730:	f003 f95e 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   b4734:	f003 fc40 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4738:	491b      	ldr	r1, [pc, #108]	; (b47a8 <_Z18serialprintresultsv+0x420>)
   b473a:	f003 f959 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.println(readings[10]);
   b473e:	f003 fc3b 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4742:	220a      	movs	r2, #10
   b4744:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   b4748:	f7ff fd02 	bl	b4150 <_ZN5Print7printlnItLi0EEEjT_i.isra.0>
  Serial.print("NIR      : ");
   b474c:	f003 fc34 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4750:	491e      	ldr	r1, [pc, #120]	; (b47cc <_Z18serialprintresultsv+0x444>)
   b4752:	f003 f94d 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print(counts[11]);
   b4756:	f003 fc2f 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b475a:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   b475e:	2102      	movs	r1, #2
   b4760:	f003 fa4c 	bl	b7bfc <_ZN5Print5printEfi>
  Serial.print("  ");
   b4764:	f003 fc28 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4768:	490e      	ldr	r1, [pc, #56]	; (b47a4 <_Z18serialprintresultsv+0x41c>)
   b476a:	f003 f941 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   b476e:	f003 fc23 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4772:	490d      	ldr	r1, [pc, #52]	; (b47a8 <_Z18serialprintresultsv+0x420>)
   b4774:	f003 f93c 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.println(readings[11]);
   b4778:	f003 fc1e 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b477c:	220a      	movs	r2, #10
   b477e:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   b4782:	f7ff fce5 	bl	b4150 <_ZN5Print7printlnItLi0EEEjT_i.isra.0>
  Serial.print("  ");
   b4786:	f003 fc17 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b478a:	4906      	ldr	r1, [pc, #24]	; (b47a4 <_Z18serialprintresultsv+0x41c>)
   b478c:	f003 f930 	bl	b79f0 <_ZN5Print5printEPKc>
  Serial.println();
   b4790:	f003 fc12 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4794:	f003 f933 	bl	b79fe <_ZN5Print7printlnEv>
   b4798:	e696      	b.n	b44c8 <_Z18serialprintresultsv+0x140>
   b479a:	bf00      	nop
   b479c:	2003e650 	.word	0x2003e650
   b47a0:	000b9186 	.word	0x000b9186
   b47a4:	000b9192 	.word	0x000b9192
   b47a8:	000b9195 	.word	0x000b9195
   b47ac:	000b91a2 	.word	0x000b91a2
   b47b0:	000b91ae 	.word	0x000b91ae
   b47b4:	000b91ba 	.word	0x000b91ba
   b47b8:	000b91c6 	.word	0x000b91c6
   b47bc:	000b91d2 	.word	0x000b91d2
   b47c0:	000b91de 	.word	0x000b91de
   b47c4:	000b91ea 	.word	0x000b91ea
   b47c8:	000b91f6 	.word	0x000b91f6
   b47cc:	000b9202 	.word	0x000b9202

000b47d0 <_Z16fileprintresultsv>:

void fileprintresults() 
{
   b47d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b47d2:	b0a3      	sub	sp, #140	; 0x8c
   b47d4:	2300      	movs	r3, #0
   b47d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b47da:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   b47de:	9319      	str	r3, [sp, #100]	; 0x64
   b47e0:	4b0b      	ldr	r3, [pc, #44]	; (b4810 <_Z16fileprintresultsv+0x40>)
   b47e2:	490c      	ldr	r1, [pc, #48]	; (b4814 <_Z16fileprintresultsv+0x44>)
   b47e4:	4a0c      	ldr	r2, [pc, #48]	; (b4818 <_Z16fileprintresultsv+0x48>)
   b47e6:	9315      	str	r3, [sp, #84]	; 0x54
   b47e8:	a819      	add	r0, sp, #100	; 0x64
   b47ea:	f244 2302 	movw	r3, #16898	; 0x4202
   b47ee:	f001 fbf6 	bl	b5fde <_ZN7FatFile4openEPS_PKci>

File file = SD.open("4_9_24_700ms_128x_2_turbidity.csv", FILE_WRITE);
DateTime now = rtc.now();
   b47f2:	a801      	add	r0, sp, #4
   b47f4:	f001 f933 	bl	b5a5e <_ZN11RTC_PCF85233nowEv>
// unsigned long decimalseconds_to_record = (millis() % 1000)/1; //the divided by 1 has to stay, otherwise the program gets stuck during serial monitor!

 uint16_t readings[12];
  float counts[12];

    if (!as7341.readAllChannels(readings)){
   b47f8:	4808      	ldr	r0, [pc, #32]	; (b481c <_Z16fileprintresultsv+0x4c>)
   b47fa:	a903      	add	r1, sp, #12
   b47fc:	f000 fcd5 	bl	b51aa <_ZN15Adafruit_AS734115readAllChannelsEPt>
   b4800:	b980      	cbnz	r0, b4824 <_Z16fileprintresultsv+0x54>
    Serial.println("Error reading all channels!");
   b4802:	f003 fbd9 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4806:	4906      	ldr	r1, [pc, #24]	; (b4820 <_Z16fileprintresultsv+0x50>)
   b4808:	f003 f905 	bl	b7a16 <_ZN5Print7printlnEPKc>

else {
    Serial.println(F("Error opening file!"));
  }

   b480c:	b023      	add	sp, #140	; 0x8c
   b480e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4810:	000b9250 	.word	0x000b9250
   b4814:	2003e5fc 	.word	0x2003e5fc
   b4818:	000b8fe6 	.word	0x000b8fe6
   b481c:	2003e650 	.word	0x2003e650
   b4820:	000b916a 	.word	0x000b916a
    counts[i] = as7341.toBasicCounts(readings[i]);
   b4824:	4fcb      	ldr	r7, [pc, #812]	; (b4b54 <_Z16fileprintresultsv+0x384>)
   b4826:	ad03      	add	r5, sp, #12
   b4828:	ae09      	add	r6, sp, #36	; 0x24
    if (!as7341.readAllChannels(readings)){
   b482a:	24fc      	movs	r4, #252	; 0xfc
    if(i == 4 || i == 5) continue;
   b482c:	2c01      	cmp	r4, #1
   b482e:	d905      	bls.n	b483c <_Z16fileprintresultsv+0x6c>
    counts[i] = as7341.toBasicCounts(readings[i]);
   b4830:	8829      	ldrh	r1, [r5, #0]
   b4832:	4638      	mov	r0, r7
   b4834:	f000 fb74 	bl	b4f20 <_ZN15Adafruit_AS734113toBasicCountsEt>
   b4838:	ed86 0a00 	vstr	s0, [r6]
  for(uint8_t i = 0; i < 12; i++) {
   b483c:	3401      	adds	r4, #1
   b483e:	b2e4      	uxtb	r4, r4
   b4840:	2c08      	cmp	r4, #8
   b4842:	f105 0502 	add.w	r5, r5, #2
   b4846:	f106 0604 	add.w	r6, r6, #4
   b484a:	d1ef      	bne.n	b482c <_Z16fileprintresultsv+0x5c>
if (file) {
   b484c:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
   b4850:	2b00      	cmp	r3, #0
   b4852:	f000 81a5 	beq.w	b4ba0 <_Z16fileprintresultsv+0x3d0>
   b4856:	f002 fc8b 	bl	b7170 <HAL_Timer_Get_Milli_Seconds>
  aw.analogWrite(LedPin, isLedOn ? LEDbright : LEDdim); // Turn LED on or off with specified intensity
   b485a:	4bbf      	ldr	r3, [pc, #764]	; (b4b58 <_Z16fileprintresultsv+0x388>)
   b485c:	48bf      	ldr	r0, [pc, #764]	; (b4b5c <_Z16fileprintresultsv+0x38c>)
   b485e:	781a      	ldrb	r2, [r3, #0]
   b4860:	4bbf      	ldr	r3, [pc, #764]	; (b4b60 <_Z16fileprintresultsv+0x390>)
   b4862:	7819      	ldrb	r1, [r3, #0]
   b4864:	f000 fd14 	bl	b5290 <_ZN15Adafruit_AW952311analogWriteEhh>
   b4868:	f89d 1004 	ldrb.w	r1, [sp, #4]
    file.print(now.year(), DEC);
   b486c:	220a      	movs	r2, #10
   b486e:	a815      	add	r0, sp, #84	; 0x54
   b4870:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
   b4874:	f7ff fc5f 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
    file.print('/');
   b4878:	212f      	movs	r1, #47	; 0x2f
   b487a:	a815      	add	r0, sp, #84	; 0x54
   b487c:	f003 f8bc 	bl	b79f8 <_ZN5Print5printEc>
        return printNumber(val, base) + t;
   b4880:	f89d 1005 	ldrb.w	r1, [sp, #5]
   b4884:	220a      	movs	r2, #10
   b4886:	a815      	add	r0, sp, #84	; 0x54
   b4888:	f003 f8d1 	bl	b7a2e <_ZN5Print11printNumberEmh>
    file.print('/');
   b488c:	212f      	movs	r1, #47	; 0x2f
   b488e:	a815      	add	r0, sp, #84	; 0x54
   b4890:	f003 f8b2 	bl	b79f8 <_ZN5Print5printEc>
   b4894:	220a      	movs	r2, #10
   b4896:	f89d 1006 	ldrb.w	r1, [sp, #6]
   b489a:	a815      	add	r0, sp, #84	; 0x54
   b489c:	f003 f8c7 	bl	b7a2e <_ZN5Print11printNumberEmh>
    file.print(" (");
   b48a0:	49b0      	ldr	r1, [pc, #704]	; (b4b64 <_Z16fileprintresultsv+0x394>)
   b48a2:	a815      	add	r0, sp, #84	; 0x54
   b48a4:	f003 f8a4 	bl	b79f0 <_ZN5Print5printEPKc>
    file.print(daysOfTheWeek[now.dayOfTheWeek()]);
   b48a8:	a801      	add	r0, sp, #4
   b48aa:	f001 f89f 	bl	b59ec <_ZNK8DateTime12dayOfTheWeekEv>
   b48ae:	49ae      	ldr	r1, [pc, #696]	; (b4b68 <_Z16fileprintresultsv+0x398>)
   b48b0:	b200      	sxth	r0, r0
   b48b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   b48b6:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   b48ba:	a815      	add	r0, sp, #84	; 0x54
   b48bc:	f003 f898 	bl	b79f0 <_ZN5Print5printEPKc>
    file.print(") ");
   b48c0:	49aa      	ldr	r1, [pc, #680]	; (b4b6c <_Z16fileprintresultsv+0x39c>)
   b48c2:	a815      	add	r0, sp, #84	; 0x54
   b48c4:	f003 f894 	bl	b79f0 <_ZN5Print5printEPKc>
   b48c8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b48cc:	220a      	movs	r2, #10
   b48ce:	a815      	add	r0, sp, #84	; 0x54
   b48d0:	f003 f8ad 	bl	b7a2e <_ZN5Print11printNumberEmh>
    file.print(':');
   b48d4:	213a      	movs	r1, #58	; 0x3a
   b48d6:	a815      	add	r0, sp, #84	; 0x54
   b48d8:	f003 f88e 	bl	b79f8 <_ZN5Print5printEc>
   b48dc:	f89d 1008 	ldrb.w	r1, [sp, #8]
   b48e0:	220a      	movs	r2, #10
   b48e2:	a815      	add	r0, sp, #84	; 0x54
   b48e4:	f003 f8a3 	bl	b7a2e <_ZN5Print11printNumberEmh>
    file.print(':');
   b48e8:	213a      	movs	r1, #58	; 0x3a
   b48ea:	a815      	add	r0, sp, #84	; 0x54
   b48ec:	f003 f884 	bl	b79f8 <_ZN5Print5printEc>
   b48f0:	220a      	movs	r2, #10
   b48f2:	f89d 1009 	ldrb.w	r1, [sp, #9]
   b48f6:	a815      	add	r0, sp, #84	; 0x54
   b48f8:	f003 f899 	bl	b7a2e <_ZN5Print11printNumberEmh>
    file.print(',');
   b48fc:	212c      	movs	r1, #44	; 0x2c
   b48fe:	a815      	add	r0, sp, #84	; 0x54
   b4900:	f003 f87a 	bl	b79f8 <_ZN5Print5printEc>
    file.print(as7341.getASTEP());
   b4904:	4893      	ldr	r0, [pc, #588]	; (b4b54 <_Z16fileprintresultsv+0x384>)
   b4906:	f000 fad2 	bl	b4eae <_ZN15Adafruit_AS73418getASTEPEv>
   b490a:	220a      	movs	r2, #10
   b490c:	4601      	mov	r1, r0
   b490e:	a815      	add	r0, sp, #84	; 0x54
   b4910:	f7ff fc11 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
    file.print(',');
   b4914:	212c      	movs	r1, #44	; 0x2c
   b4916:	a815      	add	r0, sp, #84	; 0x54
   b4918:	f003 f86e 	bl	b79f8 <_ZN5Print5printEc>
    file.print(as7341.getATIME());
   b491c:	488d      	ldr	r0, [pc, #564]	; (b4b54 <_Z16fileprintresultsv+0x384>)
   b491e:	f000 faa0 	bl	b4e62 <_ZN15Adafruit_AS73418getATIMEEv>
   b4922:	220a      	movs	r2, #10
   b4924:	4601      	mov	r1, r0
   b4926:	a815      	add	r0, sp, #84	; 0x54
   b4928:	f003 f881 	bl	b7a2e <_ZN5Print11printNumberEmh>
    file.print(',');
   b492c:	212c      	movs	r1, #44	; 0x2c
   b492e:	a815      	add	r0, sp, #84	; 0x54
   b4930:	f003 f862 	bl	b79f8 <_ZN5Print5printEc>
    file.print(as7341.getGain());
   b4934:	4887      	ldr	r0, [pc, #540]	; (b4b54 <_Z16fileprintresultsv+0x384>)
   b4936:	f000 fae0 	bl	b4efa <_ZN15Adafruit_AS73417getGainEv>
   b493a:	220a      	movs	r2, #10
   b493c:	4601      	mov	r1, r0
   b493e:	a815      	add	r0, sp, #84	; 0x54
   b4940:	f003 f875 	bl	b7a2e <_ZN5Print11printNumberEmh>
    file.print(',');
   b4944:	212c      	movs	r1, #44	; 0x2c
   b4946:	a815      	add	r0, sp, #84	; 0x54
   b4948:	f003 f856 	bl	b79f8 <_ZN5Print5printEc>
    file.print(isLedOn ? "LED ON" : "LED OFF");
   b494c:	4988      	ldr	r1, [pc, #544]	; (b4b70 <_Z16fileprintresultsv+0x3a0>)
   b494e:	a815      	add	r0, sp, #84	; 0x54
   b4950:	f003 f84e 	bl	b79f0 <_ZN5Print5printEPKc>
    file.print(',');
   b4954:	212c      	movs	r1, #44	; 0x2c
   b4956:	a815      	add	r0, sp, #84	; 0x54
   b4958:	f003 f84e 	bl	b79f8 <_ZN5Print5printEc>
    file.print(isLedOn ? "255" : "0"); // Record the LED intensity (100 when on, 0 when off)
   b495c:	4985      	ldr	r1, [pc, #532]	; (b4b74 <_Z16fileprintresultsv+0x3a4>)
   b495e:	a815      	add	r0, sp, #84	; 0x54
   b4960:	f003 f846 	bl	b79f0 <_ZN5Print5printEPKc>
    file.print(',');
   b4964:	212c      	movs	r1, #44	; 0x2c
   b4966:	a815      	add	r0, sp, #84	; 0x54
   b4968:	f003 f846 	bl	b79f8 <_ZN5Print5printEc>
    file.print("0");
   b496c:	4982      	ldr	r1, [pc, #520]	; (b4b78 <_Z16fileprintresultsv+0x3a8>)
   b496e:	a815      	add	r0, sp, #84	; 0x54
   b4970:	f003 f83e 	bl	b79f0 <_ZN5Print5printEPKc>
    file.print(',');
   b4974:	212c      	movs	r1, #44	; 0x2c
   b4976:	a815      	add	r0, sp, #84	; 0x54
   b4978:	f003 f83e 	bl	b79f8 <_ZN5Print5printEc>
   b497c:	f002 fbf8 	bl	b7170 <HAL_Timer_Get_Milli_Seconds>
   b4980:	220a      	movs	r2, #10
   b4982:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4986:	fbb0 f1f1 	udiv	r1, r0, r1
   b498a:	a815      	add	r0, sp, #84	; 0x54
   b498c:	f003 f84f 	bl	b7a2e <_ZN5Print11printNumberEmh>
    file.print(','); 
   b4990:	212c      	movs	r1, #44	; 0x2c
   b4992:	a815      	add	r0, sp, #84	; 0x54
   b4994:	f003 f830 	bl	b79f8 <_ZN5Print5printEc>
   b4998:	f002 fbea 	bl	b7170 <HAL_Timer_Get_Milli_Seconds>
   b499c:	220a      	movs	r2, #10
   b499e:	4601      	mov	r1, r0
   b49a0:	a815      	add	r0, sp, #84	; 0x54
   b49a2:	f003 f844 	bl	b7a2e <_ZN5Print11printNumberEmh>
    file.print(',');
   b49a6:	212c      	movs	r1, #44	; 0x2c
   b49a8:	a815      	add	r0, sp, #84	; 0x54
   b49aa:	f003 f825 	bl	b79f8 <_ZN5Print5printEc>
    file.print("BASIC COUNTS");
   b49ae:	4973      	ldr	r1, [pc, #460]	; (b4b7c <_Z16fileprintresultsv+0x3ac>)
   b49b0:	a815      	add	r0, sp, #84	; 0x54
   b49b2:	f003 f81d 	bl	b79f0 <_ZN5Print5printEPKc>
    file.print(',');
   b49b6:	212c      	movs	r1, #44	; 0x2c
   b49b8:	a815      	add	r0, sp, #84	; 0x54
   b49ba:	f003 f81d 	bl	b79f8 <_ZN5Print5printEc>
    file.print(counts[0]);
   b49be:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   b49c2:	2102      	movs	r1, #2
   b49c4:	a815      	add	r0, sp, #84	; 0x54
   b49c6:	f003 f919 	bl	b7bfc <_ZN5Print5printEfi>
    file.print(',');
   b49ca:	212c      	movs	r1, #44	; 0x2c
   b49cc:	a815      	add	r0, sp, #84	; 0x54
   b49ce:	f003 f813 	bl	b79f8 <_ZN5Print5printEc>
    file.print(counts[1]);
   b49d2:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
   b49d6:	2102      	movs	r1, #2
   b49d8:	a815      	add	r0, sp, #84	; 0x54
   b49da:	f003 f90f 	bl	b7bfc <_ZN5Print5printEfi>
    file.print(',');
   b49de:	212c      	movs	r1, #44	; 0x2c
   b49e0:	a815      	add	r0, sp, #84	; 0x54
   b49e2:	f003 f809 	bl	b79f8 <_ZN5Print5printEc>
    file.print(counts[2]);
   b49e6:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   b49ea:	2102      	movs	r1, #2
   b49ec:	a815      	add	r0, sp, #84	; 0x54
   b49ee:	f003 f905 	bl	b7bfc <_ZN5Print5printEfi>
    file.print(',');
   b49f2:	212c      	movs	r1, #44	; 0x2c
   b49f4:	a815      	add	r0, sp, #84	; 0x54
   b49f6:	f002 ffff 	bl	b79f8 <_ZN5Print5printEc>
    file.print(counts[3]);
   b49fa:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   b49fe:	2102      	movs	r1, #2
   b4a00:	a815      	add	r0, sp, #84	; 0x54
   b4a02:	f003 f8fb 	bl	b7bfc <_ZN5Print5printEfi>
    file.print(',');
   b4a06:	212c      	movs	r1, #44	; 0x2c
   b4a08:	a815      	add	r0, sp, #84	; 0x54
   b4a0a:	f002 fff5 	bl	b79f8 <_ZN5Print5printEc>
    file.print(counts[6]);
   b4a0e:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
   b4a12:	2102      	movs	r1, #2
   b4a14:	a815      	add	r0, sp, #84	; 0x54
   b4a16:	f003 f8f1 	bl	b7bfc <_ZN5Print5printEfi>
    file.print(',');
   b4a1a:	212c      	movs	r1, #44	; 0x2c
   b4a1c:	a815      	add	r0, sp, #84	; 0x54
   b4a1e:	f002 ffeb 	bl	b79f8 <_ZN5Print5printEc>
    file.print(counts[7]);
   b4a22:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   b4a26:	2102      	movs	r1, #2
   b4a28:	a815      	add	r0, sp, #84	; 0x54
   b4a2a:	f003 f8e7 	bl	b7bfc <_ZN5Print5printEfi>
    file.print(',');
   b4a2e:	212c      	movs	r1, #44	; 0x2c
   b4a30:	a815      	add	r0, sp, #84	; 0x54
   b4a32:	f002 ffe1 	bl	b79f8 <_ZN5Print5printEc>
    file.print(counts[8]);
   b4a36:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   b4a3a:	2102      	movs	r1, #2
   b4a3c:	a815      	add	r0, sp, #84	; 0x54
   b4a3e:	f003 f8dd 	bl	b7bfc <_ZN5Print5printEfi>
    file.print(',');
   b4a42:	212c      	movs	r1, #44	; 0x2c
   b4a44:	a815      	add	r0, sp, #84	; 0x54
   b4a46:	f002 ffd7 	bl	b79f8 <_ZN5Print5printEc>
    file.print(counts[9]);
   b4a4a:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   b4a4e:	2102      	movs	r1, #2
   b4a50:	a815      	add	r0, sp, #84	; 0x54
   b4a52:	f003 f8d3 	bl	b7bfc <_ZN5Print5printEfi>
    file.print(',');
   b4a56:	212c      	movs	r1, #44	; 0x2c
   b4a58:	a815      	add	r0, sp, #84	; 0x54
   b4a5a:	f002 ffcd 	bl	b79f8 <_ZN5Print5printEc>
    file.print(counts[10]);
   b4a5e:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   b4a62:	2102      	movs	r1, #2
   b4a64:	a815      	add	r0, sp, #84	; 0x54
   b4a66:	f003 f8c9 	bl	b7bfc <_ZN5Print5printEfi>
    file.print(',');
   b4a6a:	212c      	movs	r1, #44	; 0x2c
   b4a6c:	a815      	add	r0, sp, #84	; 0x54
   b4a6e:	f002 ffc3 	bl	b79f8 <_ZN5Print5printEc>
    file.print(counts[11]);
   b4a72:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   b4a76:	2102      	movs	r1, #2
   b4a78:	a815      	add	r0, sp, #84	; 0x54
   b4a7a:	f003 f8bf 	bl	b7bfc <_ZN5Print5printEfi>
    file.print(',');
   b4a7e:	212c      	movs	r1, #44	; 0x2c
   b4a80:	a815      	add	r0, sp, #84	; 0x54
   b4a82:	f002 ffb9 	bl	b79f8 <_ZN5Print5printEc>
    file.print("RAW VALUES");
   b4a86:	493e      	ldr	r1, [pc, #248]	; (b4b80 <_Z16fileprintresultsv+0x3b0>)
   b4a88:	a815      	add	r0, sp, #84	; 0x54
   b4a8a:	f002 ffb1 	bl	b79f0 <_ZN5Print5printEPKc>
    file.print(',');
   b4a8e:	212c      	movs	r1, #44	; 0x2c
   b4a90:	a815      	add	r0, sp, #84	; 0x54
   b4a92:	f002 ffb1 	bl	b79f8 <_ZN5Print5printEc>
    file.print(readings[0]);
   b4a96:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   b4a9a:	220a      	movs	r2, #10
   b4a9c:	a815      	add	r0, sp, #84	; 0x54
   b4a9e:	f7ff fb4a 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
    file.print(',');
   b4aa2:	212c      	movs	r1, #44	; 0x2c
   b4aa4:	a815      	add	r0, sp, #84	; 0x54
   b4aa6:	f002 ffa7 	bl	b79f8 <_ZN5Print5printEc>
    file.print(readings[1]);
   b4aaa:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   b4aae:	220a      	movs	r2, #10
   b4ab0:	a815      	add	r0, sp, #84	; 0x54
   b4ab2:	f7ff fb40 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
    file.print(',');
   b4ab6:	212c      	movs	r1, #44	; 0x2c
   b4ab8:	a815      	add	r0, sp, #84	; 0x54
   b4aba:	f002 ff9d 	bl	b79f8 <_ZN5Print5printEc>
    file.print(readings[2]);
   b4abe:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   b4ac2:	220a      	movs	r2, #10
   b4ac4:	a815      	add	r0, sp, #84	; 0x54
   b4ac6:	f7ff fb36 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
    file.print(',');
   b4aca:	212c      	movs	r1, #44	; 0x2c
   b4acc:	a815      	add	r0, sp, #84	; 0x54
   b4ace:	f002 ff93 	bl	b79f8 <_ZN5Print5printEc>
    file.print(readings[3]);
   b4ad2:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   b4ad6:	220a      	movs	r2, #10
   b4ad8:	a815      	add	r0, sp, #84	; 0x54
   b4ada:	f7ff fb2c 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
    file.print(',');
   b4ade:	212c      	movs	r1, #44	; 0x2c
   b4ae0:	a815      	add	r0, sp, #84	; 0x54
   b4ae2:	f002 ff89 	bl	b79f8 <_ZN5Print5printEc>
    file.print(readings[6]);
   b4ae6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   b4aea:	220a      	movs	r2, #10
   b4aec:	a815      	add	r0, sp, #84	; 0x54
   b4aee:	f7ff fb22 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
    file.print(',');
   b4af2:	212c      	movs	r1, #44	; 0x2c
   b4af4:	a815      	add	r0, sp, #84	; 0x54
   b4af6:	f002 ff7f 	bl	b79f8 <_ZN5Print5printEc>
    file.print(readings[7]);
   b4afa:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   b4afe:	220a      	movs	r2, #10
   b4b00:	a815      	add	r0, sp, #84	; 0x54
   b4b02:	f7ff fb18 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
    file.print(',');
   b4b06:	212c      	movs	r1, #44	; 0x2c
   b4b08:	a815      	add	r0, sp, #84	; 0x54
   b4b0a:	f002 ff75 	bl	b79f8 <_ZN5Print5printEc>
    file.print(readings[8]);
   b4b0e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   b4b12:	220a      	movs	r2, #10
   b4b14:	a815      	add	r0, sp, #84	; 0x54
   b4b16:	f7ff fb0e 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
    file.print(',');
   b4b1a:	212c      	movs	r1, #44	; 0x2c
   b4b1c:	a815      	add	r0, sp, #84	; 0x54
   b4b1e:	f002 ff6b 	bl	b79f8 <_ZN5Print5printEc>
    file.print(readings[9]);
   b4b22:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   b4b26:	220a      	movs	r2, #10
   b4b28:	a815      	add	r0, sp, #84	; 0x54
   b4b2a:	f7ff fb04 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
    file.print(',');
   b4b2e:	212c      	movs	r1, #44	; 0x2c
   b4b30:	a815      	add	r0, sp, #84	; 0x54
   b4b32:	f002 ff61 	bl	b79f8 <_ZN5Print5printEc>
    file.print(readings[10]);
   b4b36:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   b4b3a:	220a      	movs	r2, #10
   b4b3c:	a815      	add	r0, sp, #84	; 0x54
   b4b3e:	f7ff fafa 	bl	b4136 <_ZN5Print5printItLi0EEEjT_i.isra.0>
    file.print(',');
   b4b42:	212c      	movs	r1, #44	; 0x2c
   b4b44:	a815      	add	r0, sp, #84	; 0x54
   b4b46:	f002 ff57 	bl	b79f8 <_ZN5Print5printEc>
    file.println(readings[11]);
   b4b4a:	220a      	movs	r2, #10
   b4b4c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   b4b50:	a815      	add	r0, sp, #84	; 0x54
   b4b52:	e017      	b.n	b4b84 <_Z16fileprintresultsv+0x3b4>
   b4b54:	2003e650 	.word	0x2003e650
   b4b58:	2003e0ec 	.word	0x2003e0ec
   b4b5c:	2003e678 	.word	0x2003e678
   b4b60:	2003e1bc 	.word	0x2003e1bc
   b4b64:	000b9164 	.word	0x000b9164
   b4b68:	2003e0f0 	.word	0x2003e0f0
   b4b6c:	000b9167 	.word	0x000b9167
   b4b70:	000b920e 	.word	0x000b920e
   b4b74:	000b9215 	.word	0x000b9215
   b4b78:	000b9219 	.word	0x000b9219
   b4b7c:	000b921b 	.word	0x000b921b
   b4b80:	000b9228 	.word	0x000b9228
   b4b84:	f7ff fae4 	bl	b4150 <_ZN5Print7printlnItLi0EEEjT_i.isra.0>
    file.print(',');
   b4b88:	212c      	movs	r1, #44	; 0x2c
   b4b8a:	a815      	add	r0, sp, #84	; 0x54
   b4b8c:	f002 ff34 	bl	b79f8 <_ZN5Print5printEc>
    file.println("");
   b4b90:	4906      	ldr	r1, [pc, #24]	; (b4bac <_Z16fileprintresultsv+0x3dc>)
   b4b92:	a815      	add	r0, sp, #84	; 0x54
   b4b94:	f002 ff3f 	bl	b7a16 <_ZN5Print7printlnEPKc>
    file.close();
   b4b98:	a819      	add	r0, sp, #100	; 0x64
   b4b9a:	f001 fa19 	bl	b5fd0 <_ZN7FatFile5closeEv>
   b4b9e:	e635      	b.n	b480c <_Z16fileprintresultsv+0x3c>
    Serial.println(F("Error opening file!"));
   b4ba0:	f003 fa0a 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b4ba4:	4902      	ldr	r1, [pc, #8]	; (b4bb0 <_Z16fileprintresultsv+0x3e0>)
   b4ba6:	f002 ff40 	bl	b7a2a <_ZN5Print7printlnEPK19__FlashStringHelper>
    virtual ~Print() {}
   b4baa:	e62f      	b.n	b480c <_Z16fileprintresultsv+0x3c>
   b4bac:	000b9194 	.word	0x000b9194
   b4bb0:	000b9141 	.word	0x000b9141

000b4bb4 <loop>:
void loop() {
   b4bb4:	b508      	push	{r3, lr}
  serialprintresults();
   b4bb6:	f7ff fbe7 	bl	b4388 <_Z18serialprintresultsv>
}
   b4bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  fileprintresults();
   b4bbe:	f7ff be07 	b.w	b47d0 <_Z16fileprintresultsv>
	...

000b4bc4 <_GLOBAL__sub_I_as7341>:
   b4bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
Adafruit_AS7341 as7341;
   b4bc6:	4824      	ldr	r0, [pc, #144]	; (b4c58 <_GLOBAL__sub_I_as7341+0x94>)
  SdFat() {
   b4bc8:	4c24      	ldr	r4, [pc, #144]	; (b4c5c <_GLOBAL__sub_I_as7341+0x98>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b4bca:	4d25      	ldr	r5, [pc, #148]	; (b4c60 <_GLOBAL__sub_I_as7341+0x9c>)
   b4bcc:	f000 f856 	bl	b4c7c <_ZN15Adafruit_AS7341C1Ev>
Adafruit_AW9523 aw;
   b4bd0:	4824      	ldr	r0, [pc, #144]	; (b4c64 <_GLOBAL__sub_I_as7341+0xa0>)
   b4bd2:	f000 fb20 	bl	b5216 <_ZN15Adafruit_AW9523C1Ev>
    Print() : write_error(0) {}
   b4bd6:	4a24      	ldr	r2, [pc, #144]	; (b4c68 <_GLOBAL__sub_I_as7341+0xa4>)
   b4bd8:	2300      	movs	r3, #0
   b4bda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4bde:	e9c2 3101 	strd	r3, r1, [r2, #4]
   b4be2:	4922      	ldr	r1, [pc, #136]	; (b4c6c <_GLOBAL__sub_I_as7341+0xa8>)
   b4be4:	6113      	str	r3, [r2, #16]
   b4be6:	6011      	str	r1, [r2, #0]
   b4be8:	2264      	movs	r2, #100	; 0x64
   b4bea:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
  {
   b4bee:	4a20      	ldr	r2, [pc, #128]	; (b4c70 <_GLOBAL__sub_I_as7341+0xac>)
   b4bf0:	f8c4 2470 	str.w	r2, [r4, #1136]	; 0x470
   b4bf4:	2201      	movs	r2, #1
   b4bf6:	6063      	str	r3, [r4, #4]
   b4bf8:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   b4bfc:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   b4c00:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   b4c04:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   b4c08:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   b4c0c:	7829      	ldrb	r1, [r5, #0]
   b4c0e:	f3bf 8f5b 	dmb	ish
   b4c12:	4011      	ands	r1, r2
   b4c14:	d10b      	bne.n	b4c2e <_GLOBAL__sub_I_as7341+0x6a>
   b4c16:	4628      	mov	r0, r5
   b4c18:	9101      	str	r1, [sp, #4]
   b4c1a:	f7ff fa42 	bl	b40a2 <__cxa_guard_acquire>
   b4c1e:	9901      	ldr	r1, [sp, #4]
   b4c20:	b128      	cbz	r0, b4c2e <_GLOBAL__sub_I_as7341+0x6a>
   b4c22:	4814      	ldr	r0, [pc, #80]	; (b4c74 <_GLOBAL__sub_I_as7341+0xb0>)
   b4c24:	f003 f836 	bl	b7c94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b4c28:	4628      	mov	r0, r5
   b4c2a:	f7ff fa3f 	bl	b40ac <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b4c2e:	4b11      	ldr	r3, [pc, #68]	; (b4c74 <_GLOBAL__sub_I_as7341+0xb0>)
   b4c30:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
SYSTEM_THREAD(ENABLED);
   b4c34:	2100      	movs	r1, #0
   b4c36:	2001      	movs	r0, #1
   b4c38:	f002 fc0a 	bl	b7450 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4c3c:	4b0e      	ldr	r3, [pc, #56]	; (b4c78 <_GLOBAL__sub_I_as7341+0xb4>)
   b4c3e:	2200      	movs	r2, #0
   b4c40:	e9c3 2200 	strd	r2, r2, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4c44:	2002      	movs	r0, #2
    SleepResult() {}
   b4c46:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b4c4a:	609a      	str	r2, [r3, #8]
   b4c4c:	b003      	add	sp, #12
   b4c4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        set_system_mode(mode);
   b4c52:	f002 bbed 	b.w	b7430 <set_system_mode>
   b4c56:	bf00      	nop
   b4c58:	2003e650 	.word	0x2003e650
   b4c5c:	2003e1c0 	.word	0x2003e1c0
   b4c60:	2003e1b0 	.word	0x2003e1b0
   b4c64:	2003e678 	.word	0x2003e678
   b4c68:	2003e67c 	.word	0x2003e67c
   b4c6c:	000b9250 	.word	0x000b9250
   b4c70:	000b923c 	.word	0x000b923c
   b4c74:	2003e1b4 	.word	0x2003e1b4
   b4c78:	2003e644 	.word	0x2003e644

000b4c7c <_ZN15Adafruit_AS7341C1Ev>:

/**
 * @brief Construct a new Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::Adafruit_AS7341(void) {}
   b4c7c:	4a02      	ldr	r2, [pc, #8]	; (b4c88 <_ZN15Adafruit_AS7341C1Ev+0xc>)
   b4c7e:	6002      	str	r2, [r0, #0]
   b4c80:	2200      	movs	r2, #0
   b4c82:	7102      	strb	r2, [r0, #4]
   b4c84:	6082      	str	r2, [r0, #8]
   b4c86:	4770      	bx	lr
   b4c88:	000b92a4 	.word	0x000b92a4

000b4c8c <_ZN15Adafruit_AS73415beginEhP7TwoWirel>:
 *    @param  sensor_id
 *            The unique ID to differentiate the sensors from others
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_AS7341::begin(uint8_t i2c_address, TwoWire *wire,
                            int32_t sensor_id) {
   b4c8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4c90:	4604      	mov	r4, r0
  if (i2c_dev) {
   b4c92:	6880      	ldr	r0, [r0, #8]
                            int32_t sensor_id) {
   b4c94:	460f      	mov	r7, r1
   b4c96:	4690      	mov	r8, r2
   b4c98:	461e      	mov	r6, r3
  if (i2c_dev) {
   b4c9a:	b110      	cbz	r0, b4ca2 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x16>
    delete i2c_dev; // remove old interface
   b4c9c:	2110      	movs	r1, #16
   b4c9e:	f7ff f9fe 	bl	b409e <_ZdlPvj>
  }

  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b4ca2:	2010      	movs	r0, #16
   b4ca4:	f7ff f9f7 	bl	b4096 <_Znwj>
   b4ca8:	4605      	mov	r5, r0
   b4caa:	b118      	cbz	r0, b4cb4 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x28>
   b4cac:	4642      	mov	r2, r8
   b4cae:	4639      	mov	r1, r7
   b4cb0:	f000 fcb0 	bl	b5614 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b4cb4:	60a5      	str	r5, [r4, #8]

  if (!i2c_dev->begin()) {
   b4cb6:	2101      	movs	r1, #1
   b4cb8:	4628      	mov	r0, r5
   b4cba:	f000 fcc7 	bl	b564c <_ZN18Adafruit_I2CDevice5beginEb>
   b4cbe:	b130      	cbz	r0, b4cce <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x42>
    return false;
  }

  return _init(sensor_id);
   b4cc0:	6823      	ldr	r3, [r4, #0]
   b4cc2:	4631      	mov	r1, r6
   b4cc4:	4620      	mov	r0, r4
   b4cc6:	681b      	ldr	r3, [r3, #0]
}
   b4cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return _init(sensor_id);
   b4ccc:	4718      	bx	r3
}
   b4cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4cd2 <_ZN15Adafruit_AS734111powerEnableEb>:
/**
 * @brief Sets the power state of the sensor
 *
 * @param enable_power true: on false: off
 */
void Adafruit_AS7341::powerEnable(bool enable_power) {
   b4cd2:	b570      	push	{r4, r5, r6, lr}
  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b4cd4:	2501      	movs	r5, #1
void Adafruit_AS7341::powerEnable(bool enable_power) {
   b4cd6:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b4cd8:	2600      	movs	r6, #0
   b4cda:	e9cd 6500 	strd	r6, r5, [sp]
void Adafruit_AS7341::powerEnable(bool enable_power) {
   b4cde:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b4ce0:	462b      	mov	r3, r5
   b4ce2:	6881      	ldr	r1, [r0, #8]
   b4ce4:	2280      	movs	r2, #128	; 0x80
   b4ce6:	a804      	add	r0, sp, #16
   b4ce8:	f000 fb92 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits pon_en =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 0);
   b4cec:	4633      	mov	r3, r6
   b4cee:	462a      	mov	r2, r5
   b4cf0:	a904      	add	r1, sp, #16
   b4cf2:	a802      	add	r0, sp, #8
   b4cf4:	f000 fc63 	bl	b55be <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  pon_en.write(enable_power);
   b4cf8:	4621      	mov	r1, r4
   b4cfa:	a802      	add	r0, sp, #8
   b4cfc:	f000 fc71 	bl	b55e2 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b4d00:	b00a      	add	sp, #40	; 0x28
   b4d02:	bd70      	pop	{r4, r5, r6, pc}

000b4d04 <_ZN15Adafruit_AS73415_initEl>:
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   b4d04:	b570      	push	{r4, r5, r6, lr}
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   b4d06:	2501      	movs	r5, #1
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   b4d08:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   b4d0a:	2400      	movs	r4, #0
   b4d0c:	e9cd 4500 	strd	r4, r5, [sp]
   b4d10:	462b      	mov	r3, r5
   b4d12:	6881      	ldr	r1, [r0, #8]
   b4d14:	2292      	movs	r2, #146	; 0x92
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   b4d16:	4606      	mov	r6, r0
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   b4d18:	a802      	add	r0, sp, #8
   b4d1a:	f000 fb79 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (chip_id.read() & 0xFC != AS7341_CHIP_ID << 2) {
   b4d1e:	a802      	add	r0, sp, #8
   b4d20:	f000 fc31 	bl	b5586 <_ZN23Adafruit_BusIO_Register4readEv>
   b4d24:	07c3      	lsls	r3, r0, #31
   b4d26:	d406      	bmi.n	b4d36 <_ZN15Adafruit_AS73415_initEl+0x32>
  powerEnable(true);
   b4d28:	4630      	mov	r0, r6
   b4d2a:	4629      	mov	r1, r5
   b4d2c:	f7ff ffd1 	bl	b4cd2 <_ZN15Adafruit_AS734111powerEnableEb>
  return true;
   b4d30:	4628      	mov	r0, r5
}
   b4d32:	b008      	add	sp, #32
   b4d34:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b4d36:	4620      	mov	r0, r4
   b4d38:	e7fb      	b.n	b4d32 <_ZN15Adafruit_AS73415_initEl+0x2e>

000b4d3a <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>:
 * @brief Enables measurement of spectral data
 *
 * @param enable_measurement true: enabled false: disabled
 * @return true: success false: failure
 */
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   b4d3a:	b510      	push	{r4, lr}

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b4d3c:	2301      	movs	r3, #1
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   b4d3e:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b4d40:	2200      	movs	r2, #0
   b4d42:	e9cd 2300 	strd	r2, r3, [sp]
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   b4d46:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b4d48:	2280      	movs	r2, #128	; 0x80
   b4d4a:	6881      	ldr	r1, [r0, #8]
   b4d4c:	a804      	add	r0, sp, #16
   b4d4e:	f000 fb5f 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  Adafruit_BusIO_RegisterBits spec_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 1);
   b4d52:	2301      	movs	r3, #1
   b4d54:	461a      	mov	r2, r3
   b4d56:	a904      	add	r1, sp, #16
   b4d58:	a802      	add	r0, sp, #8
   b4d5a:	f000 fc30 	bl	b55be <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  return spec_enable_bit.write(enable_measurement);
   b4d5e:	4621      	mov	r1, r4
   b4d60:	a802      	add	r0, sp, #8
   b4d62:	f000 fc3e 	bl	b55e2 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b4d66:	b00a      	add	sp, #40	; 0x28
   b4d68:	bd10      	pop	{r4, pc}

000b4d6a <_ZN15Adafruit_AS734110enableSMUXEv>:

bool Adafruit_AS7341::enableSMUX(void) {
   b4d6a:	b530      	push	{r4, r5, lr}

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b4d6c:	2501      	movs	r5, #1
bool Adafruit_AS7341::enableSMUX(void) {
   b4d6e:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b4d70:	2400      	movs	r4, #0
   b4d72:	e9cd 4500 	strd	r4, r5, [sp]
   b4d76:	462b      	mov	r3, r5
   b4d78:	6881      	ldr	r1, [r0, #8]
   b4d7a:	2280      	movs	r2, #128	; 0x80
   b4d7c:	a804      	add	r0, sp, #16
   b4d7e:	f000 fb47 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits smux_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 4);
   b4d82:	462a      	mov	r2, r5
   b4d84:	2304      	movs	r3, #4
   b4d86:	a904      	add	r1, sp, #16
   b4d88:	a802      	add	r0, sp, #8
   b4d8a:	f000 fc18 	bl	b55be <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  bool success = smux_enable_bit.write(true);
   b4d8e:	4629      	mov	r1, r5
   b4d90:	a802      	add	r0, sp, #8
   b4d92:	f000 fc26 	bl	b55e2 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
   b4d96:	4605      	mov	r5, r0

  int timeOut = 1000; // Arbitrary value, but if it takes 1000 milliseconds then
                      // something is wrong
  int count = 0;
  while (smux_enable_bit.read() && count < timeOut) {
   b4d98:	a802      	add	r0, sp, #8
   b4d9a:	f000 fc15 	bl	b55c8 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   b4d9e:	b138      	cbz	r0, b4db0 <_ZN15Adafruit_AS734110enableSMUXEv+0x46>
   b4da0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   b4da4:	d00b      	beq.n	b4dbe <_ZN15Adafruit_AS734110enableSMUXEv+0x54>
    delay(1);
   b4da6:	2001      	movs	r0, #1
   b4da8:	f002 fc06 	bl	b75b8 <delay>
    count++;
   b4dac:	3401      	adds	r4, #1
  while (smux_enable_bit.read() && count < timeOut) {
   b4dae:	e7f3      	b.n	b4d98 <_ZN15Adafruit_AS734110enableSMUXEv+0x2e>
  }
  if (count >= timeOut)
    return false;
   b4db0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   b4db4:	bf08      	it	eq
   b4db6:	2500      	moveq	r5, #0
  else
    return success;
}
   b4db8:	4628      	mov	r0, r5
   b4dba:	b00b      	add	sp, #44	; 0x2c
   b4dbc:	bd30      	pop	{r4, r5, pc}
    return false;
   b4dbe:	2500      	movs	r5, #0
   b4dc0:	e7fa      	b.n	b4db8 <_ZN15Adafruit_AS734110enableSMUXEv+0x4e>

000b4dc2 <_ZN15Adafruit_AS734114setSMUXCommandE17as7341_smux_cmd_t>:
      Adafruit_BusIO_RegisterBits(&gpio2_reg, 1, 1);

  return gpio_output_value_bit.write(gpio_high);
}

bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   b4dc2:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register cfg6_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   b4dc4:	2301      	movs	r3, #1
bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   b4dc6:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   b4dc8:	2200      	movs	r2, #0
   b4dca:	e9cd 2300 	strd	r2, r3, [sp]
bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   b4dce:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   b4dd0:	22af      	movs	r2, #175	; 0xaf
   b4dd2:	6881      	ldr	r1, [r0, #8]
   b4dd4:	a804      	add	r0, sp, #16
   b4dd6:	f000 fb1b 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits smux_command_bits =
      Adafruit_BusIO_RegisterBits(&cfg6_reg, 2, 3);
   b4dda:	2303      	movs	r3, #3
   b4ddc:	2202      	movs	r2, #2
   b4dde:	a904      	add	r1, sp, #16
   b4de0:	a802      	add	r0, sp, #8
   b4de2:	f000 fbec 	bl	b55be <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return smux_command_bits.write(command);
   b4de6:	4621      	mov	r1, r4
   b4de8:	a802      	add	r0, sp, #8
   b4dea:	f000 fbfa 	bl	b55e2 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b4dee:	b00a      	add	sp, #40	; 0x28
   b4df0:	bd10      	pop	{r4, pc}

000b4df2 <_ZN15Adafruit_AS734114getIsDataReadyEv>:
/**
 * @brief
 *
 * @return true: success false: failure
 */
bool Adafruit_AS7341::getIsDataReady() {
   b4df2:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register status2_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_STATUS2);
   b4df4:	2300      	movs	r3, #0
bool Adafruit_AS7341::getIsDataReady() {
   b4df6:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_STATUS2);
   b4df8:	2401      	movs	r4, #1
   b4dfa:	e9cd 3400 	strd	r3, r4, [sp]
   b4dfe:	22a3      	movs	r2, #163	; 0xa3
   b4e00:	6881      	ldr	r1, [r0, #8]
   b4e02:	4623      	mov	r3, r4
   b4e04:	a804      	add	r0, sp, #16
   b4e06:	f000 fb03 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits avalid_bit =
      Adafruit_BusIO_RegisterBits(&status2_reg, 1, 6);
   b4e0a:	2306      	movs	r3, #6
   b4e0c:	4622      	mov	r2, r4
   b4e0e:	a904      	add	r1, sp, #16
   b4e10:	a802      	add	r0, sp, #8
   b4e12:	f000 fbd4 	bl	b55be <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return avalid_bit.read();
   b4e16:	a802      	add	r0, sp, #8
   b4e18:	f000 fbd6 	bl	b55c8 <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
   b4e1c:	3800      	subs	r0, #0
   b4e1e:	bf18      	it	ne
   b4e20:	2001      	movne	r0, #1
   b4e22:	b00a      	add	sp, #40	; 0x28
   b4e24:	bd10      	pop	{r4, pc}

000b4e26 <_ZN15Adafruit_AS734112delayForDataEi.part.0>:
void Adafruit_AS7341::delayForData(int waitTime) {
   b4e26:	b510      	push	{r4, lr}
   b4e28:	4604      	mov	r4, r0
    while (!getIsDataReady()) {
   b4e2a:	4620      	mov	r0, r4
   b4e2c:	f7ff ffe1 	bl	b4df2 <_ZN15Adafruit_AS734114getIsDataReadyEv>
   b4e30:	b918      	cbnz	r0, b4e3a <_ZN15Adafruit_AS734112delayForDataEi.part.0+0x14>
      delay(1);
   b4e32:	2001      	movs	r0, #1
   b4e34:	f002 fbc0 	bl	b75b8 <delay>
    while (!getIsDataReady()) {
   b4e38:	e7f7      	b.n	b4e2a <_ZN15Adafruit_AS734112delayForDataEi.part.0+0x4>
}
   b4e3a:	bd10      	pop	{r4, pc}

000b4e3c <_ZN15Adafruit_AS73418setATIMEEh>:
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @param atime_value The integration time step count
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   b4e3c:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b4e3e:	2301      	movs	r3, #1
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   b4e40:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b4e42:	2500      	movs	r5, #0
   b4e44:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   b4e48:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b4e4a:	2281      	movs	r2, #129	; 0x81
   b4e4c:	6881      	ldr	r1, [r0, #8]
   b4e4e:	a802      	add	r0, sp, #8
   b4e50:	f000 fade 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.write(atime_value);
   b4e54:	462a      	mov	r2, r5
   b4e56:	4621      	mov	r1, r4
   b4e58:	a802      	add	r0, sp, #8
   b4e5a:	f000 fb34 	bl	b54c6 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b4e5e:	b009      	add	sp, #36	; 0x24
   b4e60:	bd30      	pop	{r4, r5, pc}

000b4e62 <_ZN15Adafruit_AS73418getATIMEEv>:
 *
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @return uint8_t The current integration time step count
 */
uint8_t Adafruit_AS7341::getATIME() {
   b4e62:	b500      	push	{lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b4e64:	2301      	movs	r3, #1
uint8_t Adafruit_AS7341::getATIME() {
   b4e66:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b4e68:	2200      	movs	r2, #0
   b4e6a:	e9cd 2300 	strd	r2, r3, [sp]
   b4e6e:	2281      	movs	r2, #129	; 0x81
   b4e70:	6881      	ldr	r1, [r0, #8]
   b4e72:	a802      	add	r0, sp, #8
   b4e74:	f000 facc 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.read();
   b4e78:	a802      	add	r0, sp, #8
   b4e7a:	f000 fb84 	bl	b5586 <_ZN23Adafruit_BusIO_Register4readEv>
}
   b4e7e:	b2c0      	uxtb	r0, r0
   b4e80:	b009      	add	sp, #36	; 0x24
   b4e82:	f85d fb04 	ldr.w	pc, [sp], #4

000b4e86 <_ZN15Adafruit_AS73418setASTEPEt>:
 *
 * @param astep_value Integration time step size in 2.78 microsecon increments
 * Step size is `(astep_value+1) * 2.78 uS`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   b4e86:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b4e88:	2301      	movs	r3, #1
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   b4e8a:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b4e8c:	2500      	movs	r5, #0
   b4e8e:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   b4e92:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b4e94:	2302      	movs	r3, #2
   b4e96:	6881      	ldr	r1, [r0, #8]
   b4e98:	22ca      	movs	r2, #202	; 0xca
   b4e9a:	a802      	add	r0, sp, #8
   b4e9c:	f000 fab8 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.write(astep_value);
   b4ea0:	462a      	mov	r2, r5
   b4ea2:	4621      	mov	r1, r4
   b4ea4:	a802      	add	r0, sp, #8
   b4ea6:	f000 fb0e 	bl	b54c6 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b4eaa:	b009      	add	sp, #36	; 0x24
   b4eac:	bd30      	pop	{r4, r5, pc}

000b4eae <_ZN15Adafruit_AS73418getASTEPEv>:
 *
 * Step size is `(astep_value+1) * 2.78 uS`
 *
 * @return uint16_t The current integration time step size
 */
uint16_t Adafruit_AS7341::getASTEP() {
   b4eae:	b500      	push	{lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b4eb0:	2300      	movs	r3, #0
uint16_t Adafruit_AS7341::getASTEP() {
   b4eb2:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b4eb4:	2201      	movs	r2, #1
   b4eb6:	e9cd 3200 	strd	r3, r2, [sp]
   b4eba:	2302      	movs	r3, #2
   b4ebc:	6881      	ldr	r1, [r0, #8]
   b4ebe:	22ca      	movs	r2, #202	; 0xca
   b4ec0:	a802      	add	r0, sp, #8
   b4ec2:	f000 faa5 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.read();
   b4ec6:	a802      	add	r0, sp, #8
   b4ec8:	f000 fb5d 	bl	b5586 <_ZN23Adafruit_BusIO_Register4readEv>
}
   b4ecc:	b280      	uxth	r0, r0
   b4ece:	b009      	add	sp, #36	; 0x24
   b4ed0:	f85d fb04 	ldr.w	pc, [sp], #4

000b4ed4 <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>:
 * @brief Sets the ADC gain multiplier
 *
 * @param gain_value The gain amount. must be an `as7341_gain_t`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   b4ed4:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b4ed6:	2301      	movs	r3, #1
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   b4ed8:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b4eda:	2500      	movs	r5, #0
   b4edc:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   b4ee0:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b4ee2:	22aa      	movs	r2, #170	; 0xaa
   b4ee4:	6881      	ldr	r1, [r0, #8]
   b4ee6:	a802      	add	r0, sp, #8
   b4ee8:	f000 fa92 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return cfg1_reg.write(gain_value);
   b4eec:	462a      	mov	r2, r5
   b4eee:	4621      	mov	r1, r4
   b4ef0:	a802      	add	r0, sp, #8
   b4ef2:	f000 fae8 	bl	b54c6 <_ZN23Adafruit_BusIO_Register5writeEmh>
  // AGAIN bitfield is only[0:4] but the rest is empty
}
   b4ef6:	b009      	add	sp, #36	; 0x24
   b4ef8:	bd30      	pop	{r4, r5, pc}

000b4efa <_ZN15Adafruit_AS73417getGainEv>:
/**
 * @brief Returns the ADC gain multiplier
 *
 * @return as7341_gain_t The current ADC gain multiplier
 */
as7341_gain_t Adafruit_AS7341::getGain() {
   b4efa:	b500      	push	{lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b4efc:	2301      	movs	r3, #1
as7341_gain_t Adafruit_AS7341::getGain() {
   b4efe:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b4f00:	2200      	movs	r2, #0
   b4f02:	e9cd 2300 	strd	r2, r3, [sp]
   b4f06:	22aa      	movs	r2, #170	; 0xaa
   b4f08:	6881      	ldr	r1, [r0, #8]
   b4f0a:	a802      	add	r0, sp, #8
   b4f0c:	f000 fa80 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (as7341_gain_t)cfg1_reg.read();
   b4f10:	a802      	add	r0, sp, #8
   b4f12:	f000 fb38 	bl	b5586 <_ZN23Adafruit_BusIO_Register4readEv>
}
   b4f16:	b2c0      	uxtb	r0, r0
   b4f18:	b009      	add	sp, #36	; 0x24
   b4f1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b4f20 <_ZN15Adafruit_AS734113toBasicCountsEt>:
 *
 * @param raw The raw ADC values to convert
 *
 * @return float The basic counts
 */
float Adafruit_AS7341::toBasicCounts(uint16_t raw) {
   b4f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4f22:	ed2d 8b02 	vpush	{d8}
   b4f26:	460d      	mov	r5, r1
   b4f28:	4604      	mov	r4, r0
  float gain_val = 0;
  as7341_gain_t gain = getGain();
   b4f2a:	f7ff ffe6 	bl	b4efa <_ZN15Adafruit_AS73417getGainEv>
  switch (gain) {
   b4f2e:	280a      	cmp	r0, #10
   b4f30:	bf97      	itett	ls
   b4f32:	4b1f      	ldrls	r3, [pc, #124]	; (b4fb0 <_ZN15Adafruit_AS734113toBasicCountsEt+0x90>)
  as7341_gain_t gain = getGain();
   b4f34:	eddf 8a1f 	vldrhi	s17, [pc, #124]	; b4fb4 <_ZN15Adafruit_AS734113toBasicCountsEt+0x94>
   b4f38:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   b4f3c:	edd0 8a00 	vldrls	s17, [r0]
    break;
  case AS7341_GAIN_512X:
    gain_val = 512;
    break;
  }
  return raw / (gain_val * (getATIME() + 1) * (getASTEP() + 1) * 2.78 / 1000);
   b4f40:	4620      	mov	r0, r4
   b4f42:	f7ff ff8e 	bl	b4e62 <_ZN15Adafruit_AS73418getATIMEEv>
   b4f46:	1c43      	adds	r3, r0, #1
   b4f48:	4620      	mov	r0, r4
   b4f4a:	ee08 3a10 	vmov	s16, r3
   b4f4e:	f7ff ffae 	bl	b4eae <_ZN15Adafruit_AS73418getASTEPEv>
   b4f52:	4604      	mov	r4, r0
   b4f54:	3401      	adds	r4, #1
   b4f56:	4628      	mov	r0, r5
   b4f58:	f003 fb6a 	bl	b8630 <__aeabi_i2d>
   b4f5c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   b4f60:	ee07 4a90 	vmov	s15, r4
   b4f64:	ee28 8a28 	vmul.f32	s16, s16, s17
   b4f68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4f6c:	4606      	mov	r6, r0
   b4f6e:	ee67 7a88 	vmul.f32	s15, s15, s16
   b4f72:	460f      	mov	r7, r1
   b4f74:	ee17 0a90 	vmov	r0, s15
   b4f78:	f003 fb6c 	bl	b8654 <__aeabi_f2d>
   b4f7c:	a30a      	add	r3, pc, #40	; (adr r3, b4fa8 <_ZN15Adafruit_AS734113toBasicCountsEt+0x88>)
   b4f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4f82:	f003 fbbf 	bl	b8704 <__aeabi_dmul>
   b4f86:	4b0c      	ldr	r3, [pc, #48]	; (b4fb8 <_ZN15Adafruit_AS734113toBasicCountsEt+0x98>)
   b4f88:	2200      	movs	r2, #0
   b4f8a:	f003 fce5 	bl	b8958 <__aeabi_ddiv>
   b4f8e:	4602      	mov	r2, r0
   b4f90:	460b      	mov	r3, r1
   b4f92:	4630      	mov	r0, r6
   b4f94:	4639      	mov	r1, r7
   b4f96:	f003 fcdf 	bl	b8958 <__aeabi_ddiv>
   b4f9a:	f003 feab 	bl	b8cf4 <__aeabi_d2f>
}
   b4f9e:	ecbd 8b02 	vpop	{d8}
   b4fa2:	ee00 0a10 	vmov	s0, r0
   b4fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b4fa8:	a3d70a3d 	.word	0xa3d70a3d
   b4fac:	40063d70 	.word	0x40063d70
   b4fb0:	000b9270 	.word	0x000b9270
   b4fb4:	00000000 	.word	0x00000000
   b4fb8:	408f4000 	.word	0x408f4000

000b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>:
 * @brief Write a byte to the given register
 *
 * @param addr Register address
 * @param val The value to set the register to
 */
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   b4fbc:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   b4fbe:	2301      	movs	r3, #1
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   b4fc0:	b089      	sub	sp, #36	; 0x24
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   b4fc2:	2500      	movs	r5, #0
   b4fc4:	e9cd 5300 	strd	r5, r3, [sp]
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   b4fc8:	4614      	mov	r4, r2
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   b4fca:	460a      	mov	r2, r1
   b4fcc:	6881      	ldr	r1, [r0, #8]
   b4fce:	a802      	add	r0, sp, #8
   b4fd0:	f000 fa1e 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  reg.write(val);
   b4fd4:	462a      	mov	r2, r5
   b4fd6:	4621      	mov	r1, r4
   b4fd8:	a802      	add	r0, sp, #8
   b4fda:	f000 fa74 	bl	b54c6 <_ZN23Adafruit_BusIO_Register5writeEmh>
   b4fde:	b009      	add	sp, #36	; 0x24
   b4fe0:	bd30      	pop	{r4, r5, pc}

000b4fe2 <_ZN15Adafruit_AS734120setup_F1F4_Clear_NIREv>:
void Adafruit_AS7341::setup_F1F4_Clear_NIR() {
   b4fe2:	b510      	push	{r4, lr}
  writeRegister(byte(0x00), byte(0x30)); // F3 left set to ADC2
   b4fe4:	2230      	movs	r2, #48	; 0x30
   b4fe6:	2100      	movs	r1, #0
void Adafruit_AS7341::setup_F1F4_Clear_NIR() {
   b4fe8:	4604      	mov	r4, r0
  writeRegister(byte(0x00), byte(0x30)); // F3 left set to ADC2
   b4fea:	f7ff ffe7 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x01), byte(0x01)); // F1 left set to ADC0
   b4fee:	2201      	movs	r2, #1
   b4ff0:	4611      	mov	r1, r2
   b4ff2:	4620      	mov	r0, r4
   b4ff4:	f7ff ffe2 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x02), byte(0x00)); // Reserved or disabled
   b4ff8:	4620      	mov	r0, r4
   b4ffa:	2200      	movs	r2, #0
   b4ffc:	2102      	movs	r1, #2
   b4ffe:	f7ff ffdd 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x03), byte(0x00)); // F8 left disabled
   b5002:	4620      	mov	r0, r4
   b5004:	2200      	movs	r2, #0
   b5006:	2103      	movs	r1, #3
   b5008:	f7ff ffd8 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x04), byte(0x00)); // F6 left disabled
   b500c:	4620      	mov	r0, r4
   b500e:	2200      	movs	r2, #0
   b5010:	2104      	movs	r1, #4
   b5012:	f7ff ffd3 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(
   b5016:	4620      	mov	r0, r4
   b5018:	2242      	movs	r2, #66	; 0x42
   b501a:	2105      	movs	r1, #5
   b501c:	f7ff ffce 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x06), byte(0x00)); // F5 left disbled
   b5020:	4620      	mov	r0, r4
   b5022:	2200      	movs	r2, #0
   b5024:	2106      	movs	r1, #6
   b5026:	f7ff ffc9 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x07), byte(0x00)); // F7 left disbled
   b502a:	4620      	mov	r0, r4
   b502c:	2200      	movs	r2, #0
   b502e:	2107      	movs	r1, #7
   b5030:	f7ff ffc4 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x08), byte(0x50)); // CLEAR connected to ADC4
   b5034:	4620      	mov	r0, r4
   b5036:	2250      	movs	r2, #80	; 0x50
   b5038:	2108      	movs	r1, #8
   b503a:	f7ff ffbf 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x09), byte(0x00)); // F5 right disabled
   b503e:	4620      	mov	r0, r4
   b5040:	2200      	movs	r2, #0
   b5042:	2109      	movs	r1, #9
   b5044:	f7ff ffba 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0A), byte(0x00)); // F7 right disabled
   b5048:	4620      	mov	r0, r4
   b504a:	2200      	movs	r2, #0
   b504c:	210a      	movs	r1, #10
   b504e:	f7ff ffb5 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0B), byte(0x00)); // Reserved or disabled
   b5052:	4620      	mov	r0, r4
   b5054:	2200      	movs	r2, #0
   b5056:	210b      	movs	r1, #11
   b5058:	f7ff ffb0 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0C), byte(0x20)); // F2 right connected to ADC1
   b505c:	4620      	mov	r0, r4
   b505e:	2220      	movs	r2, #32
   b5060:	210c      	movs	r1, #12
   b5062:	f7ff ffab 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0D), byte(0x04)); // F4 right connected to ADC3
   b5066:	4620      	mov	r0, r4
   b5068:	2204      	movs	r2, #4
   b506a:	210d      	movs	r1, #13
   b506c:	f7ff ffa6 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0E), byte(0x00)); // F6/F8 right disabled
   b5070:	4620      	mov	r0, r4
   b5072:	2200      	movs	r2, #0
   b5074:	210e      	movs	r1, #14
   b5076:	f7ff ffa1 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0F), byte(0x30)); // F3 right connected to AD2
   b507a:	4620      	mov	r0, r4
   b507c:	2230      	movs	r2, #48	; 0x30
   b507e:	210f      	movs	r1, #15
   b5080:	f7ff ff9c 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x10), byte(0x01)); // F1 right connected to AD0
   b5084:	4620      	mov	r0, r4
   b5086:	2201      	movs	r2, #1
   b5088:	2110      	movs	r1, #16
   b508a:	f7ff ff97 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x11), byte(0x50)); // CLEAR right connected to AD4
   b508e:	4620      	mov	r0, r4
   b5090:	2250      	movs	r2, #80	; 0x50
   b5092:	2111      	movs	r1, #17
   b5094:	f7ff ff92 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x12), byte(0x00)); // Reserved or disabled
   b5098:	4620      	mov	r0, r4
   b509a:	2200      	movs	r2, #0
   b509c:	2112      	movs	r1, #18
   b509e:	f7ff ff8d 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   b50a2:	4620      	mov	r0, r4
   b50a4:	2206      	movs	r2, #6
}
   b50a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   b50aa:	2113      	movs	r1, #19
   b50ac:	f7ff bf86 	b.w	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>

000b50b0 <_ZN15Adafruit_AS734120setup_F5F8_Clear_NIREv>:
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   b50b0:	2200      	movs	r2, #0
void Adafruit_AS7341::setup_F5F8_Clear_NIR() {
   b50b2:	b510      	push	{r4, lr}
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   b50b4:	4611      	mov	r1, r2
void Adafruit_AS7341::setup_F5F8_Clear_NIR() {
   b50b6:	4604      	mov	r4, r0
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   b50b8:	f7ff ff80 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x01), byte(0x00)); // F1 left disable
   b50bc:	4620      	mov	r0, r4
   b50be:	2200      	movs	r2, #0
   b50c0:	2101      	movs	r1, #1
   b50c2:	f7ff ff7b 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x02), byte(0x00)); // reserved/disable
   b50c6:	4620      	mov	r0, r4
   b50c8:	2200      	movs	r2, #0
   b50ca:	2102      	movs	r1, #2
   b50cc:	f7ff ff76 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x03), byte(0x40)); // F8 left connected to ADC3
   b50d0:	4620      	mov	r0, r4
   b50d2:	2240      	movs	r2, #64	; 0x40
   b50d4:	2103      	movs	r1, #3
   b50d6:	f7ff ff71 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x04), byte(0x02)); // F6 left connected to ADC1
   b50da:	4620      	mov	r0, r4
   b50dc:	2202      	movs	r2, #2
   b50de:	2104      	movs	r1, #4
   b50e0:	f7ff ff6c 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x05), byte(0x00)); // F4/ F2 disabled
   b50e4:	4620      	mov	r0, r4
   b50e6:	2200      	movs	r2, #0
   b50e8:	2105      	movs	r1, #5
   b50ea:	f7ff ff67 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x06), byte(0x10)); // F5 left connected to ADC0
   b50ee:	4620      	mov	r0, r4
   b50f0:	2210      	movs	r2, #16
   b50f2:	2106      	movs	r1, #6
   b50f4:	f7ff ff62 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x07), byte(0x03)); // F7 left connected to ADC2
   b50f8:	4620      	mov	r0, r4
   b50fa:	2203      	movs	r2, #3
   b50fc:	2107      	movs	r1, #7
   b50fe:	f7ff ff5d 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x08), byte(0x50)); // CLEAR Connected to ADC4
   b5102:	4620      	mov	r0, r4
   b5104:	2250      	movs	r2, #80	; 0x50
   b5106:	2108      	movs	r1, #8
   b5108:	f7ff ff58 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x09), byte(0x10)); // F5 right connected to ADC0
   b510c:	4620      	mov	r0, r4
   b510e:	2210      	movs	r2, #16
   b5110:	2109      	movs	r1, #9
   b5112:	f7ff ff53 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0A), byte(0x03)); // F7 right connected to ADC2
   b5116:	4620      	mov	r0, r4
   b5118:	2203      	movs	r2, #3
   b511a:	210a      	movs	r1, #10
   b511c:	f7ff ff4e 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0B), byte(0x00)); // Reserved or disabled
   b5120:	4620      	mov	r0, r4
   b5122:	2200      	movs	r2, #0
   b5124:	210b      	movs	r1, #11
   b5126:	f7ff ff49 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0C), byte(0x00)); // F2 right disabled
   b512a:	4620      	mov	r0, r4
   b512c:	2200      	movs	r2, #0
   b512e:	210c      	movs	r1, #12
   b5130:	f7ff ff44 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0D), byte(0x00)); // F4 right disabled
   b5134:	4620      	mov	r0, r4
   b5136:	2200      	movs	r2, #0
   b5138:	210d      	movs	r1, #13
   b513a:	f7ff ff3f 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(
   b513e:	4620      	mov	r0, r4
   b5140:	2224      	movs	r2, #36	; 0x24
   b5142:	210e      	movs	r1, #14
   b5144:	f7ff ff3a 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0F), byte(0x00)); // F3 right disabled
   b5148:	4620      	mov	r0, r4
   b514a:	2200      	movs	r2, #0
   b514c:	210f      	movs	r1, #15
   b514e:	f7ff ff35 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x10), byte(0x00)); // F1 right disabled
   b5152:	4620      	mov	r0, r4
   b5154:	2200      	movs	r2, #0
   b5156:	2110      	movs	r1, #16
   b5158:	f7ff ff30 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x11), byte(0x50)); // CLEAR right connected to AD4
   b515c:	4620      	mov	r0, r4
   b515e:	2250      	movs	r2, #80	; 0x50
   b5160:	2111      	movs	r1, #17
   b5162:	f7ff ff2b 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x12), byte(0x00)); // Reserved or disabled
   b5166:	4620      	mov	r0, r4
   b5168:	2200      	movs	r2, #0
   b516a:	2112      	movs	r1, #18
   b516c:	f7ff ff26 	bl	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   b5170:	4620      	mov	r0, r4
   b5172:	2206      	movs	r2, #6
}
   b5174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   b5178:	2113      	movs	r1, #19
   b517a:	f7ff bf1f 	b.w	b4fbc <_ZN15Adafruit_AS734113writeRegisterEhh>

000b517e <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>:
void Adafruit_AS7341::setSMUXLowChannels(bool f1_f4) {
   b517e:	b538      	push	{r3, r4, r5, lr}
   b5180:	4604      	mov	r4, r0
   b5182:	460d      	mov	r5, r1
  enableSpectralMeasurement(false);
   b5184:	2100      	movs	r1, #0
   b5186:	f7ff fdd8 	bl	b4d3a <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
  setSMUXCommand(AS7341_SMUX_CMD_WRITE);
   b518a:	2102      	movs	r1, #2
   b518c:	4620      	mov	r0, r4
   b518e:	f7ff fe18 	bl	b4dc2 <_ZN15Adafruit_AS734114setSMUXCommandE17as7341_smux_cmd_t>
    setup_F1F4_Clear_NIR();
   b5192:	4620      	mov	r0, r4
  if (f1_f4) {
   b5194:	b135      	cbz	r5, b51a4 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb+0x26>
    setup_F1F4_Clear_NIR();
   b5196:	f7ff ff24 	bl	b4fe2 <_ZN15Adafruit_AS734120setup_F1F4_Clear_NIREv>
  enableSMUX();
   b519a:	4620      	mov	r0, r4
}
   b519c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  enableSMUX();
   b51a0:	f7ff bde3 	b.w	b4d6a <_ZN15Adafruit_AS734110enableSMUXEv>
    setup_F5F8_Clear_NIR();
   b51a4:	f7ff ff84 	bl	b50b0 <_ZN15Adafruit_AS734120setup_F5F8_Clear_NIREv>
   b51a8:	e7f7      	b.n	b519a <_ZN15Adafruit_AS734118setSMUXLowChannelsEb+0x1c>

000b51aa <_ZN15Adafruit_AS734115readAllChannelsEPt>:
bool Adafruit_AS7341::readAllChannels(uint16_t *readings_buffer) {
   b51aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b51ae:	4604      	mov	r4, r0
   b51b0:	b088      	sub	sp, #32
   b51b2:	460e      	mov	r6, r1
  setSMUXLowChannels(true);        // Configure SMUX to read low channels
   b51b4:	2101      	movs	r1, #1
   b51b6:	f7ff ffe2 	bl	b517e <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>
  enableSpectralMeasurement(true); // Start integration
   b51ba:	2101      	movs	r1, #1
   b51bc:	4620      	mov	r0, r4
   b51be:	f7ff fdbc 	bl	b4d3a <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
      Adafruit_BusIO_Register(i2c_dev, AS7341_CH0_DATA_L, 2);
   b51c2:	f04f 0800 	mov.w	r8, #0
   b51c6:	4620      	mov	r0, r4
   b51c8:	2701      	movs	r7, #1
   b51ca:	f7ff fe2c 	bl	b4e26 <_ZN15Adafruit_AS734112delayForDataEi.part.0>
   b51ce:	2302      	movs	r3, #2
   b51d0:	68a1      	ldr	r1, [r4, #8]
   b51d2:	2295      	movs	r2, #149	; 0x95
   b51d4:	e9cd 8700 	strd	r8, r7, [sp]
   b51d8:	a802      	add	r0, sp, #8
   b51da:	f000 f919 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);
   b51de:	220c      	movs	r2, #12
   b51e0:	4631      	mov	r1, r6
   b51e2:	a802      	add	r0, sp, #8
   b51e4:	f000 f98d 	bl	b5502 <_ZN23Adafruit_BusIO_Register4readEPhh>
  setSMUXLowChannels(false);       // Configure SMUX to read high channels
   b51e8:	4641      	mov	r1, r8
  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);
   b51ea:	4605      	mov	r5, r0
  setSMUXLowChannels(false);       // Configure SMUX to read high channels
   b51ec:	4620      	mov	r0, r4
   b51ee:	f7ff ffc6 	bl	b517e <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>
  enableSpectralMeasurement(true); // Start integration
   b51f2:	4639      	mov	r1, r7
   b51f4:	4620      	mov	r0, r4
   b51f6:	f7ff fda0 	bl	b4d3a <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
  if (waitTime == 0) // Wait forever
   b51fa:	4620      	mov	r0, r4
   b51fc:	f7ff fe13 	bl	b4e26 <_ZN15Adafruit_AS734112delayForDataEi.part.0>
  return low_success &&
   b5200:	b12d      	cbz	r5, b520e <_ZN15Adafruit_AS734115readAllChannelsEPt+0x64>
         channel_data_reg.read((uint8_t *)&readings_buffer[6], 12);
   b5202:	220c      	movs	r2, #12
   b5204:	18b1      	adds	r1, r6, r2
   b5206:	a802      	add	r0, sp, #8
   b5208:	f000 f97b 	bl	b5502 <_ZN23Adafruit_BusIO_Register4readEPhh>
   b520c:	4605      	mov	r5, r0
}
   b520e:	4628      	mov	r0, r5
   b5210:	b008      	add	sp, #32
   b5212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b5216 <_ZN15Adafruit_AW9523C1Ev>:
#include "Adafruit_AW9523.h"

/*!
 *    @brief  Instantiates a new AW9523 class
 */
Adafruit_AW9523::Adafruit_AW9523(void) {}
   b5216:	2200      	movs	r2, #0
   b5218:	6002      	str	r2, [r0, #0]
   b521a:	4770      	bx	lr

000b521c <_ZN15Adafruit_AW95235resetEv>:

/*!
 *    @brief  Perform a soft reset over I2C
 *    @return True I2C reset command was acknowledged
 */
bool Adafruit_AW9523::reset(void) {
   b521c:	b510      	push	{r4, lr}
  Adafruit_I2CRegister resetreg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_SOFTRESET);
   b521e:	2301      	movs	r3, #1
bool Adafruit_AW9523::reset(void) {
   b5220:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_SOFTRESET);
   b5222:	2400      	movs	r4, #0
   b5224:	e9cd 4300 	strd	r4, r3, [sp]
   b5228:	227f      	movs	r2, #127	; 0x7f
   b522a:	6801      	ldr	r1, [r0, #0]
   b522c:	a802      	add	r0, sp, #8
   b522e:	f000 f8ef 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return resetreg.write(0);
   b5232:	4622      	mov	r2, r4
   b5234:	4621      	mov	r1, r4
   b5236:	a802      	add	r0, sp, #8
   b5238:	f000 f945 	bl	b54c6 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b523c:	b008      	add	sp, #32
   b523e:	bd10      	pop	{r4, pc}

000b5240 <_ZN15Adafruit_AW952319interruptEnableGPIOEt>:
/*!
 *    @brief  Sets interrupt watch for all 16 GPIO, 1 == enabled
 *    @param  pins 16-bits of pins we may want INT enabled
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   b5240:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister int0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   b5242:	2301      	movs	r3, #1
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   b5244:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   b5246:	2500      	movs	r5, #0
   b5248:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   b524c:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   b524e:	2302      	movs	r3, #2
   b5250:	6801      	ldr	r1, [r0, #0]
   b5252:	2206      	movs	r2, #6
   b5254:	a802      	add	r0, sp, #8
   b5256:	f000 f8db 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (!int0reg.write(~pins)) {
   b525a:	462a      	mov	r2, r5
   b525c:	43e1      	mvns	r1, r4
   b525e:	a802      	add	r0, sp, #8
   b5260:	f000 f931 	bl	b54c6 <_ZN23Adafruit_BusIO_Register5writeEmh>
    return false;
  }
  return true;
}
   b5264:	b009      	add	sp, #36	; 0x24
   b5266:	bd30      	pop	{r4, r5, pc}

000b5268 <_ZN15Adafruit_AW952318configureDirectionEt>:
/*!
 *    @brief  Sets direction for all 16 GPIO, 1 == output, 0 == input
 *    @param  pins 16-bits of pins we want to set direction
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   b5268:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister conf0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b526a:	2301      	movs	r3, #1
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   b526c:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b526e:	2500      	movs	r5, #0
   b5270:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   b5274:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b5276:	2302      	movs	r3, #2
   b5278:	6801      	ldr	r1, [r0, #0]
   b527a:	2204      	movs	r2, #4
   b527c:	a802      	add	r0, sp, #8
   b527e:	f000 f8c7 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (!conf0reg.write(~pins)) {
   b5282:	462a      	mov	r2, r5
   b5284:	43e1      	mvns	r1, r4
   b5286:	a802      	add	r0, sp, #8
   b5288:	f000 f91d 	bl	b54c6 <_ZN23Adafruit_BusIO_Register5writeEmh>
    return false;
  }

  return true;
}
   b528c:	b009      	add	sp, #36	; 0x24
   b528e:	bd30      	pop	{r4, r5, pc}

000b5290 <_ZN15Adafruit_AW952311analogWriteEhh>:
/*!
 *    @brief  Sets constant-current setting for one pin
 *    @param  pin GPIO to set, from 0 to 15 inclusive
 *    @param  val Ratio to set, from 0 (off) to 255 (max current)
 */
void Adafruit_AW9523::analogWrite(uint8_t pin, uint8_t val) {
   b5290:	b530      	push	{r4, r5, lr}
  uint8_t reg;

  // See Table 13. 256 step dimming control register
  if ((pin >= 0) && (pin <= 7)) {
   b5292:	2907      	cmp	r1, #7
void Adafruit_AW9523::analogWrite(uint8_t pin, uint8_t val) {
   b5294:	4614      	mov	r4, r2
   b5296:	b089      	sub	sp, #36	; 0x24
   b5298:	f04f 0200 	mov.w	r2, #0
  if ((pin >= 0) && (pin <= 7)) {
   b529c:	d811      	bhi.n	b52c2 <_ZN15Adafruit_AW952311analogWriteEhh+0x32>
    reg = 0x24 + pin;
   b529e:	f101 0324 	add.w	r3, r1, #36	; 0x24
  }
  if ((pin >= 8) && (pin <= 11)) {
    reg = 0x20 + pin - 8;
  }
  if ((pin >= 12) && (pin <= 15)) {
    reg = 0x2C + pin - 12;
   b52a2:	b2da      	uxtb	r2, r3
  }

  Adafruit_I2CRegister ledCCreg = Adafruit_I2CRegister(i2c_dev, reg);
   b52a4:	2301      	movs	r3, #1
   b52a6:	2500      	movs	r5, #0
   b52a8:	e9cd 5300 	strd	r5, r3, [sp]
   b52ac:	6801      	ldr	r1, [r0, #0]
   b52ae:	a802      	add	r0, sp, #8
   b52b0:	f000 f8ae 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  ledCCreg.write(val);
   b52b4:	462a      	mov	r2, r5
   b52b6:	4621      	mov	r1, r4
   b52b8:	a802      	add	r0, sp, #8
   b52ba:	f000 f904 	bl	b54c6 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b52be:	b009      	add	sp, #36	; 0x24
   b52c0:	bd30      	pop	{r4, r5, pc}
  if ((pin >= 8) && (pin <= 11)) {
   b52c2:	f1a1 0308 	sub.w	r3, r1, #8
   b52c6:	2b03      	cmp	r3, #3
   b52c8:	d802      	bhi.n	b52d0 <_ZN15Adafruit_AW952311analogWriteEhh+0x40>
    reg = 0x20 + pin - 8;
   b52ca:	f101 0318 	add.w	r3, r1, #24
   b52ce:	e7e8      	b.n	b52a2 <_ZN15Adafruit_AW952311analogWriteEhh+0x12>
  if ((pin >= 12) && (pin <= 15)) {
   b52d0:	f1a1 030c 	sub.w	r3, r1, #12
   b52d4:	2b03      	cmp	r3, #3
   b52d6:	d8e5      	bhi.n	b52a4 <_ZN15Adafruit_AW952311analogWriteEhh+0x14>
    reg = 0x2C + pin - 12;
   b52d8:	f101 0320 	add.w	r3, r1, #32
   b52dc:	e7e1      	b.n	b52a2 <_ZN15Adafruit_AW952311analogWriteEhh+0x12>

000b52de <_ZN15Adafruit_AW95237pinModeEhh>:
 *    @brief  Sets pin mode / direction for one pin
 *    @param  pin GPIO to set, from 0 to 15 inclusive
 *    @param  mode Can be INPUT, OUTPUT for GPIO digital, or AW9523_LED_MODE for
 * constant current LED drive
 */
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   b52de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // GPIO Direction
  Adafruit_I2CRegister conf0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b52e2:	2401      	movs	r4, #1
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   b52e4:	b092      	sub	sp, #72	; 0x48
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b52e6:	2600      	movs	r6, #0
   b52e8:	e9cd 6400 	strd	r6, r4, [sp]
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   b52ec:	460f      	mov	r7, r1
   b52ee:	4680      	mov	r8, r0
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b52f0:	6801      	ldr	r1, [r0, #0]
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   b52f2:	4615      	mov	r5, r2
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b52f4:	2302      	movs	r3, #2
   b52f6:	2204      	movs	r2, #4
   b52f8:	a806      	add	r0, sp, #24
   b52fa:	f000 f889 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits confbit =
      Adafruit_I2CRegisterBits(&conf0reg, 1, pin); // # bits, bit_shift
   b52fe:	463b      	mov	r3, r7
   b5300:	4622      	mov	r2, r4
   b5302:	a906      	add	r1, sp, #24
   b5304:	a802      	add	r0, sp, #8
   b5306:	f000 f95a 	bl	b55be <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  // GPIO mode or LED mode?
  Adafruit_I2CRegister ledmodereg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_LEDMODE, 2, LSBFIRST);
   b530a:	f8d8 1000 	ldr.w	r1, [r8]
   b530e:	2302      	movs	r3, #2
   b5310:	2212      	movs	r2, #18
   b5312:	e9cd 6400 	strd	r6, r4, [sp]
   b5316:	a80c      	add	r0, sp, #48	; 0x30
   b5318:	f000 f87a 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits modebit =
      Adafruit_I2CRegisterBits(&ledmodereg, 1, pin); // # bits, bit_shift
   b531c:	463b      	mov	r3, r7
   b531e:	4622      	mov	r2, r4
   b5320:	a90c      	add	r1, sp, #48	; 0x30
   b5322:	a804      	add	r0, sp, #16
   b5324:	f000 f94b 	bl	b55be <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  if (mode == OUTPUT) {
   b5328:	42a5      	cmp	r5, r4
   b532a:	d10a      	bne.n	b5342 <_ZN15Adafruit_AW95237pinModeEhh+0x64>
    confbit.write(0);
   b532c:	4631      	mov	r1, r6
   b532e:	a802      	add	r0, sp, #8
   b5330:	f000 f957 	bl	b55e2 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(1);
   b5334:	4629      	mov	r1, r5
    modebit.write(1);
  }

  if (mode == AW9523_LED_MODE) {
    confbit.write(0);
    modebit.write(0);
   b5336:	a804      	add	r0, sp, #16
   b5338:	f000 f953 	bl	b55e2 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  }
}
   b533c:	b012      	add	sp, #72	; 0x48
   b533e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (mode == INPUT) {
   b5342:	b13d      	cbz	r5, b5354 <_ZN15Adafruit_AW95237pinModeEhh+0x76>
  if (mode == AW9523_LED_MODE) {
   b5344:	2d03      	cmp	r5, #3
   b5346:	d1f9      	bne.n	b533c <_ZN15Adafruit_AW95237pinModeEhh+0x5e>
    confbit.write(0);
   b5348:	4631      	mov	r1, r6
   b534a:	a802      	add	r0, sp, #8
   b534c:	f000 f949 	bl	b55e2 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(0);
   b5350:	4631      	mov	r1, r6
   b5352:	e7f0      	b.n	b5336 <_ZN15Adafruit_AW95237pinModeEhh+0x58>
    confbit.write(1);
   b5354:	4621      	mov	r1, r4
   b5356:	a802      	add	r0, sp, #8
   b5358:	f000 f943 	bl	b55e2 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(1);
   b535c:	4621      	mov	r1, r4
   b535e:	e7ea      	b.n	b5336 <_ZN15Adafruit_AW95237pinModeEhh+0x58>

000b5360 <_ZN15Adafruit_AW952314openDrainPort0Eb>:
/*!
 *    @brief  Turns on/off open drain output for ALL port 0 pins (GPIO 0-7)
 *    @param  od True to enable open drain, False for push-pull
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::openDrainPort0(bool od) {
   b5360:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister gcrreg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   b5362:	2300      	movs	r3, #0
bool Adafruit_AW9523::openDrainPort0(bool od) {
   b5364:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   b5366:	2501      	movs	r5, #1
   b5368:	e9cd 3500 	strd	r3, r5, [sp]
bool Adafruit_AW9523::openDrainPort0(bool od) {
   b536c:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   b536e:	462b      	mov	r3, r5
   b5370:	6801      	ldr	r1, [r0, #0]
   b5372:	2211      	movs	r2, #17
   b5374:	a804      	add	r0, sp, #16
   b5376:	f000 f84b 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  Adafruit_I2CRegisterBits opendrain =
      Adafruit_I2CRegisterBits(&gcrreg, 1, 4); // # bits, bit_shift
   b537a:	2304      	movs	r3, #4
   b537c:	462a      	mov	r2, r5
   b537e:	a904      	add	r1, sp, #16
   b5380:	a802      	add	r0, sp, #8
   b5382:	f000 f91c 	bl	b55be <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return opendrain.write(!od);
   b5386:	ea84 0105 	eor.w	r1, r4, r5
   b538a:	a802      	add	r0, sp, #8
   b538c:	f000 f929 	bl	b55e2 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b5390:	b00b      	add	sp, #44	; 0x2c
   b5392:	bd30      	pop	{r4, r5, pc}

000b5394 <_ZN15Adafruit_AW95235beginEhP7TwoWire>:
bool Adafruit_AW9523::begin(uint8_t addr, TwoWire *wire) {
   b5394:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5396:	4604      	mov	r4, r0
  if (i2c_dev) {
   b5398:	6800      	ldr	r0, [r0, #0]
bool Adafruit_AW9523::begin(uint8_t addr, TwoWire *wire) {
   b539a:	b089      	sub	sp, #36	; 0x24
   b539c:	460e      	mov	r6, r1
   b539e:	4617      	mov	r7, r2
  if (i2c_dev) {
   b53a0:	b110      	cbz	r0, b53a8 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x14>
    delete i2c_dev; // remove old interface
   b53a2:	2110      	movs	r1, #16
   b53a4:	f7fe fe7b 	bl	b409e <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, wire);
   b53a8:	2010      	movs	r0, #16
   b53aa:	f7fe fe74 	bl	b4096 <_Znwj>
   b53ae:	4605      	mov	r5, r0
   b53b0:	b118      	cbz	r0, b53ba <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x26>
   b53b2:	463a      	mov	r2, r7
   b53b4:	4631      	mov	r1, r6
   b53b6:	f000 f92d 	bl	b5614 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b53ba:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   b53bc:	2101      	movs	r1, #1
   b53be:	4628      	mov	r0, r5
   b53c0:	f000 f944 	bl	b564c <_ZN18Adafruit_I2CDevice5beginEb>
   b53c4:	b918      	cbnz	r0, b53ce <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x3a>
    return false;
   b53c6:	2500      	movs	r5, #0
}
   b53c8:	4628      	mov	r0, r5
   b53ca:	b009      	add	sp, #36	; 0x24
   b53cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!reset()) {
   b53ce:	4620      	mov	r0, r4
   b53d0:	f7ff ff24 	bl	b521c <_ZN15Adafruit_AW95235resetEv>
   b53d4:	4605      	mov	r5, r0
   b53d6:	2800      	cmp	r0, #0
   b53d8:	d0f5      	beq.n	b53c6 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x32>
  Adafruit_I2CRegister idreg = Adafruit_I2CRegister(i2c_dev, AW9523_REG_CHIPID);
   b53da:	2301      	movs	r3, #1
   b53dc:	2600      	movs	r6, #0
   b53de:	e9cd 6300 	strd	r6, r3, [sp]
   b53e2:	6821      	ldr	r1, [r4, #0]
   b53e4:	2210      	movs	r2, #16
   b53e6:	a802      	add	r0, sp, #8
   b53e8:	f000 f812 	bl	b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (idreg.read() != 0x23) {
   b53ec:	a802      	add	r0, sp, #8
   b53ee:	f000 f8ca 	bl	b5586 <_ZN23Adafruit_BusIO_Register4readEv>
   b53f2:	2823      	cmp	r0, #35	; 0x23
   b53f4:	d1e7      	bne.n	b53c6 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x32>
  configureDirection(0x0); // all inputs!
   b53f6:	4631      	mov	r1, r6
   b53f8:	4620      	mov	r0, r4
   b53fa:	f7ff ff35 	bl	b5268 <_ZN15Adafruit_AW952318configureDirectionEt>
  openDrainPort0(false);   // push pull default
   b53fe:	4631      	mov	r1, r6
   b5400:	4620      	mov	r0, r4
   b5402:	f7ff ffad 	bl	b5360 <_ZN15Adafruit_AW952314openDrainPort0Eb>
  interruptEnableGPIO(0);  // no interrupt
   b5406:	4631      	mov	r1, r6
   b5408:	4620      	mov	r0, r4
   b540a:	f7ff ff19 	bl	b5240 <_ZN15Adafruit_AW952319interruptEnableGPIOEt>
  return true;
   b540e:	e7db      	b.n	b53c8 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x34>

000b5410 <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   b5410:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   b5412:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   b5414:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   b5418:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   b541a:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   b541e:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   b5422:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   b5424:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   b5426:	7382      	strb	r2, [r0, #14]
  _width = width;
   b5428:	7303      	strb	r3, [r0, #12]
}
   b542a:	bd30      	pop	{r4, r5, pc}

000b542c <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b542c:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b542e:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b5430:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b5432:	b085      	sub	sp, #20
   b5434:	4603      	mov	r3, r0

  if (_i2cdevice) {
   b5436:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b5438:	f88d 400c 	strb.w	r4, [sp, #12]
   b543c:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b543e:	460e      	mov	r6, r1
   b5440:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   b5442:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   b5446:	b140      	cbz	r0, b545a <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b5448:	7b5b      	ldrb	r3, [r3, #13]
   b544a:	9301      	str	r3, [sp, #4]
   b544c:	ab03      	add	r3, sp, #12
   b544e:	9300      	str	r3, [sp, #0]
   b5450:	2301      	movs	r3, #1
   b5452:	f000 f90a 	bl	b566a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   b5456:	b005      	add	sp, #20
   b5458:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   b545a:	6858      	ldr	r0, [r3, #4]
   b545c:	2800      	cmp	r0, #0
   b545e:	d0fa      	beq.n	b5456 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b5460:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b5464:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b5468:	f1be 0f03 	cmp.w	lr, #3
   b546c:	d10c      	bne.n	b5488 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b546e:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   b5472:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b5476:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   b5478:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b547c:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b5480:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b5482:	f000 fa2a 	bl	b58da <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b5486:	e7e6      	b.n	b5456 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b5488:	f1be 0f00 	cmp.w	lr, #0
   b548c:	d109      	bne.n	b54a2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   b548e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   b5492:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b5496:	f8cd c000 	str.w	ip, [sp]
   b549a:	ab03      	add	r3, sp, #12
   b549c:	463a      	mov	r2, r7
   b549e:	4631      	mov	r1, r6
   b54a0:	e7ef      	b.n	b5482 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b54a2:	f1be 0f02 	cmp.w	lr, #2
   b54a6:	d102      	bne.n	b54ae <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   b54a8:	f064 047f 	orn	r4, r4, #127	; 0x7f
   b54ac:	e7f1      	b.n	b5492 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b54ae:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   b54b2:	bf01      	itttt	eq
   b54b4:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   b54b8:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   b54bc:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   b54c0:	f88d 300c 	strbeq.w	r3, [sp, #12]
   b54c4:	e7e7      	b.n	b5496 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000b54c6 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   b54c6:	b4f0      	push	{r4, r5, r6, r7}
   b54c8:	460b      	mov	r3, r1
  if (numbytes == 0) {
   b54ca:	b902      	cbnz	r2, b54ce <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   b54cc:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   b54ce:	2a04      	cmp	r2, #4
   b54d0:	d814      	bhi.n	b54fc <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   b54d2:	f100 050f 	add.w	r5, r0, #15
   b54d6:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   b54d8:	1884      	adds	r4, r0, r2
   b54da:	4629      	mov	r1, r5
   b54dc:	4284      	cmp	r4, r0
   b54de:	d009      	beq.n	b54f4 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   b54e0:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   b54e2:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   b54e4:	b927      	cbnz	r7, b54f0 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   b54e6:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   b54e8:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   b54ea:	3501      	adds	r5, #1
   b54ec:	3c01      	subs	r4, #1
   b54ee:	e7f5      	b.n	b54dc <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   b54f0:	73a6      	strb	r6, [r4, #14]
   b54f2:	e7f9      	b.n	b54e8 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   b54f4:	4620      	mov	r0, r4
}
   b54f6:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   b54f8:	f7ff bf98 	b.w	b542c <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   b54fc:	2000      	movs	r0, #0
   b54fe:	bcf0      	pop	{r4, r5, r6, r7}
   b5500:	4770      	bx	lr

000b5502 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b5502:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b5504:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b5506:	7a85      	ldrb	r5, [r0, #10]
   b5508:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b550c:	4604      	mov	r4, r0

  if (_i2cdevice) {
   b550e:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b5510:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b5512:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   b5514:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   b5518:	b140      	cbz	r0, b552c <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b551a:	2100      	movs	r1, #0
   b551c:	e9cd 2100 	strd	r2, r1, [sp]
   b5520:	a903      	add	r1, sp, #12
   b5522:	7b62      	ldrb	r2, [r4, #13]
   b5524:	f000 f90f 	bl	b5746 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   b5528:	b004      	add	sp, #16
   b552a:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   b552c:	6860      	ldr	r0, [r4, #4]
   b552e:	2800      	cmp	r0, #0
   b5530:	d0fa      	beq.n	b5528 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b5532:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b5534:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b5536:	2903      	cmp	r1, #3
   b5538:	d10d      	bne.n	b5556 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   b553a:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b553e:	21ff      	movs	r1, #255	; 0xff
   b5540:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   b5544:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b5548:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b554c:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b554e:	a903      	add	r1, sp, #12
   b5550:	f000 f9f5 	bl	b593e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   b5554:	e7e8      	b.n	b5528 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b5556:	b941      	cbnz	r1, b556a <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   b5558:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   b555c:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b5560:	21ff      	movs	r1, #255	; 0xff
   b5562:	e9cd 2100 	strd	r2, r1, [sp]
   b5566:	4622      	mov	r2, r4
   b5568:	e7f1      	b.n	b554e <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b556a:	2902      	cmp	r1, #2
   b556c:	d102      	bne.n	b5574 <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   b556e:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   b5572:	e7f3      	b.n	b555c <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b5574:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   b5576:	bf02      	ittt	eq
   b5578:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   b557c:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   b5580:	f88d 100c 	strbeq.w	r1, [sp, #12]
   b5584:	e7ec      	b.n	b5560 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000b5586 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   b5586:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   b5588:	f100 050f 	add.w	r5, r0, #15
   b558c:	7b02      	ldrb	r2, [r0, #12]
   b558e:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   b5590:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   b5592:	f7ff ffb6 	bl	b5502 <_ZN23Adafruit_BusIO_Register4readEPhh>
   b5596:	b178      	cbz	r0, b55b8 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   b5598:	7b22      	ldrb	r2, [r4, #12]
   b559a:	4629      	mov	r1, r5
   b559c:	4422      	add	r2, r4
  uint32_t value = 0;
   b559e:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   b55a0:	42a2      	cmp	r2, r4
   b55a2:	d00b      	beq.n	b55bc <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   b55a4:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   b55a6:	7ba0      	ldrb	r0, [r4, #14]
   b55a8:	b920      	cbnz	r0, b55b4 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   b55aa:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   b55ac:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   b55ae:	3a01      	subs	r2, #1
   b55b0:	3101      	adds	r1, #1
   b55b2:	e7f5      	b.n	b55a0 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   b55b4:	7808      	ldrb	r0, [r1, #0]
   b55b6:	e7f9      	b.n	b55ac <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   b55b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b55bc:	bd38      	pop	{r3, r4, r5, pc}

000b55be <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   b55be:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   b55c0:	6001      	str	r1, [r0, #0]
  _bits = bits;
   b55c2:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   b55c4:	7143      	strb	r3, [r0, #5]
}
   b55c6:	bd10      	pop	{r4, pc}

000b55c8 <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   b55c8:	b510      	push	{r4, lr}
   b55ca:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b55cc:	6800      	ldr	r0, [r0, #0]
   b55ce:	f7ff ffda 	bl	b5586 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   b55d2:	7922      	ldrb	r2, [r4, #4]
   b55d4:	2301      	movs	r3, #1
   b55d6:	4093      	lsls	r3, r2
  val >>= _shift;
   b55d8:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   b55da:	3b01      	subs	r3, #1
  val >>= _shift;
   b55dc:	40d0      	lsrs	r0, r2
}
   b55de:	4018      	ands	r0, r3
   b55e0:	bd10      	pop	{r4, pc}

000b55e2 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   b55e2:	b570      	push	{r4, r5, r6, lr}
   b55e4:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b55e6:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   b55e8:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   b55ea:	f7ff ffcc 	bl	b5586 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   b55ee:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   b55f0:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   b55f2:	2201      	movs	r2, #1
   b55f4:	409a      	lsls	r2, r3
   b55f6:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   b55f8:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   b55fc:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   b5600:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   b5602:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   b5604:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   b5608:	4329      	orrs	r1, r5
   b560a:	7b02      	ldrb	r2, [r0, #12]
}
   b560c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   b5610:	f7ff bf59 	b.w	b54c6 <_ZN23Adafruit_BusIO_Register5writeEmh>

000b5614 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b5614:	6042      	str	r2, [r0, #4]
  _begun = false;
   b5616:	2200      	movs	r2, #0
   b5618:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b561a:	2220      	movs	r2, #32
  _addr = addr;
   b561c:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b561e:	60c2      	str	r2, [r0, #12]
#endif
}
   b5620:	4770      	bx	lr

000b5622 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b5622:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b5624:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b5626:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b5628:	b153      	cbz	r3, b5640 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b562a:	7821      	ldrb	r1, [r4, #0]
   b562c:	6860      	ldr	r0, [r4, #4]
   b562e:	f002 f889 	bl	b7744 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b5632:	6860      	ldr	r0, [r4, #4]
   b5634:	f002 f891 	bl	b775a <_ZN7TwoWire15endTransmissionEv>
   b5638:	fab0 f080 	clz	r0, r0
   b563c:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   b563e:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b5640:	2101      	movs	r1, #1
   b5642:	f000 f803 	bl	b564c <_ZN18Adafruit_I2CDevice5beginEb>
   b5646:	2800      	cmp	r0, #0
   b5648:	d1ef      	bne.n	b562a <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b564a:	e7f8      	b.n	b563e <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b564c <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b564c:	b538      	push	{r3, r4, r5, lr}
   b564e:	4604      	mov	r4, r0
  _wire->begin();
   b5650:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b5652:	460d      	mov	r5, r1
  _wire->begin();
   b5654:	f002 f844 	bl	b76e0 <_ZN7TwoWire5beginEv>
  _begun = true;
   b5658:	2001      	movs	r0, #1
   b565a:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b565c:	b125      	cbz	r5, b5668 <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b565e:	4620      	mov	r0, r4
}
   b5660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b5664:	f7ff bfdd 	b.w	b5622 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b5668:	bd38      	pop	{r3, r4, r5, pc}

000b566a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b566a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b566e:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b5672:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b5674:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b5676:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b5678:	4432      	add	r2, r6
   b567a:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b567c:	4604      	mov	r4, r0
   b567e:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b5680:	d902      	bls.n	b5688 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b5682:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   b5684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b5688:	7801      	ldrb	r1, [r0, #0]
   b568a:	6840      	ldr	r0, [r0, #4]
   b568c:	f002 f85a 	bl	b7744 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b5690:	b97e      	cbnz	r6, b56b2 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b5692:	6860      	ldr	r0, [r4, #4]
   b5694:	6803      	ldr	r3, [r0, #0]
   b5696:	462a      	mov	r2, r5
   b5698:	68db      	ldr	r3, [r3, #12]
   b569a:	4641      	mov	r1, r8
   b569c:	4798      	blx	r3
   b569e:	4285      	cmp	r5, r0
   b56a0:	d1ef      	bne.n	b5682 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b56a2:	6860      	ldr	r0, [r4, #4]
   b56a4:	4639      	mov	r1, r7
   b56a6:	f002 f854 	bl	b7752 <_ZN7TwoWire15endTransmissionEh>
   b56aa:	fab0 f080 	clz	r0, r0
   b56ae:	0940      	lsrs	r0, r0, #5
   b56b0:	e7e8      	b.n	b5684 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b56b2:	f1b9 0f00 	cmp.w	r9, #0
   b56b6:	d0ec      	beq.n	b5692 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b56b8:	6860      	ldr	r0, [r4, #4]
   b56ba:	6803      	ldr	r3, [r0, #0]
   b56bc:	4632      	mov	r2, r6
   b56be:	68db      	ldr	r3, [r3, #12]
   b56c0:	4649      	mov	r1, r9
   b56c2:	4798      	blx	r3
   b56c4:	4286      	cmp	r6, r0
   b56c6:	d1dc      	bne.n	b5682 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b56c8:	e7e3      	b.n	b5692 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b56ca <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   b56ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b56ce:	4615      	mov	r5, r2
   b56d0:	4604      	mov	r4, r0
   b56d2:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   b56d4:	b2d2      	uxtb	r2, r2
   b56d6:	7801      	ldrb	r1, [r0, #0]
   b56d8:	6840      	ldr	r0, [r0, #4]
   b56da:	f002 f81e 	bl	b771a <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   b56de:	4285      	cmp	r5, r0
   b56e0:	d10d      	bne.n	b56fe <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   b56e2:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   b56e4:	fa1f f887 	uxth.w	r8, r7
   b56e8:	45a8      	cmp	r8, r5
   b56ea:	f107 0701 	add.w	r7, r7, #1
   b56ee:	d209      	bcs.n	b5704 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   b56f0:	6860      	ldr	r0, [r4, #4]
   b56f2:	6803      	ldr	r3, [r0, #0]
   b56f4:	695b      	ldr	r3, [r3, #20]
   b56f6:	4798      	blx	r3
   b56f8:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   b56fc:	e7f2      	b.n	b56e4 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   b56fe:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b5700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b5704:	2001      	movs	r0, #1
   b5706:	e7fb      	b.n	b5700 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000b5708 <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b5708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b570c:	4607      	mov	r7, r0
   b570e:	4688      	mov	r8, r1
   b5710:	4616      	mov	r6, r2
   b5712:	4699      	mov	r9, r3
  size_t pos = 0;
   b5714:	2500      	movs	r5, #0
  while (pos < len) {
   b5716:	42b5      	cmp	r5, r6
   b5718:	d212      	bcs.n	b5740 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b571a:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   b571c:	1b74      	subs	r4, r6, r5
   b571e:	4294      	cmp	r4, r2
   b5720:	bf28      	it	cs
   b5722:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   b5724:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   b5726:	42ab      	cmp	r3, r5
   b5728:	bf94      	ite	ls
   b572a:	464b      	movls	r3, r9
   b572c:	2300      	movhi	r3, #0
   b572e:	4622      	mov	r2, r4
   b5730:	eb08 0105 	add.w	r1, r8, r5
   b5734:	4638      	mov	r0, r7
   b5736:	f7ff ffc8 	bl	b56ca <_ZN18Adafruit_I2CDevice5_readEPhjb>
   b573a:	b110      	cbz	r0, b5742 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   b573c:	4425      	add	r5, r4
  while (pos < len) {
   b573e:	e7ea      	b.n	b5716 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   b5740:	2001      	movs	r0, #1
}
   b5742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5746 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   b5746:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5748:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   b574a:	2300      	movs	r3, #0
   b574c:	e9cd 3300 	strd	r3, r3, [sp]
   b5750:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   b5754:	9e06      	ldr	r6, [sp, #24]
   b5756:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   b5758:	f7ff ff87 	bl	b566a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   b575c:	b140      	cbz	r0, b5770 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   b575e:	2301      	movs	r3, #1
   b5760:	4632      	mov	r2, r6
   b5762:	4629      	mov	r1, r5
   b5764:	4620      	mov	r0, r4
}
   b5766:	b002      	add	sp, #8
   b5768:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   b576c:	f7ff bfcc 	b.w	b5708 <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   b5770:	b002      	add	sp, #8
   b5772:	bd70      	pop	{r4, r5, r6, pc}

000b5774 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b5774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5778:	4604      	mov	r4, r0
  if (_spi) {
   b577a:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b577c:	b085      	sub	sp, #20
   b577e:	460d      	mov	r5, r1
  if (_spi) {
   b5780:	b140      	cbz	r0, b5794 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   b5782:	2300      	movs	r3, #0
   b5784:	9300      	str	r3, [sp, #0]
   b5786:	4613      	mov	r3, r2
   b5788:	460a      	mov	r2, r1
   b578a:	f002 fb2f 	bl	b7dec <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b578e:	b005      	add	sp, #20
   b5790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b5794:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b5796:	68a0      	ldr	r0, [r4, #8]
   b5798:	4f48      	ldr	r7, [pc, #288]	; (b58bc <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b579a:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b579e:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b57a0:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b57a2:	bf0c      	ite	eq
   b57a4:	f04f 0b01 	moveq.w	fp, #1
   b57a8:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b57ac:	ea1b 0f03 	tst.w	fp, r3
   b57b0:	eb01 0302 	add.w	r3, r1, r2
   b57b4:	bf0c      	ite	eq
   b57b6:	f04f 0901 	moveq.w	r9, #1
   b57ba:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b57be:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b57c0:	9303      	str	r3, [sp, #12]
   b57c2:	9b03      	ldr	r3, [sp, #12]
   b57c4:	42ab      	cmp	r3, r5
   b57c6:	d0e2      	beq.n	b578e <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b57c8:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b57cc:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b57ce:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b57d2:	b117      	cbz	r7, b57da <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b57d4:	4638      	mov	r0, r7
   b57d6:	f001 fcbb 	bl	b7150 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b57da:	7b63      	ldrb	r3, [r4, #13]
   b57dc:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b57e0:	d141      	bne.n	b5866 <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b57e2:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b57e6:	1c5a      	adds	r2, r3, #1
   b57e8:	d00f      	beq.n	b580a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b57ea:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b57ee:	bf14      	ite	ne
   b57f0:	2301      	movne	r3, #1
   b57f2:	2300      	moveq	r3, #0
   b57f4:	454b      	cmp	r3, r9
   b57f6:	d008      	beq.n	b580a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   b57f8:	6963      	ldr	r3, [r4, #20]
   b57fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b57fc:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b57fe:	2900      	cmp	r1, #0
   b5800:	d02c      	beq.n	b585c <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   b5802:	4302      	orrs	r2, r0
   b5804:	601a      	str	r2, [r3, #0]
   b5806:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   b580a:	69a1      	ldr	r1, [r4, #24]
   b580c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b580e:	680a      	ldr	r2, [r1, #0]
   b5810:	4313      	orrs	r3, r2
   b5812:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b5814:	b117      	cbz	r7, b581c <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b5816:	4638      	mov	r0, r7
   b5818:	f001 fc9a 	bl	b7150 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b581c:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b5820:	3301      	adds	r3, #1
   b5822:	d006      	beq.n	b5832 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b5824:	69e3      	ldr	r3, [r4, #28]
   b5826:	681a      	ldr	r2, [r3, #0]
   b5828:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b582a:	421a      	tst	r2, r3
            reply |= b;
   b582c:	bf18      	it	ne
   b582e:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   b5832:	69a1      	ldr	r1, [r4, #24]
   b5834:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5836:	680a      	ldr	r2, [r1, #0]
   b5838:	ea22 0303 	bic.w	r3, r2, r3
   b583c:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b583e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b5842:	3301      	adds	r3, #1
        buffer[i] = reply;
   b5844:	bf18      	it	ne
   b5846:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b584a:	7b23      	ldrb	r3, [r4, #12]
   b584c:	2b00      	cmp	r3, #0
   b584e:	d132      	bne.n	b58b6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b5850:	0076      	lsls	r6, r6, #1
   b5852:	b2f6      	uxtb	r6, r6
   b5854:	2e00      	cmp	r6, #0
   b5856:	d1bc      	bne.n	b57d2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b5858:	3501      	adds	r5, #1
   b585a:	e7b2      	b.n	b57c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   b585c:	ea22 0200 	bic.w	r2, r2, r0
   b5860:	601a      	str	r2, [r3, #0]
   b5862:	4689      	mov	r9, r1
   b5864:	e7d1      	b.n	b580a <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   b5866:	69a1      	ldr	r1, [r4, #24]
   b5868:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b586a:	680a      	ldr	r2, [r1, #0]
   b586c:	4313      	orrs	r3, r2
   b586e:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b5870:	b117      	cbz	r7, b5878 <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b5872:	4638      	mov	r0, r7
   b5874:	f001 fc6c 	bl	b7150 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b5878:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b587c:	3301      	adds	r3, #1
   b587e:	d008      	beq.n	b5892 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   b5880:	6963      	ldr	r3, [r4, #20]
   b5882:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b5884:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b5886:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   b588a:	bf14      	ite	ne
   b588c:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   b588e:	438a      	biceq	r2, r1
   b5890:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   b5892:	69a1      	ldr	r1, [r4, #24]
   b5894:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b5896:	680a      	ldr	r2, [r1, #0]
   b5898:	ea22 0303 	bic.w	r3, r2, r3
   b589c:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b589e:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b58a2:	3301      	adds	r3, #1
   b58a4:	d0cb      	beq.n	b583e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b58a6:	69e3      	ldr	r3, [r4, #28]
   b58a8:	681a      	ldr	r2, [r3, #0]
   b58aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b58ac:	421a      	tst	r2, r3
            reply |= b;
   b58ae:	bf18      	it	ne
   b58b0:	ea46 0808 	orrne.w	r8, r6, r8
   b58b4:	e7c3      	b.n	b583e <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b58b6:	0876      	lsrs	r6, r6, #1
   b58b8:	e7cc      	b.n	b5854 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b58ba:	bf00      	nop
   b58bc:	0007a120 	.word	0x0007a120

000b58c0 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b58c0:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b58c2:	2201      	movs	r2, #1
  uint8_t data = send;
   b58c4:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b58c8:	f10d 0107 	add.w	r1, sp, #7
   b58cc:	f7ff ff52 	bl	b5774 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b58d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b58d4:	b003      	add	sp, #12
   b58d6:	f85d fb04 	ldr.w	pc, [sp], #4

000b58da <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b58da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b58de:	4604      	mov	r4, r0
  if (_spi) {
   b58e0:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b58e2:	460e      	mov	r6, r1
   b58e4:	4617      	mov	r7, r2
   b58e6:	461d      	mov	r5, r3
  if (_spi) {
   b58e8:	b110      	cbz	r0, b58f0 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   b58ea:	6861      	ldr	r1, [r4, #4]
   b58ec:	f002 fa0a 	bl	b7d04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b58f0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b58f4:	2100      	movs	r1, #0
   b58f6:	b280      	uxth	r0, r0
   b58f8:	f002 fcad 	bl	b8256 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   b58fc:	9b06      	ldr	r3, [sp, #24]
   b58fe:	eb05 0803 	add.w	r8, r5, r3
   b5902:	4545      	cmp	r5, r8
   b5904:	d108      	bne.n	b5918 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   b5906:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   b5908:	42b7      	cmp	r7, r6
   b590a:	d00b      	beq.n	b5924 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   b590c:	f816 1b01 	ldrb.w	r1, [r6], #1
   b5910:	4620      	mov	r0, r4
   b5912:	f7ff ffd5 	bl	b58c0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   b5916:	e7f7      	b.n	b5908 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   b5918:	f815 1b01 	ldrb.w	r1, [r5], #1
   b591c:	4620      	mov	r0, r4
   b591e:	f7ff ffcf 	bl	b58c0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   b5922:	e7ee      	b.n	b5902 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   b5924:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b5928:	2101      	movs	r1, #1
   b592a:	b280      	uxth	r0, r0
   b592c:	f002 fc93 	bl	b8256 <digitalWrite>

  if (_spi) {
   b5930:	6820      	ldr	r0, [r4, #0]
   b5932:	b108      	cbz	r0, b5938 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   b5934:	f002 f9cc 	bl	b7cd0 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b5938:	2001      	movs	r0, #1
   b593a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b593e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   b593e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5942:	4604      	mov	r4, r0
  if (_spi) {
   b5944:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   b5946:	f89d 801c 	ldrb.w	r8, [sp, #28]
   b594a:	460e      	mov	r6, r1
   b594c:	4617      	mov	r7, r2
   b594e:	461d      	mov	r5, r3
  if (_spi) {
   b5950:	b110      	cbz	r0, b5958 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   b5952:	6861      	ldr	r1, [r4, #4]
   b5954:	f002 f9d6 	bl	b7d04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b5958:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b595c:	2100      	movs	r1, #0
   b595e:	b280      	uxth	r0, r0
   b5960:	f002 fc79 	bl	b8256 <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   b5964:	4437      	add	r7, r6
   b5966:	42be      	cmp	r6, r7
   b5968:	d10a      	bne.n	b5980 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   b596a:	9b06      	ldr	r3, [sp, #24]
   b596c:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   b596e:	42ae      	cmp	r6, r5
   b5970:	d00c      	beq.n	b598c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   b5972:	4641      	mov	r1, r8
   b5974:	4620      	mov	r0, r4
   b5976:	f7ff ffa3 	bl	b58c0 <_ZN18Adafruit_SPIDevice8transferEh>
   b597a:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   b597e:	e7f6      	b.n	b596e <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   b5980:	f816 1b01 	ldrb.w	r1, [r6], #1
   b5984:	4620      	mov	r0, r4
   b5986:	f7ff ff9b 	bl	b58c0 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   b598a:	e7ec      	b.n	b5966 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   b598c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b5990:	2101      	movs	r1, #1
   b5992:	b280      	uxth	r0, r0
   b5994:	f002 fc5f 	bl	b8256 <digitalWrite>

  if (_spi) {
   b5998:	6820      	ldr	r0, [r4, #0]
   b599a:	b108      	cbz	r0, b59a0 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   b599c:	f002 f998 	bl	b7cd0 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   b59a0:	2001      	movs	r0, #1
   b59a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000b59a8 <_ZL9date2daysthh>:
// utility code, some of this could be exposed in the DateTime API if needed

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
   b59a8:	b530      	push	{r4, r5, lr}
   b59aa:	4c0f      	ldr	r4, [pc, #60]	; (b59e8 <_ZL9date2daysthh+0x40>)
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
   b59ac:	2300      	movs	r3, #0
    for (uint8_t i = 1; i < m; ++i)
   b59ae:	3301      	adds	r3, #1
   b59b0:	b2dd      	uxtb	r5, r3
   b59b2:	428d      	cmp	r5, r1
   b59b4:	d204      	bcs.n	b59c0 <_ZL9date2daysthh+0x18>
        days += pgm_read_byte(daysInMonth + i - 1);
   b59b6:	f814 5b01 	ldrb.w	r5, [r4], #1
   b59ba:	442a      	add	r2, r5
   b59bc:	b292      	uxth	r2, r2
    for (uint8_t i = 1; i < m; ++i)
   b59be:	e7f6      	b.n	b59ae <_ZL9date2daysthh+0x6>
    if (m > 2 && y % 4 == 0)
   b59c0:	2902      	cmp	r1, #2
   b59c2:	d903      	bls.n	b59cc <_ZL9date2daysthh+0x24>
   b59c4:	0783      	lsls	r3, r0, #30
        ++days;
   b59c6:	bf04      	itt	eq
   b59c8:	3201      	addeq	r2, #1
   b59ca:	b292      	uxtheq	r2, r2
    return days + 365 * y + (y + 3) / 4 - 1;
   b59cc:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
   b59d0:	1cc3      	adds	r3, r0, #3
   b59d2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   b59d6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   b59da:	f3c3 038d 	ubfx	r3, r3, #2, #14
   b59de:	3801      	subs	r0, #1
   b59e0:	4418      	add	r0, r3
   b59e2:	4410      	add	r0, r2
}
   b59e4:	b280      	uxth	r0, r0
   b59e6:	bd30      	pop	{r4, r5, pc}
   b59e8:	000b92a8 	.word	0x000b92a8

000b59ec <_ZNK8DateTime12dayOfTheWeekEv>:
    hh = conv2d(buff);
    mm = conv2d(buff + 3);
    ss = conv2d(buff + 6);
}

uint8_t DateTime::dayOfTheWeek() const {    
   b59ec:	b508      	push	{r3, lr}
    uint16_t day = date2days(yOff, m, d);
   b59ee:	7882      	ldrb	r2, [r0, #2]
   b59f0:	7841      	ldrb	r1, [r0, #1]
   b59f2:	7800      	ldrb	r0, [r0, #0]
   b59f4:	f7ff ffd8 	bl	b59a8 <_ZL9date2daysthh>
    return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
   b59f8:	2307      	movs	r3, #7
   b59fa:	3006      	adds	r0, #6
   b59fc:	fbb0 f3f3 	udiv	r3, r0, r3
   b5a00:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   b5a04:	1ac0      	subs	r0, r0, r3
}
   b5a06:	b2c0      	uxtb	r0, r0
   b5a08:	bd08      	pop	{r3, pc}

000b5a0a <_ZN10RTC_DS13075beginEv>:
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
   b5a0a:	b508      	push	{r3, lr}
  Wire.begin();
   b5a0c:	f002 fc58 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5a10:	f001 fe66 	bl	b76e0 <_ZN7TwoWire5beginEv>
  return true;
}
   b5a14:	2001      	movs	r0, #1
   b5a16:	bd08      	pop	{r3, pc}

000b5a18 <_ZN11RTC_PCF85235beginEv>:
   b5a18:	f7ff bff7 	b.w	b5a0a <_ZN10RTC_DS13075beginEv>

000b5a1c <_ZN11RTC_PCF852311initializedEv>:
boolean RTC_PCF8523::begin(void) {
  Wire.begin();
  return true;
}

boolean RTC_PCF8523::initialized(void) {
   b5a1c:	b508      	push	{r3, lr}
  Wire.beginTransmission(PCF8523_ADDRESS);
   b5a1e:	f002 fc4f 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5a22:	2168      	movs	r1, #104	; 0x68
   b5a24:	f001 fe92 	bl	b774c <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
   b5a28:	f002 fc4a 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5a2c:	6803      	ldr	r3, [r0, #0]
   b5a2e:	2102      	movs	r1, #2
   b5a30:	689b      	ldr	r3, [r3, #8]
   b5a32:	4798      	blx	r3
  Wire.endTransmission();
   b5a34:	f002 fc44 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5a38:	f001 fe8f 	bl	b775a <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 1);
   b5a3c:	f002 fc40 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5a40:	2201      	movs	r2, #1
   b5a42:	2168      	movs	r1, #104	; 0x68
   b5a44:	f001 fe7b 	bl	b773e <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = Wire._I2C_READ();
   b5a48:	f002 fc3a 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5a4c:	6803      	ldr	r3, [r0, #0]
   b5a4e:	695b      	ldr	r3, [r3, #20]
   b5a50:	4798      	blx	r3
  return ((ss & 0xE0) != 0xE0);
   b5a52:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
}
   b5a56:	38e0      	subs	r0, #224	; 0xe0
   b5a58:	bf18      	it	ne
   b5a5a:	2001      	movne	r0, #1
   b5a5c:	bd08      	pop	{r3, pc}

000b5a5e <_ZN11RTC_PCF85233nowEv>:
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
  Wire._I2C_WRITE((byte)0x00);
  Wire.endTransmission();
}

DateTime RTC_PCF8523::now() {
   b5a5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b5a62:	4604      	mov	r4, r0
  Wire.beginTransmission(PCF8523_ADDRESS);
   b5a64:	f002 fc2c 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5a68:	2168      	movs	r1, #104	; 0x68
   b5a6a:	f001 fe6f 	bl	b774c <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)3);	
   b5a6e:	f002 fc27 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5a72:	6803      	ldr	r3, [r0, #0]
   b5a74:	2103      	movs	r1, #3
   b5a76:	689b      	ldr	r3, [r3, #8]
   b5a78:	4798      	blx	r3
  Wire.endTransmission();
   b5a7a:	f002 fc21 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5a7e:	f001 fe6c 	bl	b775a <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 7);
   b5a82:	f002 fc1d 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5a86:	2207      	movs	r2, #7
   b5a88:	2168      	movs	r1, #104	; 0x68
   b5a8a:	f001 fe58 	bl	b773e <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   b5a8e:	f002 fc17 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5a92:	6803      	ldr	r3, [r0, #0]
   b5a94:	695b      	ldr	r3, [r3, #20]
   b5a96:	4798      	blx	r3
   b5a98:	f000 097f 	and.w	r9, r0, #127	; 0x7f
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b5a9c:	f3c0 1002 	ubfx	r0, r0, #4, #3
   b5aa0:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   b5aa4:	eb09 0040 	add.w	r0, r9, r0, lsl #1
   b5aa8:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   b5aac:	f002 fc08 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5ab0:	6803      	ldr	r3, [r0, #0]
   b5ab2:	695b      	ldr	r3, [r3, #20]
   b5ab4:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b5ab6:	f3c0 1503 	ubfx	r5, r0, #4, #4
   b5aba:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
   b5abe:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   b5ac2:	f000 05ff 	and.w	r5, r0, #255	; 0xff
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   b5ac6:	f002 fbfb 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5aca:	6803      	ldr	r3, [r0, #0]
   b5acc:	695b      	ldr	r3, [r3, #20]
   b5ace:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b5ad0:	f3c0 1603 	ubfx	r6, r0, #4, #4
   b5ad4:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
   b5ad8:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   b5adc:	f000 06ff 	and.w	r6, r0, #255	; 0xff
  uint8_t d = bcd2bin(Wire._I2C_READ());
   b5ae0:	f002 fbee 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5ae4:	6803      	ldr	r3, [r0, #0]
   b5ae6:	695b      	ldr	r3, [r3, #20]
   b5ae8:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b5aea:	f3c0 1703 	ubfx	r7, r0, #4, #4
   b5aee:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
   b5af2:	eb00 0047 	add.w	r0, r0, r7, lsl #1
   b5af6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
  Wire._I2C_READ();  // skip 'weekdays'
   b5afa:	f002 fbe1 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5afe:	6803      	ldr	r3, [r0, #0]
   b5b00:	695b      	ldr	r3, [r3, #20]
   b5b02:	4798      	blx	r3
  uint8_t m = bcd2bin(Wire._I2C_READ());
   b5b04:	f002 fbdc 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5b08:	6803      	ldr	r3, [r0, #0]
   b5b0a:	695b      	ldr	r3, [r3, #20]
   b5b0c:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b5b0e:	f3c0 1803 	ubfx	r8, r0, #4, #4
   b5b12:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
   b5b16:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   b5b1a:	f000 08ff 	and.w	r8, r0, #255	; 0xff
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   b5b1e:	f002 fbcf 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b5b22:	6803      	ldr	r3, [r0, #0]
   b5b24:	695b      	ldr	r3, [r3, #20]
   b5b26:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   b5b28:	f3c0 1303 	ubfx	r3, r0, #4, #4
   b5b2c:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   b5b30:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    yOff = year;
   b5b34:	7020      	strb	r0, [r4, #0]
    m = month;
   b5b36:	f884 8001 	strb.w	r8, [r4, #1]
    d = day;
   b5b3a:	70a7      	strb	r7, [r4, #2]
    hh = hour;
   b5b3c:	70e6      	strb	r6, [r4, #3]
    mm = min;
   b5b3e:	7125      	strb	r5, [r4, #4]
    ss = sec;
   b5b40:	f884 9005 	strb.w	r9, [r4, #5]
  
  return DateTime (y, m, d, hh, mm, ss);
}
   b5b44:	4620      	mov	r0, r4
   b5b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b5b4a <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b5b4a:	b538      	push	{r3, r4, r5, lr}
   b5b4c:	4604      	mov	r4, r0
   b5b4e:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b5b50:	2224      	movs	r2, #36	; 0x24
   b5b52:	2100      	movs	r1, #0
   b5b54:	f003 f942 	bl	b8ddc <memset>

  m_vol = vol;
   b5b58:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b5b5a:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b5b5c:	2b10      	cmp	r3, #16
   b5b5e:	d003      	beq.n	b5b68 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b5b60:	2b20      	cmp	r3, #32
   b5b62:	d006      	beq.n	b5b72 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b5b64:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b5b66:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b5b68:	2320      	movs	r3, #32
  m_flags = F_READ;
   b5b6a:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b5b6c:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5b6e:	70a0      	strb	r0, [r4, #2]
  return true;
   b5b70:	e7f9      	b.n	b5b66 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b5b72:	2340      	movs	r3, #64	; 0x40
   b5b74:	e7f9      	b.n	b5b6a <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b5b76 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b5b76:	b510      	push	{r4, lr}
   b5b78:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5b7a:	3024      	adds	r0, #36	; 0x24
   b5b7c:	f000 fe62 	bl	b6844 <_ZN8FatCache4syncEv>
   b5b80:	b128      	cbz	r0, b5b8e <_ZN9FatVolume9cacheSyncEv+0x18>
   b5b82:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b5b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b5b8a:	f000 be5b 	b.w	b6844 <_ZN8FatCache4syncEv>
  }
   b5b8e:	bd10      	pop	{r4, pc}

000b5b90 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b5b90:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5b92:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b5b94:	f043 0304 	orr.w	r3, r3, #4
   b5b98:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b5b9a:	f100 0210 	add.w	r2, r0, #16
   b5b9e:	6880      	ldr	r0, [r0, #8]
   b5ba0:	f000 bf06 	b.w	b69b0 <_ZN9FatVolume15allocateClusterEmPm>

000b5ba4 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b5ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b5ba8:	7801      	ldrb	r1, [r0, #0]
   b5baa:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b5bae:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b5bb0:	d003      	beq.n	b5bba <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b5bb2:	2600      	movs	r6, #0
}
   b5bb4:	4630      	mov	r0, r6
   b5bb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b5bba:	6942      	ldr	r2, [r0, #20]
   b5bbc:	4b17      	ldr	r3, [pc, #92]	; (b5c1c <_ZN7FatFile13addDirClusterEv+0x78>)
   b5bbe:	429a      	cmp	r2, r3
   b5bc0:	d2f7      	bcs.n	b5bb2 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b5bc2:	f7ff ffe5 	bl	b5b90 <_ZN7FatFile10addClusterEv>
   b5bc6:	4606      	mov	r6, r0
   b5bc8:	2800      	cmp	r0, #0
   b5bca:	d0f2      	beq.n	b5bb2 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b5bcc:	6921      	ldr	r1, [r4, #16]
   b5bce:	68a0      	ldr	r0, [r4, #8]
   b5bd0:	f000 fe83 	bl	b68da <_ZNK9FatVolume17clusterFirstBlockEm>
   b5bd4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b5bd6:	68a0      	ldr	r0, [r4, #8]
   b5bd8:	2205      	movs	r2, #5
   b5bda:	4639      	mov	r1, r7
   b5bdc:	3024      	adds	r0, #36	; 0x24
   b5bde:	f000 fe59 	bl	b6894 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5be2:	4680      	mov	r8, r0
   b5be4:	2800      	cmp	r0, #0
   b5be6:	d0e4      	beq.n	b5bb2 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b5be8:	4629      	mov	r1, r5
   b5bea:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5bee:	f003 f8f5 	bl	b8ddc <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5bf2:	2501      	movs	r5, #1
   b5bf4:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b5bf6:	791a      	ldrb	r2, [r3, #4]
   b5bf8:	42aa      	cmp	r2, r5
   b5bfa:	d909      	bls.n	b5c10 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b5bfc:	6818      	ldr	r0, [r3, #0]
   b5bfe:	4642      	mov	r2, r8
   b5c00:	19e9      	adds	r1, r5, r7
   b5c02:	f001 f9b4 	bl	b6f6e <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b5c06:	2800      	cmp	r0, #0
   b5c08:	d0d3      	beq.n	b5bb2 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5c0a:	3501      	adds	r5, #1
   b5c0c:	b2ed      	uxtb	r5, r5
   b5c0e:	e7f1      	b.n	b5bf4 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b5c10:	6963      	ldr	r3, [r4, #20]
   b5c12:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b5c16:	6163      	str	r3, [r4, #20]
  return true;
   b5c18:	e7cc      	b.n	b5bb4 <_ZN7FatFile13addDirClusterEv+0x10>
   b5c1a:	bf00      	nop
   b5c1c:	001ffe00 	.word	0x001ffe00

000b5c20 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b5c20:	b510      	push	{r4, lr}
   b5c22:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b5c24:	6880      	ldr	r0, [r0, #8]
   b5c26:	460a      	mov	r2, r1
   b5c28:	3024      	adds	r0, #36	; 0x24
   b5c2a:	69a1      	ldr	r1, [r4, #24]
   b5c2c:	f000 fe32 	bl	b6894 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5c30:	b120      	cbz	r0, b5c3c <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b5c32:	88a3      	ldrh	r3, [r4, #4]
   b5c34:	f003 030f 	and.w	r3, r3, #15
   b5c38:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b5c3c:	bd10      	pop	{r4, pc}

000b5c3e <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b5c3e:	7803      	ldrb	r3, [r0, #0]
   b5c40:	b90b      	cbnz	r3, b5c46 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b5c42:	f7ff bf82 	b.w	b5b4a <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b5c46:	2000      	movs	r0, #0
   b5c48:	4770      	bx	lr

000b5c4a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b5c4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b5c4e:	7803      	ldrb	r3, [r0, #0]
   b5c50:	4604      	mov	r4, r0
   b5c52:	4688      	mov	r8, r1
   b5c54:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b5c56:	2b00      	cmp	r3, #0
   b5c58:	d05d      	beq.n	b5d16 <_ZN7FatFile4readEPvj+0xcc>
   b5c5a:	7882      	ldrb	r2, [r0, #2]
   b5c5c:	07d1      	lsls	r1, r2, #31
   b5c5e:	d55a      	bpl.n	b5d16 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b5c60:	071a      	lsls	r2, r3, #28
   b5c62:	d52d      	bpl.n	b5cc0 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b5c64:	69c3      	ldr	r3, [r0, #28]
   b5c66:	6942      	ldr	r2, [r0, #20]
   b5c68:	1a9b      	subs	r3, r3, r2
   b5c6a:	429d      	cmp	r5, r3
   b5c6c:	bf28      	it	cs
   b5c6e:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b5c70:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b5c72:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5c76:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b5c7a:	2e00      	cmp	r6, #0
   b5c7c:	f000 808f 	beq.w	b5d9e <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b5c80:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b5c82:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5c84:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b5c86:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b5c88:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5c8c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b5c90:	d51f      	bpl.n	b5cd2 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b5c92:	6a00      	ldr	r0, [r0, #32]
   b5c94:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b5c96:	68a0      	ldr	r0, [r4, #8]
   b5c98:	f1ba 0f00 	cmp.w	sl, #0
   b5c9c:	d142      	bne.n	b5d24 <_ZN7FatFile4readEPvj+0xda>
   b5c9e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b5ca2:	d33f      	bcc.n	b5d24 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b5ca4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b5ca6:	4299      	cmp	r1, r3
   b5ca8:	d03c      	beq.n	b5d24 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b5caa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b5cae:	d252      	bcs.n	b5d56 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b5cb0:	6800      	ldr	r0, [r0, #0]
   b5cb2:	4642      	mov	r2, r8
   b5cb4:	f001 f8d2 	bl	b6e5c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b5cb8:	b368      	cbz	r0, b5d16 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b5cba:	f44f 7700 	mov.w	r7, #512	; 0x200
   b5cbe:	e044      	b.n	b5d4a <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b5cc0:	069b      	lsls	r3, r3, #26
   b5cc2:	d5d5      	bpl.n	b5c70 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b5cc4:	6883      	ldr	r3, [r0, #8]
   b5cc6:	891a      	ldrh	r2, [r3, #8]
   b5cc8:	6943      	ldr	r3, [r0, #20]
   b5cca:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b5cce:	b29b      	uxth	r3, r3
   b5cd0:	e7cb      	b.n	b5c6a <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b5cd2:	f890 9005 	ldrb.w	r9, [r0, #5]
   b5cd6:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b5cda:	f1ba 0f00 	cmp.w	sl, #0
   b5cde:	d108      	bne.n	b5cf2 <_ZN7FatFile4readEPvj+0xa8>
   b5ce0:	f1b9 0f00 	cmp.w	r9, #0
   b5ce4:	d105      	bne.n	b5cf2 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b5ce6:	b95b      	cbnz	r3, b5d00 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b5ce8:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b5cea:	bf4c      	ite	mi
   b5cec:	6a03      	ldrmi	r3, [r0, #32]
   b5cee:	6a23      	ldrpl	r3, [r4, #32]
   b5cf0:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b5cf2:	6921      	ldr	r1, [r4, #16]
   b5cf4:	68a0      	ldr	r0, [r4, #8]
   b5cf6:	f000 fdf0 	bl	b68da <_ZNK9FatVolume17clusterFirstBlockEm>
   b5cfa:	eb09 0100 	add.w	r1, r9, r0
   b5cfe:	e7ca      	b.n	b5c96 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5d00:	6921      	ldr	r1, [r4, #16]
   b5d02:	465a      	mov	r2, fp
   b5d04:	f000 fdef 	bl	b68e6 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b5d08:	2800      	cmp	r0, #0
   b5d0a:	db04      	blt.n	b5d16 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b5d0c:	d1f1      	bne.n	b5cf2 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b5d0e:	7823      	ldrb	r3, [r4, #0]
   b5d10:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5d14:	d143      	bne.n	b5d9e <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b5d16:	7863      	ldrb	r3, [r4, #1]
   b5d18:	f043 0302 	orr.w	r3, r3, #2
   b5d1c:	7063      	strb	r3, [r4, #1]
  return -1;
   b5d1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5d22:	e03d      	b.n	b5da0 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b5d24:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b5d28:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b5d2a:	f04f 0200 	mov.w	r2, #0
   b5d2e:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b5d32:	bf28      	it	cs
   b5d34:	4637      	movcs	r7, r6
   b5d36:	f000 fdad 	bl	b6894 <_ZN8FatCache4readEmh>
      if (!pc) {
   b5d3a:	2800      	cmp	r0, #0
   b5d3c:	d0eb      	beq.n	b5d16 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b5d3e:	eb00 010a 	add.w	r1, r0, sl
   b5d42:	463a      	mov	r2, r7
   b5d44:	4640      	mov	r0, r8
   b5d46:	f003 f83b 	bl	b8dc0 <memcpy>
    m_curPosition += n;
   b5d4a:	6963      	ldr	r3, [r4, #20]
   b5d4c:	443b      	add	r3, r7
    dst += n;
   b5d4e:	44b8      	add	r8, r7
    m_curPosition += n;
   b5d50:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b5d52:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b5d54:	e791      	b.n	b5c7a <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b5d56:	7822      	ldrb	r2, [r4, #0]
   b5d58:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b5d5a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b5d5e:	d406      	bmi.n	b5d6e <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b5d60:	7902      	ldrb	r2, [r0, #4]
   b5d62:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b5d66:	b2d2      	uxtb	r2, r2
   b5d68:	4592      	cmp	sl, r2
   b5d6a:	bf28      	it	cs
   b5d6c:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5d6e:	4299      	cmp	r1, r3
      n = 512*nb;
   b5d70:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5d74:	d208      	bcs.n	b5d88 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b5d76:	68a0      	ldr	r0, [r4, #8]
   b5d78:	4653      	mov	r3, sl
   b5d7a:	6800      	ldr	r0, [r0, #0]
   b5d7c:	4642      	mov	r2, r8
   b5d7e:	f001 f8b5 	bl	b6eec <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b5d82:	2800      	cmp	r0, #0
   b5d84:	d1e1      	bne.n	b5d4a <_ZN7FatFile4readEPvj+0x100>
   b5d86:	e7c6      	b.n	b5d16 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5d88:	4453      	add	r3, sl
   b5d8a:	428b      	cmp	r3, r1
   b5d8c:	d9f3      	bls.n	b5d76 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b5d8e:	3024      	adds	r0, #36	; 0x24
   b5d90:	9101      	str	r1, [sp, #4]
   b5d92:	f000 fd57 	bl	b6844 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b5d96:	9901      	ldr	r1, [sp, #4]
   b5d98:	2800      	cmp	r0, #0
   b5d9a:	d1ec      	bne.n	b5d76 <_ZN7FatFile4readEPvj+0x12c>
   b5d9c:	e7bb      	b.n	b5d16 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b5d9e:	1ba8      	subs	r0, r5, r6
}
   b5da0:	b003      	add	sp, #12
   b5da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5da6 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b5da6:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b5da8:	2201      	movs	r2, #1
   b5daa:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b5dae:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b5db2:	4604      	mov	r4, r0
   b5db4:	f7ff ff49 	bl	b5c4a <_ZN7FatFile4readEPvj>
   b5db8:	2801      	cmp	r0, #1
   b5dba:	bf0a      	itet	eq
   b5dbc:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b5dc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b5dc4:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b5dc8:	b002      	add	sp, #8
   b5dca:	bd70      	pop	{r4, r5, r6, pc}

000b5dcc <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b5dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b5dce:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b5dd0:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b5dd4:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b5dd6:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b5dda:	d000      	beq.n	b5dde <_ZN7FatFile12readDirCacheEb+0x12>
   b5ddc:	b999      	cbnz	r1, b5e06 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b5dde:	2201      	movs	r2, #1
   b5de0:	f10d 0107 	add.w	r1, sp, #7
   b5de4:	4620      	mov	r0, r4
   b5de6:	f7ff ff30 	bl	b5c4a <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b5dea:	b240      	sxtb	r0, r0
   b5dec:	2801      	cmp	r0, #1
   b5dee:	d002      	beq.n	b5df6 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b5df0:	2000      	movs	r0, #0
}
   b5df2:	b003      	add	sp, #12
   b5df4:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b5df6:	6963      	ldr	r3, [r4, #20]
   b5df8:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b5dfa:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b5dfc:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b5dfe:	3030      	adds	r0, #48	; 0x30
   b5e00:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b5e04:	e7f5      	b.n	b5df2 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b5e06:	3320      	adds	r3, #32
   b5e08:	e7f7      	b.n	b5dfa <_ZN7FatFile12readDirCacheEb+0x2e>

000b5e0a <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b5e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b5e0e:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b5e10:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b5e12:	4604      	mov	r4, r0
   b5e14:	460d      	mov	r5, r1
  if (!isOpen()) {
   b5e16:	b162      	cbz	r2, b5e32 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b5e18:	6940      	ldr	r0, [r0, #20]
   b5e1a:	4288      	cmp	r0, r1
   b5e1c:	d002      	beq.n	b5e24 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b5e1e:	b919      	cbnz	r1, b5e28 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b5e20:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b5e22:	6165      	str	r5, [r4, #20]
    return true;
   b5e24:	2001      	movs	r0, #1
   b5e26:	e006      	b.n	b5e36 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b5e28:	0716      	lsls	r6, r2, #28
   b5e2a:	d506      	bpl.n	b5e3a <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b5e2c:	69e3      	ldr	r3, [r4, #28]
   b5e2e:	428b      	cmp	r3, r1
   b5e30:	d20b      	bcs.n	b5e4a <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b5e32:	6127      	str	r7, [r4, #16]
  return false;
   b5e34:	2000      	movs	r0, #0
}
   b5e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b5e3a:	0691      	lsls	r1, r2, #26
   b5e3c:	d505      	bpl.n	b5e4a <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b5e3e:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b5e40:	891b      	ldrh	r3, [r3, #8]
   b5e42:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b5e46:	d9ec      	bls.n	b5e22 <_ZN7FatFile7seekSetEm+0x18>
   b5e48:	e7f3      	b.n	b5e32 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b5e4a:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b5e4e:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b5e52:	1e43      	subs	r3, r0, #1
   b5e54:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b5e58:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b5e5a:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b5e5c:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b5e5e:	42b3      	cmp	r3, r6
   b5e60:	d800      	bhi.n	b5e64 <_ZN7FatFile7seekSetEm+0x5a>
   b5e62:	b998      	cbnz	r0, b5e8c <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b5e64:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b5e66:	bf4c      	ite	mi
   b5e68:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b5e6c:	6a23      	ldrpl	r3, [r4, #32]
   b5e6e:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b5e70:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b5e74:	2e00      	cmp	r6, #0
   b5e76:	d0d4      	beq.n	b5e22 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b5e78:	6921      	ldr	r1, [r4, #16]
   b5e7a:	68a0      	ldr	r0, [r4, #8]
   b5e7c:	4642      	mov	r2, r8
   b5e7e:	f000 fd32 	bl	b68e6 <_ZN9FatVolume6fatGetEmPm>
   b5e82:	2800      	cmp	r0, #0
   b5e84:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b5e88:	dcf4      	bgt.n	b5e74 <_ZN7FatFile7seekSetEm+0x6a>
   b5e8a:	e7d2      	b.n	b5e32 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b5e8c:	1af6      	subs	r6, r6, r3
   b5e8e:	e7ef      	b.n	b5e70 <_ZN7FatFile7seekSetEm+0x66>

000b5e90 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b5e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e92:	460f      	mov	r7, r1
   b5e94:	4604      	mov	r4, r0
   b5e96:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b5e98:	2100      	movs	r1, #0
   b5e9a:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b5e9c:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b5e9e:	f002 ff9d 	bl	b8ddc <memset>
  m_vol = dirFile->m_vol;
   b5ea2:	68b8      	ldr	r0, [r7, #8]
   b5ea4:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b5ea6:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b5ea8:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b5eac:	6a3b      	ldr	r3, [r7, #32]
   b5eae:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b5eb0:	016a      	lsls	r2, r5, #5
   b5eb2:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b5eb6:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5eba:	071f      	lsls	r7, r3, #28
   b5ebc:	d444      	bmi.n	b5f48 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b5ebe:	f003 0317 	and.w	r3, r3, #23
   b5ec2:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b5ec4:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b5ec8:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b5ecc:	bf04      	itt	eq
   b5ece:	f043 0308 	orreq.w	r3, r3, #8
   b5ed2:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b5ed4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b5ed8:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b5eda:	f006 0303 	and.w	r3, r6, #3
   b5ede:	2b01      	cmp	r3, #1
   b5ee0:	d02c      	beq.n	b5f3c <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b5ee2:	2b02      	cmp	r3, #2
   b5ee4:	d028      	beq.n	b5f38 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b5ee6:	bb7b      	cbnz	r3, b5f48 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b5ee8:	0571      	lsls	r1, r6, #21
   b5eea:	d42d      	bmi.n	b5f48 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b5eec:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b5eee:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b5ef0:	78a1      	ldrb	r1, [r4, #2]
   b5ef2:	078b      	lsls	r3, r1, #30
   b5ef4:	d504      	bpl.n	b5f00 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b5ef6:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b5ef8:	06df      	lsls	r7, r3, #27
   b5efa:	d425      	bmi.n	b5f48 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b5efc:	07dd      	lsls	r5, r3, #31
   b5efe:	d423      	bmi.n	b5f48 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b5f00:	11b3      	asrs	r3, r6, #6
   b5f02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b5f06:	f006 0508 	and.w	r5, r6, #8
   b5f0a:	432b      	orrs	r3, r5
   b5f0c:	430b      	orrs	r3, r1
   b5f0e:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b5f10:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b5f12:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5f14:	1883      	adds	r3, r0, r2
   b5f16:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b5f1a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5f1e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b5f22:	0572      	lsls	r2, r6, #21
   b5f24:	d513      	bpl.n	b5f4e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5f26:	b959      	cbnz	r1, b5f40 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b5f28:	78a3      	ldrb	r3, [r4, #2]
   b5f2a:	f043 0304 	orr.w	r3, r3, #4
   b5f2e:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5f30:	0473      	lsls	r3, r6, #17
   b5f32:	d410      	bmi.n	b5f56 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b5f34:	2001      	movs	r0, #1
}
   b5f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b5f38:	2303      	movs	r3, #3
   b5f3a:	e7d8      	b.n	b5eee <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b5f3c:	2302      	movs	r3, #2
   b5f3e:	e7d6      	b.n	b5eee <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5f40:	f000 fd71 	bl	b6a26 <_ZN9FatVolume9freeChainEm>
   b5f44:	2800      	cmp	r0, #0
   b5f46:	d1ef      	bne.n	b5f28 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b5f48:	2000      	movs	r0, #0
   b5f4a:	7020      	strb	r0, [r4, #0]
  return false;
   b5f4c:	e7f3      	b.n	b5f36 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b5f4e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b5f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5f52:	61e3      	str	r3, [r4, #28]
   b5f54:	e7ec      	b.n	b5f30 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5f56:	69e1      	ldr	r1, [r4, #28]
   b5f58:	4620      	mov	r0, r4
   b5f5a:	f7ff ff56 	bl	b5e0a <_ZN7FatFile7seekSetEm>
   b5f5e:	2800      	cmp	r0, #0
   b5f60:	d1e8      	bne.n	b5f34 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b5f62:	e7f1      	b.n	b5f48 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b5f64 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b5f64:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b5f66:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b5f68:	4604      	mov	r4, r0
  if (!isOpen()) {
   b5f6a:	b90b      	cbnz	r3, b5f70 <_ZN7FatFile4syncEv+0xc>
    return true;
   b5f6c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b5f6e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b5f70:	7883      	ldrb	r3, [r0, #2]
   b5f72:	075a      	lsls	r2, r3, #29
   b5f74:	d523      	bpl.n	b5fbe <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b5f76:	2101      	movs	r1, #1
   b5f78:	f7ff fe52 	bl	b5c20 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5f7c:	4605      	mov	r5, r0
   b5f7e:	b928      	cbnz	r0, b5f8c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b5f80:	7863      	ldrb	r3, [r4, #1]
   b5f82:	f043 0301 	orr.w	r3, r3, #1
   b5f86:	7063      	strb	r3, [r4, #1]
  return false;
   b5f88:	2000      	movs	r0, #0
   b5f8a:	e7f0      	b.n	b5f6e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5f8c:	7803      	ldrb	r3, [r0, #0]
   b5f8e:	2be5      	cmp	r3, #229	; 0xe5
   b5f90:	d0f6      	beq.n	b5f80 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b5f92:	7823      	ldrb	r3, [r4, #0]
   b5f94:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b5f96:	bf44      	itt	mi
   b5f98:	69e3      	ldrmi	r3, [r4, #28]
   b5f9a:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b5f9c:	6a23      	ldr	r3, [r4, #32]
   b5f9e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b5fa0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b5fa2:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b5fa4:	4b09      	ldr	r3, [pc, #36]	; (b5fcc <_ZN7FatFile4syncEv+0x68>)
   b5fa6:	681b      	ldr	r3, [r3, #0]
   b5fa8:	b12b      	cbz	r3, b5fb6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b5faa:	f100 0116 	add.w	r1, r0, #22
   b5fae:	3018      	adds	r0, #24
   b5fb0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b5fb2:	8b2b      	ldrh	r3, [r5, #24]
   b5fb4:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b5fb6:	78a3      	ldrb	r3, [r4, #2]
   b5fb8:	f023 0304 	bic.w	r3, r3, #4
   b5fbc:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b5fbe:	68a0      	ldr	r0, [r4, #8]
   b5fc0:	f7ff fdd9 	bl	b5b76 <_ZN9FatVolume9cacheSyncEv>
   b5fc4:	2800      	cmp	r0, #0
   b5fc6:	d0db      	beq.n	b5f80 <_ZN7FatFile4syncEv+0x1c>
   b5fc8:	e7d0      	b.n	b5f6c <_ZN7FatFile4syncEv+0x8>
   b5fca:	bf00      	nop
   b5fcc:	2003e6b4 	.word	0x2003e6b4

000b5fd0 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b5fd0:	b510      	push	{r4, lr}
   b5fd2:	4604      	mov	r4, r0
  bool rtn = sync();
   b5fd4:	f7ff ffc6 	bl	b5f64 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b5fd8:	2300      	movs	r3, #0
   b5fda:	7023      	strb	r3, [r4, #0]
}
   b5fdc:	bd10      	pop	{r4, pc}

000b5fde <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b5fde:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5fe0:	b093      	sub	sp, #76	; 0x4c
   b5fe2:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5fe4:	2300      	movs	r3, #0
   b5fe6:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b5fe8:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b5fea:	9201      	str	r2, [sp, #4]
   b5fec:	4606      	mov	r6, r0
   b5fee:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b5ff0:	b113      	cbz	r3, b5ff8 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b5ff2:	2000      	movs	r0, #0
}
   b5ff4:	b013      	add	sp, #76	; 0x4c
   b5ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b5ff8:	780b      	ldrb	r3, [r1, #0]
   b5ffa:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5ffe:	d0f8      	beq.n	b5ff2 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b6000:	7813      	ldrb	r3, [r2, #0]
   b6002:	2b2f      	cmp	r3, #47	; 0x2f
   b6004:	d112      	bne.n	b602c <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b6006:	9a01      	ldr	r2, [sp, #4]
   b6008:	7813      	ldrb	r3, [r2, #0]
   b600a:	2b2f      	cmp	r3, #47	; 0x2f
   b600c:	d102      	bne.n	b6014 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b600e:	3201      	adds	r2, #1
   b6010:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b6012:	e7f8      	b.n	b6006 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b6014:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b6016:	b91b      	cbnz	r3, b6020 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b6018:	4630      	mov	r0, r6
   b601a:	f7ff fe10 	bl	b5c3e <_ZN7FatFile8openRootEP9FatVolume>
   b601e:	e7e9      	b.n	b5ff4 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b6020:	a809      	add	r0, sp, #36	; 0x24
   b6022:	f7ff fd92 	bl	b5b4a <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b6026:	2800      	cmp	r0, #0
   b6028:	d0e3      	beq.n	b5ff2 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b602a:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b602c:	9801      	ldr	r0, [sp, #4]
   b602e:	aa01      	add	r2, sp, #4
   b6030:	a903      	add	r1, sp, #12
   b6032:	f000 f90b 	bl	b624c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b6036:	2800      	cmp	r0, #0
   b6038:	d0db      	beq.n	b5ff2 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b603a:	9b01      	ldr	r3, [sp, #4]
   b603c:	781b      	ldrb	r3, [r3, #0]
   b603e:	b19b      	cbz	r3, b6068 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b6040:	2300      	movs	r3, #0
   b6042:	aa03      	add	r2, sp, #12
   b6044:	4621      	mov	r1, r4
   b6046:	4630      	mov	r0, r6
   b6048:	f000 fa32 	bl	b64b0 <_ZN7FatFile4openEPS_P7fname_ti>
   b604c:	2800      	cmp	r0, #0
   b604e:	d0d0      	beq.n	b5ff2 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b6050:	4635      	mov	r5, r6
   b6052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6054:	ac09      	add	r4, sp, #36	; 0x24
   b6056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b605a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b605c:	682b      	ldr	r3, [r5, #0]
   b605e:	6023      	str	r3, [r4, #0]
    close();
   b6060:	4630      	mov	r0, r6
   b6062:	f7ff ffb5 	bl	b5fd0 <_ZN7FatFile5closeEv>
  while (1) {
   b6066:	e7e0      	b.n	b602a <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b6068:	463b      	mov	r3, r7
   b606a:	aa03      	add	r2, sp, #12
   b606c:	4621      	mov	r1, r4
   b606e:	4630      	mov	r0, r6
   b6070:	f000 fa1e 	bl	b64b0 <_ZN7FatFile4openEPS_P7fname_ti>
   b6074:	e7be      	b.n	b5ff4 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b6078 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b6078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b607c:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b607e:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6080:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b6082:	4604      	mov	r4, r0
   b6084:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6086:	d55b      	bpl.n	b6140 <_ZN7FatFile5writeEPKvj+0xc8>
   b6088:	7883      	ldrb	r3, [r0, #2]
   b608a:	079a      	lsls	r2, r3, #30
   b608c:	d558      	bpl.n	b6140 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b608e:	071b      	lsls	r3, r3, #28
   b6090:	d451      	bmi.n	b6136 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b6092:	6963      	ldr	r3, [r4, #20]
   b6094:	43db      	mvns	r3, r3
   b6096:	42bb      	cmp	r3, r7
   b6098:	d352      	bcc.n	b6140 <_ZN7FatFile5writeEPKvj+0xc8>
   b609a:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b609c:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b60a0:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b60a2:	f1b8 0f00 	cmp.w	r8, #0
   b60a6:	f000 8091 	beq.w	b61cc <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b60aa:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b60ac:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b60ae:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b60b2:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b60b6:	d10e      	bne.n	b60d6 <_ZN7FatFile5writeEPKvj+0x5e>
   b60b8:	b96d      	cbnz	r5, b60d6 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b60ba:	6921      	ldr	r1, [r4, #16]
   b60bc:	2900      	cmp	r1, #0
   b60be:	d046      	beq.n	b614e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b60c0:	4652      	mov	r2, sl
   b60c2:	f000 fc10 	bl	b68e6 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b60c6:	2800      	cmp	r0, #0
   b60c8:	db3a      	blt.n	b6140 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b60ca:	d104      	bne.n	b60d6 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b60cc:	4620      	mov	r0, r4
   b60ce:	f7ff fd5f 	bl	b5b90 <_ZN7FatFile10addClusterEv>
   b60d2:	2800      	cmp	r0, #0
   b60d4:	d034      	beq.n	b6140 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b60d6:	6921      	ldr	r1, [r4, #16]
   b60d8:	68a0      	ldr	r0, [r4, #8]
   b60da:	f000 fbfe 	bl	b68da <_ZNK9FatVolume17clusterFirstBlockEm>
   b60de:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b60e0:	68a0      	ldr	r0, [r4, #8]
   b60e2:	b915      	cbnz	r5, b60ea <_ZN7FatFile5writeEPKvj+0x72>
   b60e4:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b60e8:	d23f      	bcs.n	b616a <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b60ea:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b60ee:	4546      	cmp	r6, r8
   b60f0:	bf28      	it	cs
   b60f2:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b60f4:	2d00      	cmp	r5, #0
   b60f6:	d136      	bne.n	b6166 <_ZN7FatFile5writeEPKvj+0xee>
   b60f8:	6962      	ldr	r2, [r4, #20]
   b60fa:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b60fc:	429a      	cmp	r2, r3
   b60fe:	bf34      	ite	cc
   b6100:	2201      	movcc	r2, #1
   b6102:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b6104:	3024      	adds	r0, #36	; 0x24
   b6106:	f000 fbc5 	bl	b6894 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b610a:	b1c8      	cbz	r0, b6140 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b610c:	4428      	add	r0, r5
   b610e:	4632      	mov	r2, r6
   b6110:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b6112:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b6114:	f002 fe54 	bl	b8dc0 <memcpy>
      if (512 == (n + blockOffset)) {
   b6118:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b611c:	d104      	bne.n	b6128 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b611e:	68a0      	ldr	r0, [r4, #8]
   b6120:	3024      	adds	r0, #36	; 0x24
   b6122:	f000 fb8f 	bl	b6844 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b6126:	b158      	cbz	r0, b6140 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b6128:	6963      	ldr	r3, [r4, #20]
   b612a:	4433      	add	r3, r6
   b612c:	6163      	str	r3, [r4, #20]
    src += n;
   b612e:	44b1      	add	r9, r6
    nToWrite -= n;
   b6130:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b6134:	e7b4      	b.n	b60a0 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b6136:	69c1      	ldr	r1, [r0, #28]
   b6138:	f7ff fe67 	bl	b5e0a <_ZN7FatFile7seekSetEm>
   b613c:	2800      	cmp	r0, #0
   b613e:	d1a8      	bne.n	b6092 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b6140:	7863      	ldrb	r3, [r4, #1]
   b6142:	f043 0301 	orr.w	r3, r3, #1
   b6146:	7063      	strb	r3, [r4, #1]
  return -1;
   b6148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b614c:	e050      	b.n	b61f0 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b614e:	6a23      	ldr	r3, [r4, #32]
   b6150:	b93b      	cbnz	r3, b6162 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b6152:	4620      	mov	r0, r4
   b6154:	f7ff fd1c 	bl	b5b90 <_ZN7FatFile10addClusterEv>
   b6158:	2800      	cmp	r0, #0
   b615a:	d0f1      	beq.n	b6140 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b615c:	6923      	ldr	r3, [r4, #16]
   b615e:	6223      	str	r3, [r4, #32]
   b6160:	e7b9      	b.n	b60d6 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b6162:	6123      	str	r3, [r4, #16]
   b6164:	e7b7      	b.n	b60d6 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b6166:	2201      	movs	r2, #1
   b6168:	e7cc      	b.n	b6104 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b616a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b616e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b6170:	d31b      	bcc.n	b61aa <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b6172:	f890 c004 	ldrb.w	ip, [r0, #4]
   b6176:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b617a:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b617c:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b6180:	4573      	cmp	r3, lr
   b6182:	bf28      	it	cs
   b6184:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b6186:	4291      	cmp	r1, r2
      n = 512*nb;
   b6188:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b618c:	d307      	bcc.n	b619e <_ZN7FatFile5writeEPKvj+0x126>
   b618e:	441a      	add	r2, r3
   b6190:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b6192:	bf82      	ittt	hi
   b6194:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b6198:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b619c:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b619e:	68a5      	ldr	r5, [r4, #8]
   b61a0:	464a      	mov	r2, r9
   b61a2:	6828      	ldr	r0, [r5, #0]
   b61a4:	f000 ff59 	bl	b705a <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b61a8:	e7bd      	b.n	b6126 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b61aa:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b61ac:	bf02      	ittt	eq
   b61ae:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b61b2:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b61b6:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b61b8:	68a3      	ldr	r3, [r4, #8]
   b61ba:	464a      	mov	r2, r9
   b61bc:	6818      	ldr	r0, [r3, #0]
   b61be:	f000 fed6 	bl	b6f6e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b61c2:	2800      	cmp	r0, #0
   b61c4:	d0bc      	beq.n	b6140 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b61c6:	f44f 7600 	mov.w	r6, #512	; 0x200
   b61ca:	e7ad      	b.n	b6128 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b61cc:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b61ce:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b61d0:	42b2      	cmp	r2, r6
   b61d2:	d204      	bcs.n	b61de <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b61d4:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b61d6:	f043 0304 	orr.w	r3, r3, #4
   b61da:	70a3      	strb	r3, [r4, #2]
   b61dc:	e003      	b.n	b61e6 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b61de:	4a08      	ldr	r2, [pc, #32]	; (b6200 <_ZN7FatFile5writeEPKvj+0x188>)
   b61e0:	6812      	ldr	r2, [r2, #0]
   b61e2:	2a00      	cmp	r2, #0
   b61e4:	d1f7      	bne.n	b61d6 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b61e6:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b61ea:	2b00      	cmp	r3, #0
   b61ec:	db02      	blt.n	b61f4 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b61ee:	4638      	mov	r0, r7
}
   b61f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b61f4:	4620      	mov	r0, r4
   b61f6:	f7ff feb5 	bl	b5f64 <_ZN7FatFile4syncEv>
   b61fa:	2800      	cmp	r0, #0
   b61fc:	d1f7      	bne.n	b61ee <_ZN7FatFile5writeEPKvj+0x176>
   b61fe:	e79f      	b.n	b6140 <_ZN7FatFile5writeEPKvj+0xc8>
   b6200:	2003e6b4 	.word	0x2003e6b4

000b6204 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b6204:	2904      	cmp	r1, #4
   b6206:	d804      	bhi.n	b6212 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6208:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b620c:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6210:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6212:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6214:	bf9b      	ittet	ls
   b6216:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b621a:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b621e:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6220:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6222:	bf84      	itt	hi
   b6224:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6228:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b622a:	4770      	bx	lr

000b622c <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b622c:	1e41      	subs	r1, r0, #1
   b622e:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6232:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6234:	0842      	lsrs	r2, r0, #1
   b6236:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b623a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b623e:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6242:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6244:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6246:	d1f5      	bne.n	b6234 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b6248:	4770      	bx	lr
	...

000b624c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b624c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6250:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b6252:	f810 3b01 	ldrb.w	r3, [r0], #1
   b6256:	2b20      	cmp	r3, #32
   b6258:	d0fa      	beq.n	b6250 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b625a:	4d6a      	ldr	r5, [pc, #424]	; (b6404 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b625c:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b625e:	2400      	movs	r4, #0
    c = path[len];
   b6260:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b6262:	b1c3      	cbz	r3, b6296 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b6264:	2b2f      	cmp	r3, #47	; 0x2f
   b6266:	d016      	beq.n	b6296 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6268:	2b5c      	cmp	r3, #92	; 0x5c
   b626a:	d102      	bne.n	b6272 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b626c:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b626e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b6272:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b6276:	b2c0      	uxtb	r0, r0
   b6278:	281d      	cmp	r0, #29
   b627a:	d803      	bhi.n	b6284 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b627c:	fa25 f000 	lsr.w	r0, r5, r0
   b6280:	07c0      	lsls	r0, r0, #31
   b6282:	d4f3      	bmi.n	b626c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b6284:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b6288:	283c      	cmp	r0, #60	; 0x3c
   b628a:	d0ef      	beq.n	b626c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b628c:	3b20      	subs	r3, #32
   b628e:	2b5e      	cmp	r3, #94	; 0x5e
   b6290:	d8ec      	bhi.n	b626c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b6292:	3401      	adds	r4, #1
    c = path[len];
   b6294:	e7e4      	b.n	b6260 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b6296:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b6298:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b629a:	4607      	mov	r7, r0
   b629c:	f810 5b01 	ldrb.w	r5, [r0], #1
   b62a0:	2d20      	cmp	r5, #32
   b62a2:	d0fa      	beq.n	b629a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b62a4:	2d2f      	cmp	r5, #47	; 0x2f
   b62a6:	d0f8      	beq.n	b629a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b62a8:	6017      	str	r7, [r2, #0]
  while (len) {
   b62aa:	b14c      	cbz	r4, b62c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b62ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b62b0:	2a2e      	cmp	r2, #46	; 0x2e
   b62b2:	d001      	beq.n	b62b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b62b4:	2a20      	cmp	r2, #32
   b62b6:	d101      	bne.n	b62bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b62b8:	3c01      	subs	r4, #1
  while (len) {
   b62ba:	e7f6      	b.n	b62aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b62bc:	2cff      	cmp	r4, #255	; 0xff
   b62be:	dcd5      	bgt.n	b626c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b62c0:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b62c4:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b62c8:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b62ca:	f8c1 300d 	str.w	r3, [r1, #13]
   b62ce:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b62d0:	f04f 0800 	mov.w	r8, #0
   b62d4:	f816 3008 	ldrb.w	r3, [r6, r8]
   b62d8:	2b2e      	cmp	r3, #46	; 0x2e
   b62da:	d001      	beq.n	b62e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b62dc:	2b20      	cmp	r3, #32
   b62de:	d102      	bne.n	b62e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b62e0:	f108 0801 	add.w	r8, r8, #1
   b62e4:	e7f6      	b.n	b62d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b62e6:	fab8 f088 	clz	r0, r8
   b62ea:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b62ec:	1e65      	subs	r5, r4, #1
   b62ee:	1c6b      	adds	r3, r5, #1
   b62f0:	d002      	beq.n	b62f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b62f2:	5d73      	ldrb	r3, [r6, r5]
   b62f4:	2b2e      	cmp	r3, #46	; 0x2e
   b62f6:	d114      	bne.n	b6322 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b62f8:	f04f 0900 	mov.w	r9, #0
   b62fc:	2707      	movs	r7, #7
   b62fe:	464a      	mov	r2, r9
   b6300:	46ca      	mov	sl, r9
   b6302:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6306:	45a0      	cmp	r8, r4
   b6308:	da68      	bge.n	b63dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b630a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b630e:	2b20      	cmp	r3, #32
   b6310:	d003      	beq.n	b631a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6312:	2b2e      	cmp	r3, #46	; 0x2e
   b6314:	d107      	bne.n	b6326 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6316:	45a8      	cmp	r8, r5
   b6318:	d012      	beq.n	b6340 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b631a:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b631c:	f108 0801 	add.w	r8, r8, #1
   b6320:	e7f1      	b.n	b6306 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6322:	3d01      	subs	r5, #1
   b6324:	e7e3      	b.n	b62ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6326:	2b22      	cmp	r3, #34	; 0x22
   b6328:	d008      	beq.n	b633c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b632a:	2b7c      	cmp	r3, #124	; 0x7c
   b632c:	d006      	beq.n	b633c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b632e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6332:	f1bc 0f05 	cmp.w	ip, #5
   b6336:	d80a      	bhi.n	b634e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6338:	2b2d      	cmp	r3, #45	; 0x2d
   b633a:	d012      	beq.n	b6362 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b633c:	45a8      	cmp	r8, r5
   b633e:	d15b      	bne.n	b63f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6340:	2f0a      	cmp	r7, #10
   b6342:	d04a      	beq.n	b63da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6344:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6346:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6348:	f04f 0e10 	mov.w	lr, #16
   b634c:	e7e6      	b.n	b631c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b634e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b6352:	f1bc 0f05 	cmp.w	ip, #5
   b6356:	d9f1      	bls.n	b633c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b6358:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b635c:	f1bc 0f02 	cmp.w	ip, #2
   b6360:	d9ec      	bls.n	b633c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b6362:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b6366:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b636a:	d8e7      	bhi.n	b633c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b636c:	45a8      	cmp	r8, r5
   b636e:	d0e7      	beq.n	b6340 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b6370:	42ba      	cmp	r2, r7
   b6372:	d830      	bhi.n	b63d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b6374:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b6378:	f1bc 0f19 	cmp.w	ip, #25
   b637c:	d81a      	bhi.n	b63b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b637e:	3b20      	subs	r3, #32
        lc |= bit;
   b6380:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b6384:	b2db      	uxtb	r3, r3
        lc |= bit;
   b6386:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b638a:	f102 0c01 	add.w	ip, r2, #1
   b638e:	fa5f fc8c 	uxtb.w	ip, ip
   b6392:	440a      	add	r2, r1
      if (i < 7) {
   b6394:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b6398:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b639a:	d801      	bhi.n	b63a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b639c:	f881 c00c 	strb.w	ip, [r1, #12]
   b63a0:	4662      	mov	r2, ip
   b63a2:	e7bb      	b.n	b631c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b63a4:	45a8      	cmp	r8, r5
   b63a6:	dc18      	bgt.n	b63da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b63a8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b63aa:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b63ac:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b63ae:	f04f 0e10 	mov.w	lr, #16
   b63b2:	e7b2      	b.n	b631a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b63b4:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b63b8:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b63bc:	bf98      	it	ls
   b63be:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b63c2:	e7e2      	b.n	b638a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b63c4:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b63c6:	2001      	movs	r0, #1
   b63c8:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b63ca:	4419      	add	r1, r3
   b63cc:	237e      	movs	r3, #126	; 0x7e
   b63ce:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b63d0:	2331      	movs	r3, #49	; 0x31
   b63d2:	738b      	strb	r3, [r1, #14]
   b63d4:	e74b      	b.n	b626e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b63d6:	2f0a      	cmp	r7, #10
   b63d8:	d1e4      	bne.n	b63a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b63da:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b63dc:	7b4b      	ldrb	r3, [r1, #13]
   b63de:	2b20      	cmp	r3, #32
   b63e0:	f43f af44 	beq.w	b626c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b63e4:	2800      	cmp	r0, #0
   b63e6:	d0ed      	beq.n	b63c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b63e8:	ea1a 0f09 	tst.w	sl, r9
   b63ec:	bf18      	it	ne
   b63ee:	f04f 0902 	movne.w	r9, #2
   b63f2:	f881 9000 	strb.w	r9, [r1]
   b63f6:	e73a      	b.n	b626e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b63f8:	42ba      	cmp	r2, r7
   b63fa:	d8ec      	bhi.n	b63d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b63fc:	2000      	movs	r0, #0
      c = '_';
   b63fe:	235f      	movs	r3, #95	; 0x5f
   b6400:	e7c3      	b.n	b638a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6402:	bf00      	nop
   b6404:	31000101 	.word	0x31000101

000b6408 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b640c:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6410:	4606      	mov	r6, r0
   b6412:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6414:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6416:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6418:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b641c:	6861      	ldr	r1, [r4, #4]
   b641e:	68a2      	ldr	r2, [r4, #8]
   b6420:	186b      	adds	r3, r5, r1
   b6422:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6424:	4411      	add	r1, r2
   b6426:	4291      	cmp	r1, r2
   b6428:	d006      	beq.n	b6438 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b642a:	f812 0b01 	ldrb.w	r0, [r2], #1
   b642e:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6432:	4043      	eors	r3, r0
   b6434:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6436:	e7f6      	b.n	b6426 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6438:	f1b9 0f03 	cmp.w	r9, #3
   b643c:	bf28      	it	cs
   b643e:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6442:	f109 0204 	add.w	r2, r9, #4
   b6446:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6448:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b644c:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b644e:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6450:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6452:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6454:	bf94      	ite	ls
   b6456:	3130      	addls	r1, #48	; 0x30
   b6458:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b645a:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b645c:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b645e:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6462:	d1f1      	bne.n	b6448 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6464:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6468:	2100      	movs	r1, #0
   b646a:	735f      	strb	r7, [r3, #13]
   b646c:	4630      	mov	r0, r6
   b646e:	f7ff fccc 	bl	b5e0a <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6472:	2101      	movs	r1, #1
   b6474:	4630      	mov	r0, r6
   b6476:	f7ff fca9 	bl	b5dcc <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b647a:	4601      	mov	r1, r0
   b647c:	b928      	cbnz	r0, b648a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b647e:	7870      	ldrb	r0, [r6, #1]
   b6480:	fab0 f080 	clz	r0, r0
   b6484:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b6486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b648a:	7803      	ldrb	r3, [r0, #0]
   b648c:	b16b      	cbz	r3, b64aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b648e:	7ac3      	ldrb	r3, [r0, #11]
   b6490:	071b      	lsls	r3, r3, #28
   b6492:	d4ee      	bmi.n	b6472 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6494:	220b      	movs	r2, #11
   b6496:	4640      	mov	r0, r8
   b6498:	f002 fc82 	bl	b8da0 <memcmp>
   b649c:	2800      	cmp	r0, #0
   b649e:	d1e8      	bne.n	b6472 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b64a0:	3501      	adds	r5, #1
   b64a2:	b2ad      	uxth	r5, r5
   b64a4:	2d64      	cmp	r5, #100	; 0x64
   b64a6:	d1b9      	bne.n	b641c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b64a8:	e7ed      	b.n	b6486 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b64aa:	2001      	movs	r0, #1
   b64ac:	e7eb      	b.n	b6486 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b64b0 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b64b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b64b4:	ed2d 8b02 	vpush	{d8}
   b64b8:	b08b      	sub	sp, #44	; 0x2c
   b64ba:	460d      	mov	r5, r1
   b64bc:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b64be:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b64c0:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b64c2:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b64c6:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b64c8:	d105      	bne.n	b64d6 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b64ca:	2000      	movs	r0, #0
}
   b64cc:	b00b      	add	sp, #44	; 0x2c
   b64ce:	ecbd 8b02 	vpop	{d8}
   b64d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b64d6:	9b07      	ldr	r3, [sp, #28]
   b64d8:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b64da:	2b00      	cmp	r3, #0
   b64dc:	d1f5      	bne.n	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b64de:	6853      	ldr	r3, [r2, #4]
   b64e0:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b64e2:	7813      	ldrb	r3, [r2, #0]
   b64e4:	079c      	lsls	r4, r3, #30
   b64e6:	bf1f      	itttt	ne
   b64e8:	9b05      	ldrne	r3, [sp, #20]
   b64ea:	330c      	addne	r3, #12
   b64ec:	220d      	movne	r2, #13
   b64ee:	fbb3 f3f2 	udivne	r3, r3, r2
   b64f2:	bf1a      	itte	ne
   b64f4:	3301      	addne	r3, #1
   b64f6:	b2db      	uxtbne	r3, r3
   b64f8:	2301      	moveq	r3, #1
    seekSet(0);
   b64fa:	2100      	movs	r1, #0
   b64fc:	4628      	mov	r0, r5
   b64fe:	9303      	str	r3, [sp, #12]
   b6500:	f7ff fc83 	bl	b5e0a <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6504:	f107 030d 	add.w	r3, r7, #13
  }
   b6508:	f04f 0b00 	mov.w	fp, #0
   b650c:	ee08 3a10 	vmov	s16, r3
   b6510:	46da      	mov	sl, fp
   b6512:	465c      	mov	r4, fp
   b6514:	465e      	mov	r6, fp
   b6516:	f8cd b010 	str.w	fp, [sp, #16]
   b651a:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b651c:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b651e:	2101      	movs	r1, #1
   b6520:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b6522:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6526:	f7ff fc51 	bl	b5dcc <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b652a:	4603      	mov	r3, r0
   b652c:	2800      	cmp	r0, #0
   b652e:	d171      	bne.n	b6614 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6530:	786b      	ldrb	r3, [r5, #1]
   b6532:	2b00      	cmp	r3, #0
   b6534:	d1c9      	bne.n	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6536:	9b06      	ldr	r3, [sp, #24]
   b6538:	059a      	lsls	r2, r3, #22
   b653a:	d5c6      	bpl.n	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b653c:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6540:	3b01      	subs	r3, #1
   b6542:	2b01      	cmp	r3, #1
   b6544:	d8c1      	bhi.n	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6546:	9b04      	ldr	r3, [sp, #16]
   b6548:	2c00      	cmp	r4, #0
   b654a:	bf08      	it	eq
   b654c:	4643      	moveq	r3, r8
   b654e:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6550:	9b03      	ldr	r3, [sp, #12]
   b6552:	429c      	cmp	r4, r3
   b6554:	f0c0 80f1 	bcc.w	b673a <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6558:	f1b9 0f00 	cmp.w	r9, #0
   b655c:	f040 810a 	bne.w	b6774 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6560:	9b04      	ldr	r3, [sp, #16]
   b6562:	4628      	mov	r0, r5
   b6564:	0159      	lsls	r1, r3, #5
   b6566:	f7ff fc50 	bl	b5e0a <_ZN7FatFile7seekSetEm>
   b656a:	2800      	cmp	r0, #0
   b656c:	d0ad      	beq.n	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b656e:	9b03      	ldr	r3, [sp, #12]
   b6570:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b6574:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6578:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b657a:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b657e:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6582:	2e00      	cmp	r6, #0
   b6584:	f000 810d 	beq.w	b67a2 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6588:	2100      	movs	r1, #0
   b658a:	4628      	mov	r0, r5
   b658c:	f7ff fc1e 	bl	b5dcc <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6590:	4604      	mov	r4, r0
   b6592:	2800      	cmp	r0, #0
   b6594:	d099      	beq.n	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6596:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6598:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b659c:	454e      	cmp	r6, r9
   b659e:	f043 0301 	orr.w	r3, r3, #1
   b65a2:	bf0c      	ite	eq
   b65a4:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b65a8:	46b3      	movne	fp, r6
   b65aa:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b65ae:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b65b2:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b65b6:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b65ba:	f107 000d 	add.w	r0, r7, #13
   b65be:	f7ff fe35 	bl	b622c <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b65c2:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b65c6:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b65c8:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b65cc:	f00b 031f 	and.w	r3, fp, #31
   b65d0:	220d      	movs	r2, #13
   b65d2:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b65d4:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b65d8:	4353      	muls	r3, r2
   b65da:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b65dc:	9905      	ldr	r1, [sp, #20]
   b65de:	4299      	cmp	r1, r3
   b65e0:	f240 80d0 	bls.w	b6784 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b65e4:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b65e8:	2a04      	cmp	r2, #4
   b65ea:	fa5f fe82 	uxtb.w	lr, r2
   b65ee:	f102 0001 	add.w	r0, r2, #1
   b65f2:	f200 80cd 	bhi.w	b6790 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b65f6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b65fa:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b65fe:	280d      	cmp	r0, #13
   b6600:	f103 0301 	add.w	r3, r3, #1
   b6604:	4602      	mov	r2, r0
   b6606:	d1e9      	bne.n	b65dc <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6608:	3e01      	subs	r6, #1
   b660a:	b2f6      	uxtb	r6, r6
   b660c:	e7b9      	b.n	b6582 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b660e:	f04f 0901 	mov.w	r9, #1
   b6612:	e783      	b.n	b651c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6614:	7802      	ldrb	r2, [r0, #0]
   b6616:	2ae5      	cmp	r2, #229	; 0xe5
   b6618:	d000      	beq.n	b661c <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b661a:	b97a      	cbnz	r2, b663c <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b661c:	9904      	ldr	r1, [sp, #16]
   b661e:	2c00      	cmp	r4, #0
   b6620:	bf08      	it	eq
   b6622:	4641      	moveq	r1, r8
   b6624:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6626:	9903      	ldr	r1, [sp, #12]
   b6628:	428c      	cmp	r4, r1
        freeFound++;
   b662a:	bf3c      	itt	cc
   b662c:	3401      	addcc	r4, #1
   b662e:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6630:	2a00      	cmp	r2, #0
   b6632:	d080      	beq.n	b6536 <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6634:	2ae5      	cmp	r2, #229	; 0xe5
   b6636:	d105      	bne.n	b6644 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6638:	2600      	movs	r6, #0
   b663a:	e76f      	b.n	b651c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b663c:	9903      	ldr	r1, [sp, #12]
   b663e:	428c      	cmp	r4, r1
   b6640:	bf38      	it	cc
   b6642:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6644:	2a2e      	cmp	r2, #46	; 0x2e
   b6646:	d0f7      	beq.n	b6638 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6648:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b664a:	290f      	cmp	r1, #15
   b664c:	d14a      	bne.n	b66e4 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b664e:	bb16      	cbnz	r6, b6696 <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6650:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6654:	f43f af62 	beq.w	b651c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6658:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b665c:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6660:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6662:	220d      	movs	r2, #13
   b6664:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b6668:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b666c:	9a05      	ldr	r2, [sp, #20]
   b666e:	4542      	cmp	r2, r8
   b6670:	d9e2      	bls.n	b6638 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6672:	eba2 0208 	sub.w	r2, r2, r8
   b6676:	9208      	str	r2, [sp, #32]
   b6678:	2200      	movs	r2, #0
   b667a:	eb02 0108 	add.w	r1, r2, r8
   b667e:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6680:	4618      	mov	r0, r3
   b6682:	b2d1      	uxtb	r1, r2
   b6684:	f7ff fdbe 	bl	b6204 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6688:	9908      	ldr	r1, [sp, #32]
   b668a:	428a      	cmp	r2, r1
   b668c:	d10d      	bne.n	b66aa <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b668e:	2800      	cmp	r0, #0
   b6690:	bf18      	it	ne
   b6692:	2600      	movne	r6, #0
   b6694:	e742      	b.n	b651c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6696:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b669a:	fa5f fa8a 	uxtb.w	sl, sl
   b669e:	4552      	cmp	r2, sl
   b66a0:	d1ca      	bne.n	b6638 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b66a2:	7b5a      	ldrb	r2, [r3, #13]
   b66a4:	455a      	cmp	r2, fp
   b66a6:	d0dc      	beq.n	b6662 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b66a8:	e7c6      	b.n	b6638 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b66aa:	28ff      	cmp	r0, #255	; 0xff
   b66ac:	d8c4      	bhi.n	b6638 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b66ae:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b66b2:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b66b6:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b66b8:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b66ba:	bf9c      	itt	ls
   b66bc:	f10e 0020 	addls.w	r0, lr, #32
   b66c0:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b66c4:	4608      	mov	r0, r1
   b66c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   b66c8:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b66ca:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b66ce:	f1bc 0f19 	cmp.w	ip, #25
   b66d2:	bf9c      	itt	ls
   b66d4:	3120      	addls	r1, #32
   b66d6:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b66d8:	4571      	cmp	r1, lr
   b66da:	d1ad      	bne.n	b6638 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b66dc:	3201      	adds	r2, #1
   b66de:	2a0d      	cmp	r2, #13
   b66e0:	d1cb      	bne.n	b667a <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b66e2:	e71b      	b.n	b651c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b66e4:	0708      	lsls	r0, r1, #28
   b66e6:	d4a7      	bmi.n	b6638 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b66e8:	b15e      	cbz	r6, b6702 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b66ea:	f1ba 0f01 	cmp.w	sl, #1
   b66ee:	f47f aeec 	bne.w	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b66f2:	4618      	mov	r0, r3
   b66f4:	f7ff fd9a 	bl	b622c <_ZN7FatFile11lfnChecksumEPh>
   b66f8:	4558      	cmp	r0, fp
   b66fa:	f47f aee6 	bne.w	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b66fe:	46b1      	mov	r9, r6
   b6700:	e00e      	b.n	b6720 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6702:	ee18 1a10 	vmov	r1, s16
   b6706:	220b      	movs	r2, #11
   b6708:	4618      	mov	r0, r3
   b670a:	f002 fb49 	bl	b8da0 <memcmp>
   b670e:	2800      	cmp	r0, #0
   b6710:	f47f af04 	bne.w	b651c <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6714:	f897 9000 	ldrb.w	r9, [r7]
   b6718:	f019 0901 	ands.w	r9, r9, #1
   b671c:	f47f af77 	bne.w	b660e <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6720:	9b06      	ldr	r3, [sp, #24]
   b6722:	0519      	lsls	r1, r3, #20
   b6724:	f53f aed1 	bmi.w	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6728:	9b06      	ldr	r3, [sp, #24]
   b672a:	9807      	ldr	r0, [sp, #28]
   b672c:	f8cd 9000 	str.w	r9, [sp]
   b6730:	4642      	mov	r2, r8
   b6732:	4629      	mov	r1, r5
   b6734:	f7ff fbac 	bl	b5e90 <_ZN7FatFile15openCachedEntryEPS_tih>
   b6738:	e6c8      	b.n	b64cc <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b673a:	2100      	movs	r1, #0
   b673c:	4628      	mov	r0, r5
   b673e:	f7ff fb45 	bl	b5dcc <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6742:	b9a0      	cbnz	r0, b676e <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6744:	786b      	ldrb	r3, [r5, #1]
   b6746:	2b00      	cmp	r3, #0
   b6748:	f47f aebf 	bne.w	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b674c:	4628      	mov	r0, r5
   b674e:	f7ff fa29 	bl	b5ba4 <_ZN7FatFile13addDirClusterEv>
   b6752:	2800      	cmp	r0, #0
   b6754:	f43f aeb9 	beq.w	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b6758:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b675a:	791b      	ldrb	r3, [r3, #4]
   b675c:	2b01      	cmp	r3, #1
   b675e:	f63f aefb 	bhi.w	b6558 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6762:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6764:	3410      	adds	r4, #16
   b6766:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6768:	42a3      	cmp	r3, r4
   b676a:	d8ef      	bhi.n	b674c <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b676c:	e6f4      	b.n	b6558 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b676e:	3401      	adds	r4, #1
   b6770:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6772:	e6ed      	b.n	b6550 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6774:	4639      	mov	r1, r7
   b6776:	4628      	mov	r0, r5
   b6778:	f7ff fe46 	bl	b6408 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b677c:	2800      	cmp	r0, #0
   b677e:	f47f aeef 	bne.w	b6560 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b6782:	e6a2      	b.n	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6784:	bf14      	ite	ne
   b6786:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b678a:	2100      	moveq	r1, #0
   b678c:	b289      	uxth	r1, r1
   b678e:	e72b      	b.n	b65e8 <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6790:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6794:	bf94      	ite	ls
   b6796:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b679a:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b679e:	8091      	strh	r1, [r2, #4]
   b67a0:	e72d      	b.n	b65fe <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b67a2:	4631      	mov	r1, r6
   b67a4:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b67a6:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b67aa:	f7ff fb0f 	bl	b5dcc <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b67ae:	4604      	mov	r4, r0
   b67b0:	2800      	cmp	r0, #0
   b67b2:	f43f ae8a 	beq.w	b64ca <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b67b6:	2220      	movs	r2, #32
   b67b8:	4631      	mov	r1, r6
   b67ba:	f002 fb0f 	bl	b8ddc <memset>
  memcpy(dir->name, fname->sfn, 11);
   b67be:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b67c2:	6023      	str	r3, [r4, #0]
   b67c4:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b67c8:	6063      	str	r3, [r4, #4]
   b67ca:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b67ce:	8123      	strh	r3, [r4, #8]
   b67d0:	7dfb      	ldrb	r3, [r7, #23]
   b67d2:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b67d4:	783b      	ldrb	r3, [r7, #0]
   b67d6:	f003 0318 	and.w	r3, r3, #24
   b67da:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b67dc:	4b0f      	ldr	r3, [pc, #60]	; (b681c <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b67de:	681b      	ldr	r3, [r3, #0]
   b67e0:	b19b      	cbz	r3, b680a <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b67e2:	f104 010e 	add.w	r1, r4, #14
   b67e6:	f104 0010 	add.w	r0, r4, #16
   b67ea:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b67ec:	8a23      	ldrh	r3, [r4, #16]
   b67ee:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b67f0:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b67f2:	89e3      	ldrh	r3, [r4, #14]
   b67f4:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b67f6:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b67f8:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b67fc:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6800:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6804:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b6808:	e78e      	b.n	b6728 <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b680a:	2321      	movs	r3, #33	; 0x21
   b680c:	7423      	strb	r3, [r4, #16]
   b680e:	2328      	movs	r3, #40	; 0x28
   b6810:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b6812:	2308      	movs	r3, #8
   b6814:	73a6      	strb	r6, [r4, #14]
   b6816:	73e3      	strb	r3, [r4, #15]
   b6818:	e7e8      	b.n	b67ec <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b681a:	bf00      	nop
   b681c:	2003e6b4 	.word	0x2003e6b4

000b6820 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6820:	b513      	push	{r0, r1, r4, lr}
   b6822:	4604      	mov	r4, r0
    }
   b6824:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b6826:	b159      	cbz	r1, b6840 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b6828:	9101      	str	r1, [sp, #4]
   b682a:	f002 fb0d 	bl	b8e48 <strlen>
   b682e:	6823      	ldr	r3, [r4, #0]
   b6830:	9901      	ldr	r1, [sp, #4]
   b6832:	68db      	ldr	r3, [r3, #12]
   b6834:	4602      	mov	r2, r0
   b6836:	4620      	mov	r0, r4
    }
   b6838:	b002      	add	sp, #8
   b683a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b683e:	4718      	bx	r3
    }
   b6840:	b002      	add	sp, #8
   b6842:	bd10      	pop	{r4, pc}

000b6844 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6844:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b6846:	7803      	ldrb	r3, [r0, #0]
   b6848:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b684a:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b684c:	d520      	bpl.n	b6890 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b684e:	6843      	ldr	r3, [r0, #4]
   b6850:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b6852:	f100 020c 	add.w	r2, r0, #12
   b6856:	6818      	ldr	r0, [r3, #0]
   b6858:	9201      	str	r2, [sp, #4]
   b685a:	f000 fb88 	bl	b6f6e <_ZN9SdSpiCard10writeBlockEmPKh>
   b685e:	9a01      	ldr	r2, [sp, #4]
   b6860:	4605      	mov	r5, r0
   b6862:	b918      	cbnz	r0, b686c <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b6864:	2500      	movs	r5, #0
}
   b6866:	4628      	mov	r0, r5
   b6868:	b003      	add	sp, #12
   b686a:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b686c:	7823      	ldrb	r3, [r4, #0]
   b686e:	079b      	lsls	r3, r3, #30
   b6870:	d404      	bmi.n	b687c <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b6872:	7823      	ldrb	r3, [r4, #0]
   b6874:	f023 0301 	bic.w	r3, r3, #1
   b6878:	7023      	strb	r3, [r4, #0]
   b687a:	e7f4      	b.n	b6866 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b687c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b6880:	6919      	ldr	r1, [r3, #16]
   b6882:	4401      	add	r1, r0
   b6884:	6818      	ldr	r0, [r3, #0]
   b6886:	f000 fb72 	bl	b6f6e <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b688a:	2800      	cmp	r0, #0
   b688c:	d1f1      	bne.n	b6872 <_ZN8FatCache4syncEv+0x2e>
   b688e:	e7e9      	b.n	b6864 <_ZN8FatCache4syncEv+0x20>
  return true;
   b6890:	2501      	movs	r5, #1
   b6892:	e7e8      	b.n	b6866 <_ZN8FatCache4syncEv+0x22>

000b6894 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b6894:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b6896:	6883      	ldr	r3, [r0, #8]
   b6898:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b689a:	4604      	mov	r4, r0
   b689c:	460e      	mov	r6, r1
   b689e:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b68a0:	d009      	beq.n	b68b6 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b68a2:	f7ff ffcf 	bl	b6844 <_ZN8FatCache4syncEv>
   b68a6:	b908      	cbnz	r0, b68ac <_ZN8FatCache4readEmh+0x18>
  return 0;
   b68a8:	2000      	movs	r0, #0
}
   b68aa:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b68ac:	076b      	lsls	r3, r5, #29
   b68ae:	d50a      	bpl.n	b68c6 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b68b0:	2300      	movs	r3, #0
   b68b2:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b68b4:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b68b6:	7822      	ldrb	r2, [r4, #0]
   b68b8:	f005 0503 	and.w	r5, r5, #3
   b68bc:	4620      	mov	r0, r4
   b68be:	4315      	orrs	r5, r2
   b68c0:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b68c4:	e7f1      	b.n	b68aa <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b68c6:	6863      	ldr	r3, [r4, #4]
   b68c8:	f104 020c 	add.w	r2, r4, #12
   b68cc:	6818      	ldr	r0, [r3, #0]
   b68ce:	4631      	mov	r1, r6
   b68d0:	f000 fac4 	bl	b6e5c <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b68d4:	2800      	cmp	r0, #0
   b68d6:	d1eb      	bne.n	b68b0 <_ZN8FatCache4readEmh+0x1c>
   b68d8:	e7e6      	b.n	b68a8 <_ZN8FatCache4readEmh+0x14>

000b68da <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b68da:	7983      	ldrb	r3, [r0, #6]
   b68dc:	6940      	ldr	r0, [r0, #20]
   b68de:	3902      	subs	r1, #2
   b68e0:	4099      	lsls	r1, r3
}
   b68e2:	4408      	add	r0, r1
   b68e4:	4770      	bx	lr

000b68e6 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b68e6:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b68e8:	b570      	push	{r4, r5, r6, lr}
   b68ea:	4605      	mov	r5, r0
   b68ec:	460c      	mov	r4, r1
   b68ee:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b68f0:	d802      	bhi.n	b68f8 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b68f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b68f6:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b68f8:	69c3      	ldr	r3, [r0, #28]
   b68fa:	428b      	cmp	r3, r1
   b68fc:	d3f9      	bcc.n	b68f2 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b68fe:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6900:	2b20      	cmp	r3, #32
   b6902:	d116      	bne.n	b6932 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b6904:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6906:	2202      	movs	r2, #2
   b6908:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b690c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6910:	f7ff ffc0 	bl	b6894 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6914:	2800      	cmp	r0, #0
   b6916:	d0ec      	beq.n	b68f2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b6918:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b691c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b6920:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b6924:	69ea      	ldr	r2, [r5, #28]
   b6926:	429a      	cmp	r2, r3
  *value = next;
   b6928:	bf26      	itte	cs
   b692a:	6033      	strcs	r3, [r6, #0]
  return 1;
   b692c:	2001      	movcs	r0, #1
    return 0;
   b692e:	2000      	movcc	r0, #0
   b6930:	e7e1      	b.n	b68f6 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b6932:	2b10      	cmp	r3, #16
   b6934:	d1dd      	bne.n	b68f2 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6936:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b693a:	6981      	ldr	r1, [r0, #24]
   b693c:	2202      	movs	r2, #2
   b693e:	4419      	add	r1, r3
   b6940:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6944:	f7ff ffa6 	bl	b6894 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6948:	2800      	cmp	r0, #0
   b694a:	d0d2      	beq.n	b68f2 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b694c:	b2e4      	uxtb	r4, r4
   b694e:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b6952:	e7e7      	b.n	b6924 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b6954 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b6954:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b6956:	b538      	push	{r3, r4, r5, lr}
   b6958:	460c      	mov	r4, r1
   b695a:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b695c:	d801      	bhi.n	b6962 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b695e:	2000      	movs	r0, #0
}
   b6960:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b6962:	69c3      	ldr	r3, [r0, #28]
   b6964:	428b      	cmp	r3, r1
   b6966:	d3fa      	bcc.n	b695e <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b6968:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b696a:	2b20      	cmp	r3, #32
   b696c:	d10f      	bne.n	b698e <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b696e:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b6970:	2203      	movs	r2, #3
   b6972:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6976:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b697a:	f7ff ff8b 	bl	b6894 <_ZN8FatCache4readEmh>
    if (!pc) {
   b697e:	2800      	cmp	r0, #0
   b6980:	d0ed      	beq.n	b695e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b6982:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6986:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b698a:	2001      	movs	r0, #1
   b698c:	e7e8      	b.n	b6960 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b698e:	2b10      	cmp	r3, #16
   b6990:	d1e5      	bne.n	b695e <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b6992:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b6996:	6981      	ldr	r1, [r0, #24]
   b6998:	2203      	movs	r2, #3
   b699a:	4419      	add	r1, r3
   b699c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b69a0:	f7ff ff78 	bl	b6894 <_ZN8FatCache4readEmh>
    if (!pc) {
   b69a4:	2800      	cmp	r0, #0
   b69a6:	d0da      	beq.n	b695e <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b69a8:	b2e4      	uxtb	r4, r4
   b69aa:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b69ae:	e7ec      	b.n	b698a <_ZN9FatVolume6fatPutEmm+0x36>

000b69b0 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b69b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b69b4:	68c4      	ldr	r4, [r0, #12]
   b69b6:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b69b8:	4605      	mov	r5, r0
   b69ba:	460e      	mov	r6, r1
   b69bc:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b69be:	d301      	bcc.n	b69c4 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b69c0:	2701      	movs	r7, #1
   b69c2:	e001      	b.n	b69c8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b69c4:	460c      	mov	r4, r1
    setStart = false;
   b69c6:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b69c8:	69eb      	ldr	r3, [r5, #28]
    find++;
   b69ca:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b69cc:	42a3      	cmp	r3, r4
   b69ce:	d202      	bcs.n	b69d6 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b69d0:	b9c7      	cbnz	r7, b6a04 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b69d2:	68ec      	ldr	r4, [r5, #12]
   b69d4:	e7f4      	b.n	b69c0 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b69d6:	42a6      	cmp	r6, r4
   b69d8:	d014      	beq.n	b6a04 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b69da:	aa01      	add	r2, sp, #4
   b69dc:	4621      	mov	r1, r4
   b69de:	4628      	mov	r0, r5
   b69e0:	f7ff ff81 	bl	b68e6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b69e4:	2800      	cmp	r0, #0
   b69e6:	db0d      	blt.n	b6a04 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b69e8:	d0ee      	beq.n	b69c8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b69ea:	9b01      	ldr	r3, [sp, #4]
   b69ec:	2b00      	cmp	r3, #0
   b69ee:	d1eb      	bne.n	b69c8 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b69f0:	b107      	cbz	r7, b69f4 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b69f2:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b69f4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b69f8:	4621      	mov	r1, r4
   b69fa:	4628      	mov	r0, r5
   b69fc:	f7ff ffaa 	bl	b6954 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b6a00:	4607      	mov	r7, r0
   b6a02:	b920      	cbnz	r0, b6a0e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b6a04:	2700      	movs	r7, #0
}
   b6a06:	4638      	mov	r0, r7
   b6a08:	b002      	add	sp, #8
   b6a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b6a0e:	b916      	cbnz	r6, b6a16 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b6a10:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b6a14:	e7f7      	b.n	b6a06 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b6a16:	4622      	mov	r2, r4
   b6a18:	4631      	mov	r1, r6
   b6a1a:	4628      	mov	r0, r5
   b6a1c:	f7ff ff9a 	bl	b6954 <_ZN9FatVolume6fatPutEmm>
   b6a20:	2800      	cmp	r0, #0
   b6a22:	d1f5      	bne.n	b6a10 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b6a24:	e7ee      	b.n	b6a04 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b6a26 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b6a26:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6a28:	4605      	mov	r5, r0
   b6a2a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b6a2c:	aa01      	add	r2, sp, #4
   b6a2e:	4621      	mov	r1, r4
   b6a30:	4628      	mov	r0, r5
   b6a32:	f7ff ff58 	bl	b68e6 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6a36:	1e06      	subs	r6, r0, #0
   b6a38:	db10      	blt.n	b6a5c <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b6a3a:	2200      	movs	r2, #0
   b6a3c:	4621      	mov	r1, r4
   b6a3e:	4628      	mov	r0, r5
   b6a40:	f7ff ff88 	bl	b6954 <_ZN9FatVolume6fatPutEmm>
   b6a44:	b150      	cbz	r0, b6a5c <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b6a46:	68eb      	ldr	r3, [r5, #12]
   b6a48:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b6a4a:	bf24      	itt	cs
   b6a4c:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b6a50:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b6a52:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b6a54:	2e00      	cmp	r6, #0
   b6a56:	d1e9      	bne.n	b6a2c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b6a58:	b002      	add	sp, #8
   b6a5a:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6a5c:	2000      	movs	r0, #0
   b6a5e:	e7fb      	b.n	b6a58 <_ZN9FatVolume9freeChainEm+0x32>

000b6a60 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b6a60:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b6a62:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b6a64:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b6a66:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b6a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b6a6c:	4604      	mov	r4, r0
  m_fatType = 0;
   b6a6e:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b6a70:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b6a74:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b6a76:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b6a7a:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b6a7c:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b6a80:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b6a84:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b6a88:	460d      	mov	r5, r1
   b6a8a:	b1b9      	cbz	r1, b6abc <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b6a8c:	2904      	cmp	r1, #4
   b6a8e:	d901      	bls.n	b6a94 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b6a90:	2000      	movs	r0, #0
}
   b6a92:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b6a94:	4611      	mov	r1, r2
   b6a96:	4630      	mov	r0, r6
   b6a98:	f7ff fefc 	bl	b6894 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6a9c:	2800      	cmp	r0, #0
   b6a9e:	d0f7      	beq.n	b6a90 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b6aa0:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b6aa4:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b6aa8:	065b      	lsls	r3, r3, #25
   b6aaa:	d1f1      	bne.n	b6a90 <_ZN9FatVolume4initEh+0x30>
   b6aac:	f105 011b 	add.w	r1, r5, #27
   b6ab0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b6ab4:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b6ab8:	2d00      	cmp	r5, #0
   b6aba:	d0e9      	beq.n	b6a90 <_ZN9FatVolume4initEh+0x30>
   b6abc:	2200      	movs	r2, #0
   b6abe:	4629      	mov	r1, r5
   b6ac0:	4630      	mov	r0, r6
   b6ac2:	f7ff fee7 	bl	b6894 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6ac6:	2800      	cmp	r0, #0
   b6ac8:	d0e2      	beq.n	b6a90 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b6aca:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b6ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b6ad2:	d1dd      	bne.n	b6a90 <_ZN9FatVolume4initEh+0x30>
   b6ad4:	7c03      	ldrb	r3, [r0, #16]
   b6ad6:	2b02      	cmp	r3, #2
   b6ad8:	d1da      	bne.n	b6a90 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b6ada:	89c3      	ldrh	r3, [r0, #14]
   b6adc:	2b00      	cmp	r3, #0
   b6ade:	d0d7      	beq.n	b6a90 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b6ae0:	7b41      	ldrb	r1, [r0, #13]
   b6ae2:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b6ae4:	1e4b      	subs	r3, r1, #1
   b6ae6:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b6ae8:	2300      	movs	r3, #0
   b6aea:	71a3      	strb	r3, [r4, #6]
   b6aec:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6aee:	2301      	movs	r3, #1
   b6af0:	4299      	cmp	r1, r3
   b6af2:	d007      	beq.n	b6b04 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b6af4:	3e01      	subs	r6, #1
   b6af6:	d0cb      	beq.n	b6a90 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6af8:	79a2      	ldrb	r2, [r4, #6]
   b6afa:	005b      	lsls	r3, r3, #1
   b6afc:	3201      	adds	r2, #1
   b6afe:	b2db      	uxtb	r3, r3
   b6b00:	71a2      	strb	r2, [r4, #6]
   b6b02:	e7f5      	b.n	b6af0 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b6b04:	8ac1      	ldrh	r1, [r0, #22]
   b6b06:	b901      	cbnz	r1, b6b0a <_ZN9FatVolume4initEh+0xaa>
   b6b08:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b6b0a:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b6b0c:	89c3      	ldrh	r3, [r0, #14]
   b6b0e:	442b      	add	r3, r5
   b6b10:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b6b12:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b6b16:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b6b18:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b6b1c:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b6b1e:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b6b22:	0149      	lsls	r1, r1, #5
   b6b24:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b6b28:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b6b2c:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b6b2e:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b6b32:	b902      	cbnz	r2, b6b36 <_ZN9FatVolume4initEh+0xd6>
   b6b34:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6b36:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b6b38:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b6b3a:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b6b3c:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b6b3e:	1c4b      	adds	r3, r1, #1
   b6b40:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b6b42:	f640 73f4 	movw	r3, #4084	; 0xff4
   b6b46:	4299      	cmp	r1, r3
   b6b48:	d802      	bhi.n	b6b50 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b6b4a:	230c      	movs	r3, #12
   b6b4c:	71e3      	strb	r3, [r4, #7]
   b6b4e:	e79f      	b.n	b6a90 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b6b50:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b6b54:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b6b56:	bf85      	ittet	hi
   b6b58:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b6b5a:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b6b5c:	2310      	movls	r3, #16
    m_fatType = 32;
   b6b5e:	2320      	movhi	r3, #32
   b6b60:	71e3      	strb	r3, [r4, #7]
  return true;
   b6b62:	2001      	movs	r0, #1
   b6b64:	e795      	b.n	b6a92 <_ZN9FatVolume4initEh+0x32>

000b6b66 <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b6b66:	f000 bacb 	b.w	b7100 <_ZN14SdSpiAltDriver4sendEh>

000b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b6b6a:	f000 baae 	b.w	b70ca <_ZN14SdSpiAltDriver7receiveEv>
	...

000b6b70 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6b70:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6b72:	4e0e      	ldr	r6, [pc, #56]	; (b6bac <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b6b74:	460d      	mov	r5, r1
   b6b76:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b6b78:	f000 faf2 	bl	b7160 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b6b7c:	6833      	ldr	r3, [r6, #0]
   b6b7e:	1ac0      	subs	r0, r0, r3
   b6b80:	4b0b      	ldr	r3, [pc, #44]	; (b6bb0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b6b82:	4298      	cmp	r0, r3
   b6b84:	d908      	bls.n	b6b98 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6b86:	f000 faf3 	bl	b7170 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6b8a:	4b0a      	ldr	r3, [pc, #40]	; (b6bb4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b6b8c:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b6b8e:	f000 fc7b 	bl	b7488 <spark_process>
   b6b92:	f000 fae5 	bl	b7160 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b6b96:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b6b98:	f000 faea 	bl	b7170 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b6b9c:	b280      	uxth	r0, r0
   b6b9e:	1b40      	subs	r0, r0, r5
}
   b6ba0:	42a0      	cmp	r0, r4
   b6ba2:	bfd4      	ite	le
   b6ba4:	2000      	movle	r0, #0
   b6ba6:	2001      	movgt	r0, #1
   b6ba8:	bd70      	pop	{r4, r5, r6, pc}
   b6baa:	bf00      	nop
   b6bac:	2003e6bc 	.word	0x2003e6bc
   b6bb0:	000186a0 	.word	0x000186a0
   b6bb4:	2003e728 	.word	0x2003e728

000b6bb8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b6bb8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b6bba:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b6bbc:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b6bbe:	b94d      	cbnz	r5, b6bd4 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b6bc0:	6840      	ldr	r0, [r0, #4]
   b6bc2:	f000 fa6b 	bl	b709c <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b6bc6:	6863      	ldr	r3, [r4, #4]
   b6bc8:	4629      	mov	r1, r5
   b6bca:	7d18      	ldrb	r0, [r3, #20]
   b6bcc:	f001 fb43 	bl	b8256 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b6bd0:	2301      	movs	r3, #1
   b6bd2:	7223      	strb	r3, [r4, #8]
  }
}
   b6bd4:	bd38      	pop	{r3, r4, r5, pc}

000b6bd6 <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b6bd6:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b6bd8:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b6bda:	4604      	mov	r4, r0
  if (m_spiActive) {
   b6bdc:	b16b      	cbz	r3, b6bfa <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b6bde:	6843      	ldr	r3, [r0, #4]
   b6be0:	2101      	movs	r1, #1
   b6be2:	7d18      	ldrb	r0, [r3, #20]
   b6be4:	f001 fb37 	bl	b8256 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b6be8:	6860      	ldr	r0, [r4, #4]
   b6bea:	21ff      	movs	r1, #255	; 0xff
   b6bec:	f7ff ffbb 	bl	b6b66 <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b6bf0:	6860      	ldr	r0, [r4, #4]
   b6bf2:	f000 fa67 	bl	b70c4 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b6bf6:	2300      	movs	r3, #0
   b6bf8:	7223      	strb	r3, [r4, #8]
  }
}
   b6bfa:	bd10      	pop	{r4, pc}

000b6bfc <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b6bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6bfe:	4604      	mov	r4, r0
   b6c00:	460d      	mov	r5, r1
   b6c02:	4616      	mov	r6, r2
   b6c04:	f000 fab4 	bl	b7170 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b6c08:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b6c0a:	6860      	ldr	r0, [r4, #4]
   b6c0c:	f7ff ffad 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6c10:	28ff      	cmp	r0, #255	; 0xff
   b6c12:	7260      	strb	r0, [r4, #9]
   b6c14:	d10e      	bne.n	b6c34 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b6c16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b6c1a:	4639      	mov	r1, r7
   b6c1c:	4620      	mov	r0, r4
   b6c1e:	f7ff ffa7 	bl	b6b70 <_ZN9SdSpiCard10isTimedOutEtt>
   b6c22:	2800      	cmp	r0, #0
   b6c24:	d0f1      	beq.n	b6c0a <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b6c26:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b6c28:	4620      	mov	r0, r4
   b6c2a:	7023      	strb	r3, [r4, #0]
   b6c2c:	f7ff ffd3 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6c30:	2000      	movs	r0, #0
}
   b6c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b6c34:	28fe      	cmp	r0, #254	; 0xfe
   b6c36:	d001      	beq.n	b6c3c <_ZN9SdSpiCard8readDataEPhj+0x40>
   b6c38:	2350      	movs	r3, #80	; 0x50
   b6c3a:	e7f5      	b.n	b6c28 <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b6c3c:	6860      	ldr	r0, [r4, #4]
   b6c3e:	4632      	mov	r2, r6
   b6c40:	4629      	mov	r1, r5
   b6c42:	f000 fa47 	bl	b70d4 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b6c46:	7260      	strb	r0, [r4, #9]
   b6c48:	b108      	cbz	r0, b6c4e <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b6c4a:	2360      	movs	r3, #96	; 0x60
   b6c4c:	e7ec      	b.n	b6c28 <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b6c4e:	6860      	ldr	r0, [r4, #4]
   b6c50:	f7ff ff8b 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b6c54:	6860      	ldr	r0, [r4, #4]
   b6c56:	f7ff ff88 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b6c5a:	2001      	movs	r0, #1
   b6c5c:	e7e9      	b.n	b6c32 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b6c5e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b6c5e:	b570      	push	{r4, r5, r6, lr}
   b6c60:	4604      	mov	r4, r0
   b6c62:	460e      	mov	r6, r1
   b6c64:	f000 fa84 	bl	b7170 <HAL_Timer_Get_Milli_Seconds>
   b6c68:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b6c6a:	4632      	mov	r2, r6
   b6c6c:	4629      	mov	r1, r5
   b6c6e:	4620      	mov	r0, r4
   b6c70:	f7ff ff7e 	bl	b6b70 <_ZN9SdSpiCard10isTimedOutEtt>
   b6c74:	b930      	cbnz	r0, b6c84 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b6c76:	6860      	ldr	r0, [r4, #4]
   b6c78:	f7ff ff77 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6c7c:	28ff      	cmp	r0, #255	; 0xff
   b6c7e:	d1f4      	bne.n	b6c6a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b6c80:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b6c82:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b6c84:	2000      	movs	r0, #0
   b6c86:	e7fc      	b.n	b6c82 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b6c88 <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b6c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b6c8a:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b6c8c:	9201      	str	r2, [sp, #4]
   b6c8e:	4604      	mov	r4, r0
   b6c90:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b6c92:	b90b      	cbnz	r3, b6c98 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b6c94:	f7ff ff90 	bl	b6bb8 <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b6c98:	b125      	cbz	r5, b6ca4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b6c9a:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b6c9e:	4620      	mov	r0, r4
   b6ca0:	f7ff ffdd 	bl	b6c5e <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b6ca4:	6860      	ldr	r0, [r4, #4]
   b6ca6:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b6caa:	f7ff ff5c 	bl	b6b66 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6cae:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b6cb0:	af01      	add	r7, sp, #4
   b6cb2:	5db9      	ldrb	r1, [r7, r6]
   b6cb4:	6860      	ldr	r0, [r4, #4]
   b6cb6:	f7ff ff56 	bl	b6b66 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b6cba:	3e01      	subs	r6, #1
   b6cbc:	d2f9      	bcs.n	b6cb2 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b6cbe:	2d00      	cmp	r5, #0
   b6cc0:	6860      	ldr	r0, [r4, #4]
   b6cc2:	bf0c      	ite	eq
   b6cc4:	2195      	moveq	r1, #149	; 0x95
   b6cc6:	2187      	movne	r1, #135	; 0x87
   b6cc8:	f7ff ff4d 	bl	b6b66 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b6ccc:	6860      	ldr	r0, [r4, #4]
   b6cce:	f7ff ff4c 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6cd2:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b6cd4:	6860      	ldr	r0, [r4, #4]
   b6cd6:	f7ff ff48 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6cda:	0603      	lsls	r3, r0, #24
   b6cdc:	7260      	strb	r0, [r4, #9]
   b6cde:	d503      	bpl.n	b6ce8 <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b6ce0:	3d01      	subs	r5, #1
   b6ce2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6ce6:	d1f5      	bne.n	b6cd4 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b6ce8:	b003      	add	sp, #12
   b6cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6cec <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b6cec:	b570      	push	{r4, r5, r6, lr}
   b6cee:	4604      	mov	r4, r0
   b6cf0:	460d      	mov	r5, r1
   b6cf2:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b6cf4:	2137      	movs	r1, #55	; 0x37
   b6cf6:	2200      	movs	r2, #0
   b6cf8:	f7ff ffc6 	bl	b6c88 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b6cfc:	4632      	mov	r2, r6
   b6cfe:	4629      	mov	r1, r5
   b6d00:	4620      	mov	r0, r4
  }
   b6d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b6d06:	f7ff bfbf 	b.w	b6c88 <_ZN9SdSpiCard11cardCommandEhm>
	...

000b6d0c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b6d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b6d10:	2500      	movs	r5, #0
   b6d12:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b6d14:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b6d16:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b6d18:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b6d1a:	4604      	mov	r4, r0
   b6d1c:	4690      	mov	r8, r2
   b6d1e:	461e      	mov	r6, r3
   b6d20:	f000 fa26 	bl	b7170 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b6d24:	4641      	mov	r1, r8
   b6d26:	4607      	mov	r7, r0
   b6d28:	6860      	ldr	r0, [r4, #4]
   b6d2a:	f000 f9bb 	bl	b70a4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b6d2e:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b6d30:	4a49      	ldr	r2, [pc, #292]	; (b6e58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b6d32:	721d      	strb	r5, [r3, #8]
   b6d34:	2501      	movs	r5, #1
   b6d36:	60da      	str	r2, [r3, #12]
   b6d38:	821d      	strh	r5, [r3, #16]
  spiStart();
   b6d3a:	4620      	mov	r0, r4
   b6d3c:	f7ff ff3c 	bl	b6bb8 <_ZN9SdSpiCard8spiStartEv>
   b6d40:	6863      	ldr	r3, [r4, #4]
   b6d42:	4629      	mov	r1, r5
   b6d44:	7d18      	ldrb	r0, [r3, #20]
   b6d46:	f001 fa86 	bl	b8256 <digitalWrite>
   b6d4a:	250a      	movs	r5, #10
    spiSend(0XFF);
   b6d4c:	6860      	ldr	r0, [r4, #4]
   b6d4e:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b6d50:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b6d52:	f7ff ff08 	bl	b6b66 <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b6d56:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6d5a:	d1f7      	bne.n	b6d4c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b6d5c:	6863      	ldr	r3, [r4, #4]
   b6d5e:	4629      	mov	r1, r5
   b6d60:	7d18      	ldrb	r0, [r3, #20]
   b6d62:	f001 fa78 	bl	b8256 <digitalWrite>
  }
   b6d66:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b6d68:	2200      	movs	r2, #0
   b6d6a:	4611      	mov	r1, r2
   b6d6c:	4620      	mov	r0, r4
   b6d6e:	f7ff ff8b 	bl	b6c88 <_ZN9SdSpiCard11cardCommandEhm>
   b6d72:	2801      	cmp	r0, #1
   b6d74:	4680      	mov	r8, r0
   b6d76:	d018      	beq.n	b6daa <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b6d78:	3d01      	subs	r5, #1
   b6d7a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b6d7e:	d107      	bne.n	b6d90 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b6d80:	2320      	movs	r3, #32
  spiStop();
   b6d82:	4620      	mov	r0, r4
   b6d84:	7023      	strb	r3, [r4, #0]
   b6d86:	f7ff ff26 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6d8a:	2000      	movs	r0, #0
}
   b6d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b6d90:	6860      	ldr	r0, [r4, #4]
   b6d92:	21fd      	movs	r1, #253	; 0xfd
   b6d94:	f7ff fee7 	bl	b6b66 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6d98:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b6d9c:	6860      	ldr	r0, [r4, #4]
   b6d9e:	f7ff fee4 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b6da2:	f1b8 0801 	subs.w	r8, r8, #1
   b6da6:	d1f9      	bne.n	b6d9c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b6da8:	e7de      	b.n	b6d68 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b6daa:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b6dae:	2108      	movs	r1, #8
   b6db0:	4620      	mov	r0, r4
   b6db2:	f7ff ff69 	bl	b6c88 <_ZN9SdSpiCard11cardCommandEhm>
   b6db6:	2805      	cmp	r0, #5
   b6db8:	d114      	bne.n	b6de4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b6dba:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b6dbe:	2500      	movs	r5, #0
   b6dc0:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b6dc2:	462a      	mov	r2, r5
   b6dc4:	2129      	movs	r1, #41	; 0x29
   b6dc6:	4620      	mov	r0, r4
   b6dc8:	f7ff ff90 	bl	b6cec <_ZN9SdSpiCard8cardAcmdEhm>
   b6dcc:	4602      	mov	r2, r0
   b6dce:	b1d8      	cbz	r0, b6e08 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b6dd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b6dd4:	4639      	mov	r1, r7
   b6dd6:	4620      	mov	r0, r4
   b6dd8:	f7ff feca 	bl	b6b70 <_ZN9SdSpiCard10isTimedOutEtt>
   b6ddc:	2800      	cmp	r0, #0
   b6dde:	d0f0      	beq.n	b6dc2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b6de0:	2343      	movs	r3, #67	; 0x43
   b6de2:	e7ce      	b.n	b6d82 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b6de4:	2504      	movs	r5, #4
      m_status = spiReceive();
   b6de6:	6860      	ldr	r0, [r4, #4]
   b6de8:	f7ff febf 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b6dec:	3d01      	subs	r5, #1
   b6dee:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b6df2:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b6df4:	d1f7      	bne.n	b6de6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b6df6:	28aa      	cmp	r0, #170	; 0xaa
   b6df8:	d104      	bne.n	b6e04 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b6dfa:	2302      	movs	r3, #2
   b6dfc:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b6dfe:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b6e02:	e7dd      	b.n	b6dc0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b6e04:	2325      	movs	r3, #37	; 0x25
   b6e06:	e7bc      	b.n	b6d82 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b6e08:	7aa3      	ldrb	r3, [r4, #10]
   b6e0a:	2b02      	cmp	r3, #2
   b6e0c:	d118      	bne.n	b6e40 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b6e0e:	213a      	movs	r1, #58	; 0x3a
   b6e10:	4620      	mov	r0, r4
   b6e12:	f7ff ff39 	bl	b6c88 <_ZN9SdSpiCard11cardCommandEhm>
   b6e16:	b108      	cbz	r0, b6e1c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b6e18:	2337      	movs	r3, #55	; 0x37
   b6e1a:	e7b2      	b.n	b6d82 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b6e1c:	6860      	ldr	r0, [r4, #4]
   b6e1e:	f7ff fea4 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6e22:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b6e26:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b6e28:	bf04      	itt	eq
   b6e2a:	2303      	moveq	r3, #3
   b6e2c:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b6e2e:	6860      	ldr	r0, [r4, #4]
   b6e30:	f7ff fe9b 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6e34:	6860      	ldr	r0, [r4, #4]
   b6e36:	f7ff fe98 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6e3a:	6860      	ldr	r0, [r4, #4]
   b6e3c:	f7ff fe95 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b6e40:	4620      	mov	r0, r4
   b6e42:	f7ff fec8 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b6e46:	6863      	ldr	r3, [r4, #4]
   b6e48:	7930      	ldrb	r0, [r6, #4]
   b6e4a:	68b1      	ldr	r1, [r6, #8]
   b6e4c:	89b2      	ldrh	r2, [r6, #12]
   b6e4e:	821a      	strh	r2, [r3, #16]
   b6e50:	7218      	strb	r0, [r3, #8]
   b6e52:	60d9      	str	r1, [r3, #12]
  return true;
   b6e54:	2001      	movs	r0, #1
   b6e56:	e799      	b.n	b6d8c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b6e58:	0003d090 	.word	0x0003d090

000b6e5c <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6e5c:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6e5e:	7a83      	ldrb	r3, [r0, #10]
   b6e60:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6e62:	bf18      	it	ne
   b6e64:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6e66:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b6e68:	460a      	mov	r2, r1
   b6e6a:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6e6c:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b6e6e:	f7ff ff0b 	bl	b6c88 <_ZN9SdSpiCard11cardCommandEhm>
   b6e72:	b130      	cbz	r0, b6e82 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b6e74:	2330      	movs	r3, #48	; 0x30
   b6e76:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6e78:	4620      	mov	r0, r4
   b6e7a:	f7ff feac 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6e7e:	2500      	movs	r5, #0
   b6e80:	e00b      	b.n	b6e9a <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b6e82:	4629      	mov	r1, r5
   b6e84:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6e88:	4620      	mov	r0, r4
   b6e8a:	f7ff feb7 	bl	b6bfc <_ZN9SdSpiCard8readDataEPhj>
   b6e8e:	4605      	mov	r5, r0
   b6e90:	2800      	cmp	r0, #0
   b6e92:	d0f1      	beq.n	b6e78 <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b6e94:	4620      	mov	r0, r4
   b6e96:	f7ff fe9e 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
}
   b6e9a:	4628      	mov	r0, r5
   b6e9c:	bd38      	pop	{r3, r4, r5, pc}

000b6e9e <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6e9e:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6ea0:	7a83      	ldrb	r3, [r0, #10]
   b6ea2:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6ea4:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6ea6:	bf18      	it	ne
   b6ea8:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b6eaa:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6eac:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b6eae:	f7ff feeb 	bl	b6c88 <_ZN9SdSpiCard11cardCommandEhm>
   b6eb2:	b130      	cbz	r0, b6ec2 <_ZN9SdSpiCard9readStartEm+0x24>
   b6eb4:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b6eb6:	4620      	mov	r0, r4
   b6eb8:	7023      	strb	r3, [r4, #0]
   b6eba:	f7ff fe8c 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6ebe:	2000      	movs	r0, #0
}
   b6ec0:	bd10      	pop	{r4, pc}
  return true;
   b6ec2:	2001      	movs	r0, #1
   b6ec4:	e7fc      	b.n	b6ec0 <_ZN9SdSpiCard9readStartEm+0x22>

000b6ec6 <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b6ec6:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b6ec8:	2200      	movs	r2, #0
   b6eca:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b6ecc:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b6ece:	f7ff fedb 	bl	b6c88 <_ZN9SdSpiCard11cardCommandEhm>
   b6ed2:	b130      	cbz	r0, b6ee2 <_ZN9SdSpiCard8readStopEv+0x1c>
   b6ed4:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b6ed6:	4620      	mov	r0, r4
   b6ed8:	7023      	strb	r3, [r4, #0]
   b6eda:	f7ff fe7c 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6ede:	2000      	movs	r0, #0
}
   b6ee0:	bd10      	pop	{r4, pc}
  spiStop();
   b6ee2:	4620      	mov	r0, r4
   b6ee4:	f7ff fe77 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
  return true;
   b6ee8:	2001      	movs	r0, #1
   b6eea:	e7f9      	b.n	b6ee0 <_ZN9SdSpiCard8readStopEv+0x1a>

000b6eec <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b6eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6eee:	4604      	mov	r4, r0
   b6ef0:	4616      	mov	r6, r2
   b6ef2:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b6ef4:	f7ff ffd3 	bl	b6e9e <_ZN9SdSpiCard9readStartEm>
   b6ef8:	b168      	cbz	r0, b6f16 <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b6efa:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b6efc:	b2ab      	uxth	r3, r5
   b6efe:	429f      	cmp	r7, r3
   b6f00:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b6f04:	d909      	bls.n	b6f1a <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b6f06:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6f0a:	4620      	mov	r0, r4
   b6f0c:	f7ff fe76 	bl	b6bfc <_ZN9SdSpiCard8readDataEPhj>
   b6f10:	3501      	adds	r5, #1
   b6f12:	2800      	cmp	r0, #0
   b6f14:	d1f2      	bne.n	b6efc <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b6f16:	2000      	movs	r0, #0
   b6f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b6f1a:	4620      	mov	r0, r4
}
   b6f1c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b6f20:	f7ff bfd1 	b.w	b6ec6 <_ZN9SdSpiCard8readStopEv>

000b6f24 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b6f24:	b538      	push	{r3, r4, r5, lr}
   b6f26:	4604      	mov	r4, r0
   b6f28:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b6f2a:	6840      	ldr	r0, [r0, #4]
   b6f2c:	f7ff fe1b 	bl	b6b66 <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b6f30:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6f34:	6860      	ldr	r0, [r4, #4]
   b6f36:	4629      	mov	r1, r5
   b6f38:	f000 f8e6 	bl	b7108 <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b6f3c:	6860      	ldr	r0, [r4, #4]
   b6f3e:	21ff      	movs	r1, #255	; 0xff
   b6f40:	f7ff fe11 	bl	b6b66 <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b6f44:	6860      	ldr	r0, [r4, #4]
   b6f46:	21ff      	movs	r1, #255	; 0xff
   b6f48:	f7ff fe0d 	bl	b6b66 <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b6f4c:	6860      	ldr	r0, [r4, #4]
   b6f4e:	f7ff fe0c 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6f52:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b6f54:	f000 001f 	and.w	r0, r0, #31
   b6f58:	2805      	cmp	r0, #5
   b6f5a:	d006      	beq.n	b6f6a <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b6f5c:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6f5e:	4620      	mov	r0, r4
   b6f60:	7023      	strb	r3, [r4, #0]
   b6f62:	f7ff fe38 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6f66:	2000      	movs	r0, #0
}
   b6f68:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b6f6a:	2001      	movs	r0, #1
   b6f6c:	e7fc      	b.n	b6f68 <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b6f6e <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6f6e:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6f70:	7a83      	ldrb	r3, [r0, #10]
   b6f72:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6f74:	bf18      	it	ne
   b6f76:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6f78:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b6f7a:	460a      	mov	r2, r1
   b6f7c:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6f7e:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b6f80:	f7ff fe82 	bl	b6c88 <_ZN9SdSpiCard11cardCommandEhm>
   b6f84:	4606      	mov	r6, r0
   b6f86:	b130      	cbz	r0, b6f96 <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b6f88:	2332      	movs	r3, #50	; 0x32
   b6f8a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6f8c:	4620      	mov	r0, r4
   b6f8e:	f7ff fe22 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6f92:	2500      	movs	r5, #0
   b6f94:	e01f      	b.n	b6fd6 <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b6f96:	462a      	mov	r2, r5
   b6f98:	21fe      	movs	r1, #254	; 0xfe
   b6f9a:	4620      	mov	r0, r4
   b6f9c:	f7ff ffc2 	bl	b6f24 <_ZN9SdSpiCard9writeDataEhPKh>
   b6fa0:	2800      	cmp	r0, #0
   b6fa2:	d0f3      	beq.n	b6f8c <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6fa4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b6fa8:	4620      	mov	r0, r4
   b6faa:	f7ff fe58 	bl	b6c5e <_ZN9SdSpiCard11waitNotBusyEt>
   b6fae:	4605      	mov	r5, r0
   b6fb0:	b908      	cbnz	r0, b6fb6 <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b6fb2:	235a      	movs	r3, #90	; 0x5a
   b6fb4:	e7e9      	b.n	b6f8a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b6fb6:	4632      	mov	r2, r6
   b6fb8:	210d      	movs	r1, #13
   b6fba:	4620      	mov	r0, r4
   b6fbc:	f7ff fe64 	bl	b6c88 <_ZN9SdSpiCard11cardCommandEhm>
   b6fc0:	b108      	cbz	r0, b6fc6 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b6fc2:	2329      	movs	r3, #41	; 0x29
   b6fc4:	e7e1      	b.n	b6f8a <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b6fc6:	6860      	ldr	r0, [r4, #4]
   b6fc8:	f7ff fdcf 	bl	b6b6a <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6fcc:	2800      	cmp	r0, #0
   b6fce:	d1f8      	bne.n	b6fc2 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b6fd0:	4620      	mov	r0, r4
   b6fd2:	f7ff fe00 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
}
   b6fd6:	4628      	mov	r0, r5
   b6fd8:	bd70      	pop	{r4, r5, r6, pc}

000b6fda <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b6fda:	b513      	push	{r0, r1, r4, lr}
   b6fdc:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6fde:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b6fe2:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6fe4:	f7ff fe3b 	bl	b6c5e <_ZN9SdSpiCard11waitNotBusyEt>
   b6fe8:	9a01      	ldr	r2, [sp, #4]
   b6fea:	b930      	cbnz	r0, b6ffa <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b6fec:	235b      	movs	r3, #91	; 0x5b
   b6fee:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6ff0:	4620      	mov	r0, r4
   b6ff2:	f7ff fdf0 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6ff6:	2000      	movs	r0, #0
   b6ff8:	e005      	b.n	b7006 <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b6ffa:	21fc      	movs	r1, #252	; 0xfc
   b6ffc:	4620      	mov	r0, r4
   b6ffe:	f7ff ff91 	bl	b6f24 <_ZN9SdSpiCard9writeDataEhPKh>
   b7002:	2800      	cmp	r0, #0
   b7004:	d0f4      	beq.n	b6ff0 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7006:	b002      	add	sp, #8
   b7008:	bd10      	pop	{r4, pc}

000b700a <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b700a:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b700c:	7a83      	ldrb	r3, [r0, #10]
   b700e:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7010:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7012:	bf18      	it	ne
   b7014:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7016:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7018:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b701a:	f7ff fe35 	bl	b6c88 <_ZN9SdSpiCard11cardCommandEhm>
   b701e:	b130      	cbz	r0, b702e <_ZN9SdSpiCard10writeStartEm+0x24>
   b7020:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7022:	4620      	mov	r0, r4
   b7024:	7023      	strb	r3, [r4, #0]
   b7026:	f7ff fdd6 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
  return false;
   b702a:	2000      	movs	r0, #0
}
   b702c:	bd10      	pop	{r4, pc}
  return true;
   b702e:	2001      	movs	r0, #1
   b7030:	e7fc      	b.n	b702c <_ZN9SdSpiCard10writeStartEm+0x22>

000b7032 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7032:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7034:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7038:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b703a:	f7ff fe10 	bl	b6c5e <_ZN9SdSpiCard11waitNotBusyEt>
   b703e:	4605      	mov	r5, r0
   b7040:	b930      	cbnz	r0, b7050 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7042:	2356      	movs	r3, #86	; 0x56
   b7044:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7046:	4620      	mov	r0, r4
   b7048:	f7ff fdc5 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b704c:	4628      	mov	r0, r5
   b704e:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7050:	6860      	ldr	r0, [r4, #4]
   b7052:	21fd      	movs	r1, #253	; 0xfd
   b7054:	f7ff fd87 	bl	b6b66 <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7058:	e7f5      	b.n	b7046 <_ZN9SdSpiCard9writeStopEv+0x14>

000b705a <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b705a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b705c:	4604      	mov	r4, r0
   b705e:	4616      	mov	r6, r2
   b7060:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7062:	f7ff ffd2 	bl	b700a <_ZN9SdSpiCard10writeStartEm>
   b7066:	b170      	cbz	r0, b7086 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7068:	2500      	movs	r5, #0
   b706a:	42bd      	cmp	r5, r7
   b706c:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7070:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b7072:	d004      	beq.n	b707e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b7074:	f7ff ffb1 	bl	b6fda <_ZN9SdSpiCard9writeDataEPKh>
   b7078:	b128      	cbz	r0, b7086 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b707a:	3501      	adds	r5, #1
   b707c:	e7f5      	b.n	b706a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b707e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b7082:	f7ff bfd6 	b.w	b7032 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b7086:	4620      	mov	r0, r4
   b7088:	f7ff fda5 	bl	b6bd6 <_ZN9SdSpiCard7spiStopEv>
}
   b708c:	2000      	movs	r0, #0
   b708e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7090 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b7090:	4b01      	ldr	r3, [pc, #4]	; (b7098 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b7092:	2201      	movs	r2, #1
   b7094:	701a      	strb	r2, [r3, #0]
}
   b7096:	4770      	bx	lr
   b7098:	2003e6c0 	.word	0x2003e6c0

000b709c <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b709c:	1d01      	adds	r1, r0, #4
   b709e:	6800      	ldr	r0, [r0, #0]
   b70a0:	f000 be30 	b.w	b7d04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b70a4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b70a4:	b510      	push	{r4, lr}
   b70a6:	4604      	mov	r4, r0
  m_csPin = csPin;
   b70a8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b70aa:	6800      	ldr	r0, [r0, #0]
   b70ac:	f000 fdfc 	bl	b7ca8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b70b0:	7d20      	ldrb	r0, [r4, #20]
   b70b2:	2101      	movs	r1, #1
   b70b4:	f001 f8be 	bl	b8234 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b70b8:	7d20      	ldrb	r0, [r4, #20]
   b70ba:	2101      	movs	r1, #1
}
   b70bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b70c0:	f001 b8c9 	b.w	b8256 <digitalWrite>

000b70c4 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b70c4:	6800      	ldr	r0, [r0, #0]
   b70c6:	f000 be03 	b.w	b7cd0 <_ZN8SPIClass14endTransactionEv>

000b70ca <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b70ca:	6800      	ldr	r0, [r0, #0]
   b70cc:	21ff      	movs	r1, #255	; 0xff
   b70ce:	f000 be87 	b.w	b7de0 <_ZN8SPIClass8transferEh>
	...

000b70d4 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b70d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b70d6:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b70d8:	4a07      	ldr	r2, [pc, #28]	; (b70f8 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b70da:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b70dc:	2500      	movs	r5, #0
   b70de:	4c07      	ldr	r4, [pc, #28]	; (b70fc <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b70e0:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b70e2:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b70e4:	460a      	mov	r2, r1
   b70e6:	4629      	mov	r1, r5
   b70e8:	f000 fe80 	bl	b7dec <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b70ec:	7823      	ldrb	r3, [r4, #0]
   b70ee:	2b00      	cmp	r3, #0
   b70f0:	d0fc      	beq.n	b70ec <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b70f2:	2000      	movs	r0, #0
   b70f4:	b003      	add	sp, #12
   b70f6:	bd30      	pop	{r4, r5, pc}
   b70f8:	000b7091 	.word	0x000b7091
   b70fc:	2003e6c0 	.word	0x2003e6c0

000b7100 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7100:	6800      	ldr	r0, [r0, #0]
   b7102:	f000 be6d 	b.w	b7de0 <_ZN8SPIClass8transferEh>
	...

000b7108 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7108:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b710a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b710c:	4a06      	ldr	r2, [pc, #24]	; (b7128 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b710e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7110:	2500      	movs	r5, #0
   b7112:	4c06      	ldr	r4, [pc, #24]	; (b712c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7114:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7116:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7118:	462a      	mov	r2, r5
   b711a:	f000 fe67 	bl	b7dec <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b711e:	7823      	ldrb	r3, [r4, #0]
   b7120:	2b00      	cmp	r3, #0
   b7122:	d0fc      	beq.n	b711e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7124:	b003      	add	sp, #12
   b7126:	bd30      	pop	{r4, r5, pc}
   b7128:	000b7091 	.word	0x000b7091
   b712c:	2003e6c0 	.word	0x2003e6c0

000b7130 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b7130:	b508      	push	{r3, lr}
   b7132:	4b02      	ldr	r3, [pc, #8]	; (b713c <os_mutex_recursive_create+0xc>)
   b7134:	681b      	ldr	r3, [r3, #0]
   b7136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7138:	9301      	str	r3, [sp, #4]
   b713a:	bd08      	pop	{r3, pc}
   b713c:	00030248 	.word	0x00030248

000b7140 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b7140:	b508      	push	{r3, lr}
   b7142:	4b02      	ldr	r3, [pc, #8]	; (b714c <HAL_RNG_GetRandomNumber+0xc>)
   b7144:	681b      	ldr	r3, [r3, #0]
   b7146:	685b      	ldr	r3, [r3, #4]
   b7148:	9301      	str	r3, [sp, #4]
   b714a:	bd08      	pop	{r3, pc}
   b714c:	00030218 	.word	0x00030218

000b7150 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b7150:	b508      	push	{r3, lr}
   b7152:	4b02      	ldr	r3, [pc, #8]	; (b715c <HAL_Delay_Microseconds+0xc>)
   b7154:	681b      	ldr	r3, [r3, #0]
   b7156:	68db      	ldr	r3, [r3, #12]
   b7158:	9301      	str	r3, [sp, #4]
   b715a:	bd08      	pop	{r3, pc}
   b715c:	00030218 	.word	0x00030218

000b7160 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b7160:	b508      	push	{r3, lr}
   b7162:	4b02      	ldr	r3, [pc, #8]	; (b716c <HAL_Timer_Get_Micro_Seconds+0xc>)
   b7164:	681b      	ldr	r3, [r3, #0]
   b7166:	691b      	ldr	r3, [r3, #16]
   b7168:	9301      	str	r3, [sp, #4]
   b716a:	bd08      	pop	{r3, pc}
   b716c:	00030218 	.word	0x00030218

000b7170 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b7170:	b508      	push	{r3, lr}
   b7172:	4b02      	ldr	r3, [pc, #8]	; (b717c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b7174:	681b      	ldr	r3, [r3, #0]
   b7176:	695b      	ldr	r3, [r3, #20]
   b7178:	9301      	str	r3, [sp, #4]
   b717a:	bd08      	pop	{r3, pc}
   b717c:	00030218 	.word	0x00030218

000b7180 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b7180:	b508      	push	{r3, lr}
   b7182:	4b02      	ldr	r3, [pc, #8]	; (b718c <HAL_Pin_Mode+0xc>)
   b7184:	681b      	ldr	r3, [r3, #0]
   b7186:	689b      	ldr	r3, [r3, #8]
   b7188:	9301      	str	r3, [sp, #4]
   b718a:	bd08      	pop	{r3, pc}
   b718c:	0003022c 	.word	0x0003022c

000b7190 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b7190:	b508      	push	{r3, lr}
   b7192:	4b02      	ldr	r3, [pc, #8]	; (b719c <HAL_Get_Pin_Mode+0xc>)
   b7194:	681b      	ldr	r3, [r3, #0]
   b7196:	68db      	ldr	r3, [r3, #12]
   b7198:	9301      	str	r3, [sp, #4]
   b719a:	bd08      	pop	{r3, pc}
   b719c:	0003022c 	.word	0x0003022c

000b71a0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b71a0:	b508      	push	{r3, lr}
   b71a2:	4b02      	ldr	r3, [pc, #8]	; (b71ac <HAL_GPIO_Write+0xc>)
   b71a4:	681b      	ldr	r3, [r3, #0]
   b71a6:	691b      	ldr	r3, [r3, #16]
   b71a8:	9301      	str	r3, [sp, #4]
   b71aa:	bd08      	pop	{r3, pc}
   b71ac:	0003022c 	.word	0x0003022c

000b71b0 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b71b0:	b508      	push	{r3, lr}
   b71b2:	4b02      	ldr	r3, [pc, #8]	; (b71bc <hal_i2c_begin+0xc>)
   b71b4:	681b      	ldr	r3, [r3, #0]
   b71b6:	68db      	ldr	r3, [r3, #12]
   b71b8:	9301      	str	r3, [sp, #4]
   b71ba:	bd08      	pop	{r3, pc}
   b71bc:	00030228 	.word	0x00030228

000b71c0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b71c0:	b508      	push	{r3, lr}
   b71c2:	4b02      	ldr	r3, [pc, #8]	; (b71cc <hal_i2c_begin_transmission+0xc>)
   b71c4:	681b      	ldr	r3, [r3, #0]
   b71c6:	699b      	ldr	r3, [r3, #24]
   b71c8:	9301      	str	r3, [sp, #4]
   b71ca:	bd08      	pop	{r3, pc}
   b71cc:	00030228 	.word	0x00030228

000b71d0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b71d0:	b508      	push	{r3, lr}
   b71d2:	4b02      	ldr	r3, [pc, #8]	; (b71dc <hal_i2c_end_transmission+0xc>)
   b71d4:	681b      	ldr	r3, [r3, #0]
   b71d6:	69db      	ldr	r3, [r3, #28]
   b71d8:	9301      	str	r3, [sp, #4]
   b71da:	bd08      	pop	{r3, pc}
   b71dc:	00030228 	.word	0x00030228

000b71e0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b71e0:	b508      	push	{r3, lr}
   b71e2:	4b02      	ldr	r3, [pc, #8]	; (b71ec <hal_i2c_write+0xc>)
   b71e4:	681b      	ldr	r3, [r3, #0]
   b71e6:	6a1b      	ldr	r3, [r3, #32]
   b71e8:	9301      	str	r3, [sp, #4]
   b71ea:	bd08      	pop	{r3, pc}
   b71ec:	00030228 	.word	0x00030228

000b71f0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b71f0:	b508      	push	{r3, lr}
   b71f2:	4b02      	ldr	r3, [pc, #8]	; (b71fc <hal_i2c_available+0xc>)
   b71f4:	681b      	ldr	r3, [r3, #0]
   b71f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b71f8:	9301      	str	r3, [sp, #4]
   b71fa:	bd08      	pop	{r3, pc}
   b71fc:	00030228 	.word	0x00030228

000b7200 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b7200:	b508      	push	{r3, lr}
   b7202:	4b02      	ldr	r3, [pc, #8]	; (b720c <hal_i2c_read+0xc>)
   b7204:	681b      	ldr	r3, [r3, #0]
   b7206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7208:	9301      	str	r3, [sp, #4]
   b720a:	bd08      	pop	{r3, pc}
   b720c:	00030228 	.word	0x00030228

000b7210 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b7210:	b508      	push	{r3, lr}
   b7212:	4b02      	ldr	r3, [pc, #8]	; (b721c <hal_i2c_peek+0xc>)
   b7214:	681b      	ldr	r3, [r3, #0]
   b7216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7218:	9301      	str	r3, [sp, #4]
   b721a:	bd08      	pop	{r3, pc}
   b721c:	00030228 	.word	0x00030228

000b7220 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b7220:	b508      	push	{r3, lr}
   b7222:	4b02      	ldr	r3, [pc, #8]	; (b722c <hal_i2c_flush+0xc>)
   b7224:	681b      	ldr	r3, [r3, #0]
   b7226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7228:	9301      	str	r3, [sp, #4]
   b722a:	bd08      	pop	{r3, pc}
   b722c:	00030228 	.word	0x00030228

000b7230 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b7230:	b508      	push	{r3, lr}
   b7232:	4b02      	ldr	r3, [pc, #8]	; (b723c <hal_i2c_is_enabled+0xc>)
   b7234:	681b      	ldr	r3, [r3, #0]
   b7236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7238:	9301      	str	r3, [sp, #4]
   b723a:	bd08      	pop	{r3, pc}
   b723c:	00030228 	.word	0x00030228

000b7240 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b7240:	b508      	push	{r3, lr}
   b7242:	4b02      	ldr	r3, [pc, #8]	; (b724c <hal_i2c_init+0xc>)
   b7244:	681b      	ldr	r3, [r3, #0]
   b7246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7248:	9301      	str	r3, [sp, #4]
   b724a:	bd08      	pop	{r3, pc}
   b724c:	00030228 	.word	0x00030228

000b7250 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b7250:	b508      	push	{r3, lr}
   b7252:	4b02      	ldr	r3, [pc, #8]	; (b725c <hal_i2c_request_ex+0xc>)
   b7254:	681b      	ldr	r3, [r3, #0]
   b7256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7258:	9301      	str	r3, [sp, #4]
   b725a:	bd08      	pop	{r3, pc}
   b725c:	00030228 	.word	0x00030228

000b7260 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b7260:	b508      	push	{r3, lr}
   b7262:	4b02      	ldr	r3, [pc, #8]	; (b726c <inet_inet_ntop+0xc>)
   b7264:	681b      	ldr	r3, [r3, #0]
   b7266:	695b      	ldr	r3, [r3, #20]
   b7268:	9301      	str	r3, [sp, #4]
   b726a:	bd08      	pop	{r3, pc}
   b726c:	00030264 	.word	0x00030264

000b7270 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b7270:	b508      	push	{r3, lr}
   b7272:	4b02      	ldr	r3, [pc, #8]	; (b727c <netdb_freeaddrinfo+0xc>)
   b7274:	681b      	ldr	r3, [r3, #0]
   b7276:	689b      	ldr	r3, [r3, #8]
   b7278:	9301      	str	r3, [sp, #4]
   b727a:	bd08      	pop	{r3, pc}
   b727c:	00030268 	.word	0x00030268

000b7280 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b7280:	b508      	push	{r3, lr}
   b7282:	4b02      	ldr	r3, [pc, #8]	; (b728c <netdb_getaddrinfo+0xc>)
   b7284:	681b      	ldr	r3, [r3, #0]
   b7286:	68db      	ldr	r3, [r3, #12]
   b7288:	9301      	str	r3, [sp, #4]
   b728a:	bd08      	pop	{r3, pc}
   b728c:	00030268 	.word	0x00030268

000b7290 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b7290:	b508      	push	{r3, lr}
   b7292:	4b02      	ldr	r3, [pc, #8]	; (b729c <hal_spi_begin+0xc>)
   b7294:	681b      	ldr	r3, [r3, #0]
   b7296:	681b      	ldr	r3, [r3, #0]
   b7298:	9301      	str	r3, [sp, #4]
   b729a:	bd08      	pop	{r3, pc}
   b729c:	00030230 	.word	0x00030230

000b72a0 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b72a0:	b508      	push	{r3, lr}
   b72a2:	4b02      	ldr	r3, [pc, #8]	; (b72ac <hal_spi_transfer+0xc>)
   b72a4:	681b      	ldr	r3, [r3, #0]
   b72a6:	695b      	ldr	r3, [r3, #20]
   b72a8:	9301      	str	r3, [sp, #4]
   b72aa:	bd08      	pop	{r3, pc}
   b72ac:	00030230 	.word	0x00030230

000b72b0 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b72b0:	b508      	push	{r3, lr}
   b72b2:	4b02      	ldr	r3, [pc, #8]	; (b72bc <hal_spi_init+0xc>)
   b72b4:	681b      	ldr	r3, [r3, #0]
   b72b6:	69db      	ldr	r3, [r3, #28]
   b72b8:	9301      	str	r3, [sp, #4]
   b72ba:	bd08      	pop	{r3, pc}
   b72bc:	00030230 	.word	0x00030230

000b72c0 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b72c0:	b508      	push	{r3, lr}
   b72c2:	4b02      	ldr	r3, [pc, #8]	; (b72cc <hal_spi_is_enabled+0xc>)
   b72c4:	681b      	ldr	r3, [r3, #0]
   b72c6:	6a1b      	ldr	r3, [r3, #32]
   b72c8:	9301      	str	r3, [sp, #4]
   b72ca:	bd08      	pop	{r3, pc}
   b72cc:	00030230 	.word	0x00030230

000b72d0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b72d0:	b508      	push	{r3, lr}
   b72d2:	4b02      	ldr	r3, [pc, #8]	; (b72dc <hal_spi_info+0xc>)
   b72d4:	681b      	ldr	r3, [r3, #0]
   b72d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b72d8:	9301      	str	r3, [sp, #4]
   b72da:	bd08      	pop	{r3, pc}
   b72dc:	00030230 	.word	0x00030230

000b72e0 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b72e0:	b508      	push	{r3, lr}
   b72e2:	4b02      	ldr	r3, [pc, #8]	; (b72ec <hal_spi_transfer_dma+0xc>)
   b72e4:	681b      	ldr	r3, [r3, #0]
   b72e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b72e8:	9301      	str	r3, [sp, #4]
   b72ea:	bd08      	pop	{r3, pc}
   b72ec:	00030230 	.word	0x00030230

000b72f0 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b72f0:	b508      	push	{r3, lr}
   b72f2:	4b02      	ldr	r3, [pc, #8]	; (b72fc <hal_spi_transfer_dma_status+0xc>)
   b72f4:	681b      	ldr	r3, [r3, #0]
   b72f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b72f8:	9301      	str	r3, [sp, #4]
   b72fa:	bd08      	pop	{r3, pc}
   b72fc:	00030230 	.word	0x00030230

000b7300 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b7300:	b508      	push	{r3, lr}
   b7302:	4b02      	ldr	r3, [pc, #8]	; (b730c <hal_spi_set_settings+0xc>)
   b7304:	681b      	ldr	r3, [r3, #0]
   b7306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7308:	9301      	str	r3, [sp, #4]
   b730a:	bd08      	pop	{r3, pc}
   b730c:	00030230 	.word	0x00030230

000b7310 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b7310:	b508      	push	{r3, lr}
   b7312:	4b02      	ldr	r3, [pc, #8]	; (b731c <hal_spi_acquire+0xc>)
   b7314:	681b      	ldr	r3, [r3, #0]
   b7316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7318:	9301      	str	r3, [sp, #4]
   b731a:	bd08      	pop	{r3, pc}
   b731c:	00030230 	.word	0x00030230

000b7320 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b7320:	b508      	push	{r3, lr}
   b7322:	4b02      	ldr	r3, [pc, #8]	; (b732c <hal_spi_release+0xc>)
   b7324:	681b      	ldr	r3, [r3, #0]
   b7326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7328:	9301      	str	r3, [sp, #4]
   b732a:	bd08      	pop	{r3, pc}
   b732c:	00030230 	.word	0x00030230

000b7330 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b7330:	b508      	push	{r3, lr}
   b7332:	4b02      	ldr	r3, [pc, #8]	; (b733c <hal_usart_write+0xc>)
   b7334:	681b      	ldr	r3, [r3, #0]
   b7336:	68db      	ldr	r3, [r3, #12]
   b7338:	9301      	str	r3, [sp, #4]
   b733a:	bd08      	pop	{r3, pc}
   b733c:	0003023c 	.word	0x0003023c

000b7340 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b7340:	b508      	push	{r3, lr}
   b7342:	4b02      	ldr	r3, [pc, #8]	; (b734c <hal_usart_available+0xc>)
   b7344:	681b      	ldr	r3, [r3, #0]
   b7346:	691b      	ldr	r3, [r3, #16]
   b7348:	9301      	str	r3, [sp, #4]
   b734a:	bd08      	pop	{r3, pc}
   b734c:	0003023c 	.word	0x0003023c

000b7350 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b7350:	b508      	push	{r3, lr}
   b7352:	4b02      	ldr	r3, [pc, #8]	; (b735c <hal_usart_read+0xc>)
   b7354:	681b      	ldr	r3, [r3, #0]
   b7356:	695b      	ldr	r3, [r3, #20]
   b7358:	9301      	str	r3, [sp, #4]
   b735a:	bd08      	pop	{r3, pc}
   b735c:	0003023c 	.word	0x0003023c

000b7360 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b7360:	b508      	push	{r3, lr}
   b7362:	4b02      	ldr	r3, [pc, #8]	; (b736c <hal_usart_peek+0xc>)
   b7364:	681b      	ldr	r3, [r3, #0]
   b7366:	699b      	ldr	r3, [r3, #24]
   b7368:	9301      	str	r3, [sp, #4]
   b736a:	bd08      	pop	{r3, pc}
   b736c:	0003023c 	.word	0x0003023c

000b7370 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b7370:	b508      	push	{r3, lr}
   b7372:	4b02      	ldr	r3, [pc, #8]	; (b737c <hal_usart_flush+0xc>)
   b7374:	681b      	ldr	r3, [r3, #0]
   b7376:	69db      	ldr	r3, [r3, #28]
   b7378:	9301      	str	r3, [sp, #4]
   b737a:	bd08      	pop	{r3, pc}
   b737c:	0003023c 	.word	0x0003023c

000b7380 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b7380:	b508      	push	{r3, lr}
   b7382:	4b02      	ldr	r3, [pc, #8]	; (b738c <hal_usart_is_enabled+0xc>)
   b7384:	681b      	ldr	r3, [r3, #0]
   b7386:	6a1b      	ldr	r3, [r3, #32]
   b7388:	9301      	str	r3, [sp, #4]
   b738a:	bd08      	pop	{r3, pc}
   b738c:	0003023c 	.word	0x0003023c

000b7390 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b7390:	b508      	push	{r3, lr}
   b7392:	4b02      	ldr	r3, [pc, #8]	; (b739c <hal_usart_available_data_for_write+0xc>)
   b7394:	681b      	ldr	r3, [r3, #0]
   b7396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7398:	9301      	str	r3, [sp, #4]
   b739a:	bd08      	pop	{r3, pc}
   b739c:	0003023c 	.word	0x0003023c

000b73a0 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b73a0:	b508      	push	{r3, lr}
   b73a2:	4b02      	ldr	r3, [pc, #8]	; (b73ac <hal_usart_init_ex+0xc>)
   b73a4:	681b      	ldr	r3, [r3, #0]
   b73a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b73a8:	9301      	str	r3, [sp, #4]
   b73aa:	bd08      	pop	{r3, pc}
   b73ac:	0003023c 	.word	0x0003023c

000b73b0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b73b0:	b508      	push	{r3, lr}
   b73b2:	4b02      	ldr	r3, [pc, #8]	; (b73bc <HAL_USB_USART_Init+0xc>)
   b73b4:	681b      	ldr	r3, [r3, #0]
   b73b6:	681b      	ldr	r3, [r3, #0]
   b73b8:	9301      	str	r3, [sp, #4]
   b73ba:	bd08      	pop	{r3, pc}
   b73bc:	0003024c 	.word	0x0003024c

000b73c0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b73c0:	b508      	push	{r3, lr}
   b73c2:	4b02      	ldr	r3, [pc, #8]	; (b73cc <HAL_USB_USART_Begin+0xc>)
   b73c4:	681b      	ldr	r3, [r3, #0]
   b73c6:	685b      	ldr	r3, [r3, #4]
   b73c8:	9301      	str	r3, [sp, #4]
   b73ca:	bd08      	pop	{r3, pc}
   b73cc:	0003024c 	.word	0x0003024c

000b73d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b73d0:	b508      	push	{r3, lr}
   b73d2:	4b02      	ldr	r3, [pc, #8]	; (b73dc <HAL_USB_USART_Available_Data+0xc>)
   b73d4:	681b      	ldr	r3, [r3, #0]
   b73d6:	691b      	ldr	r3, [r3, #16]
   b73d8:	9301      	str	r3, [sp, #4]
   b73da:	bd08      	pop	{r3, pc}
   b73dc:	0003024c 	.word	0x0003024c

000b73e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b73e0:	b508      	push	{r3, lr}
   b73e2:	4b02      	ldr	r3, [pc, #8]	; (b73ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b73e4:	681b      	ldr	r3, [r3, #0]
   b73e6:	695b      	ldr	r3, [r3, #20]
   b73e8:	9301      	str	r3, [sp, #4]
   b73ea:	bd08      	pop	{r3, pc}
   b73ec:	0003024c 	.word	0x0003024c

000b73f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b73f0:	b508      	push	{r3, lr}
   b73f2:	4b02      	ldr	r3, [pc, #8]	; (b73fc <HAL_USB_USART_Receive_Data+0xc>)
   b73f4:	681b      	ldr	r3, [r3, #0]
   b73f6:	699b      	ldr	r3, [r3, #24]
   b73f8:	9301      	str	r3, [sp, #4]
   b73fa:	bd08      	pop	{r3, pc}
   b73fc:	0003024c 	.word	0x0003024c

000b7400 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b7400:	b508      	push	{r3, lr}
   b7402:	4b02      	ldr	r3, [pc, #8]	; (b740c <HAL_USB_USART_Send_Data+0xc>)
   b7404:	681b      	ldr	r3, [r3, #0]
   b7406:	69db      	ldr	r3, [r3, #28]
   b7408:	9301      	str	r3, [sp, #4]
   b740a:	bd08      	pop	{r3, pc}
   b740c:	0003024c 	.word	0x0003024c

000b7410 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b7410:	b508      	push	{r3, lr}
   b7412:	4b02      	ldr	r3, [pc, #8]	; (b741c <HAL_USB_USART_Flush_Data+0xc>)
   b7414:	681b      	ldr	r3, [r3, #0]
   b7416:	6a1b      	ldr	r3, [r3, #32]
   b7418:	9301      	str	r3, [sp, #4]
   b741a:	bd08      	pop	{r3, pc}
   b741c:	0003024c 	.word	0x0003024c

000b7420 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b7420:	b508      	push	{r3, lr}
   b7422:	4b02      	ldr	r3, [pc, #8]	; (b742c <HAL_USB_USART_Is_Enabled+0xc>)
   b7424:	681b      	ldr	r3, [r3, #0]
   b7426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7428:	9301      	str	r3, [sp, #4]
   b742a:	bd08      	pop	{r3, pc}
   b742c:	0003024c 	.word	0x0003024c

000b7430 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b7430:	b508      	push	{r3, lr}
   b7432:	4b02      	ldr	r3, [pc, #8]	; (b743c <set_system_mode+0xc>)
   b7434:	681b      	ldr	r3, [r3, #0]
   b7436:	685b      	ldr	r3, [r3, #4]
   b7438:	9301      	str	r3, [sp, #4]
   b743a:	bd08      	pop	{r3, pc}
   b743c:	00030220 	.word	0x00030220

000b7440 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b7440:	b508      	push	{r3, lr}
   b7442:	4b02      	ldr	r3, [pc, #8]	; (b744c <system_delay_ms+0xc>)
   b7444:	681b      	ldr	r3, [r3, #0]
   b7446:	695b      	ldr	r3, [r3, #20]
   b7448:	9301      	str	r3, [sp, #4]
   b744a:	bd08      	pop	{r3, pc}
   b744c:	00030220 	.word	0x00030220

000b7450 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b7450:	b508      	push	{r3, lr}
   b7452:	4b02      	ldr	r3, [pc, #8]	; (b745c <system_thread_set_state+0xc>)
   b7454:	681b      	ldr	r3, [r3, #0]
   b7456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7458:	9301      	str	r3, [sp, #4]
   b745a:	bd08      	pop	{r3, pc}
   b745c:	00030220 	.word	0x00030220

000b7460 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b7460:	b508      	push	{r3, lr}
   b7462:	4b03      	ldr	r3, [pc, #12]	; (b7470 <system_ctrl_set_app_request_handler+0x10>)
   b7464:	681b      	ldr	r3, [r3, #0]
   b7466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b746a:	9301      	str	r3, [sp, #4]
   b746c:	bd08      	pop	{r3, pc}
   b746e:	0000      	.short	0x0000
   b7470:	00030220 	.word	0x00030220

000b7474 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b7474:	b508      	push	{r3, lr}
   b7476:	4b03      	ldr	r3, [pc, #12]	; (b7484 <system_ctrl_set_result+0x10>)
   b7478:	681b      	ldr	r3, [r3, #0]
   b747a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b747e:	9301      	str	r3, [sp, #4]
   b7480:	bd08      	pop	{r3, pc}
   b7482:	0000      	.short	0x0000
   b7484:	00030220 	.word	0x00030220

000b7488 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b7488:	b508      	push	{r3, lr}
   b748a:	4b02      	ldr	r3, [pc, #8]	; (b7494 <spark_process+0xc>)
   b748c:	681b      	ldr	r3, [r3, #0]
   b748e:	689b      	ldr	r3, [r3, #8]
   b7490:	9301      	str	r3, [sp, #4]
   b7492:	bd08      	pop	{r3, pc}
   b7494:	00030244 	.word	0x00030244

000b7498 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7498:	b508      	push	{r3, lr}
   b749a:	4b02      	ldr	r3, [pc, #8]	; (b74a4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b749c:	681b      	ldr	r3, [r3, #0]
   b749e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b74a0:	9301      	str	r3, [sp, #4]
   b74a2:	bd08      	pop	{r3, pc}
   b74a4:	00030244 	.word	0x00030244

000b74a8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b74a8:	b508      	push	{r3, lr}
   b74aa:	4b02      	ldr	r3, [pc, #8]	; (b74b4 <network_connect+0xc>)
   b74ac:	681b      	ldr	r3, [r3, #0]
   b74ae:	685b      	ldr	r3, [r3, #4]
   b74b0:	9301      	str	r3, [sp, #4]
   b74b2:	bd08      	pop	{r3, pc}
   b74b4:	00030240 	.word	0x00030240

000b74b8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b74b8:	b508      	push	{r3, lr}
   b74ba:	4b02      	ldr	r3, [pc, #8]	; (b74c4 <network_connecting+0xc>)
   b74bc:	681b      	ldr	r3, [r3, #0]
   b74be:	689b      	ldr	r3, [r3, #8]
   b74c0:	9301      	str	r3, [sp, #4]
   b74c2:	bd08      	pop	{r3, pc}
   b74c4:	00030240 	.word	0x00030240

000b74c8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b74c8:	b508      	push	{r3, lr}
   b74ca:	4b02      	ldr	r3, [pc, #8]	; (b74d4 <network_disconnect+0xc>)
   b74cc:	681b      	ldr	r3, [r3, #0]
   b74ce:	68db      	ldr	r3, [r3, #12]
   b74d0:	9301      	str	r3, [sp, #4]
   b74d2:	bd08      	pop	{r3, pc}
   b74d4:	00030240 	.word	0x00030240

000b74d8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b74d8:	b508      	push	{r3, lr}
   b74da:	4b02      	ldr	r3, [pc, #8]	; (b74e4 <network_ready+0xc>)
   b74dc:	681b      	ldr	r3, [r3, #0]
   b74de:	691b      	ldr	r3, [r3, #16]
   b74e0:	9301      	str	r3, [sp, #4]
   b74e2:	bd08      	pop	{r3, pc}
   b74e4:	00030240 	.word	0x00030240

000b74e8 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b74e8:	b508      	push	{r3, lr}
   b74ea:	4b02      	ldr	r3, [pc, #8]	; (b74f4 <network_on+0xc>)
   b74ec:	681b      	ldr	r3, [r3, #0]
   b74ee:	695b      	ldr	r3, [r3, #20]
   b74f0:	9301      	str	r3, [sp, #4]
   b74f2:	bd08      	pop	{r3, pc}
   b74f4:	00030240 	.word	0x00030240

000b74f8 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b74f8:	b508      	push	{r3, lr}
   b74fa:	4b02      	ldr	r3, [pc, #8]	; (b7504 <network_off+0xc>)
   b74fc:	681b      	ldr	r3, [r3, #0]
   b74fe:	699b      	ldr	r3, [r3, #24]
   b7500:	9301      	str	r3, [sp, #4]
   b7502:	bd08      	pop	{r3, pc}
   b7504:	00030240 	.word	0x00030240

000b7508 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b7508:	b508      	push	{r3, lr}
   b750a:	4b02      	ldr	r3, [pc, #8]	; (b7514 <network_listen+0xc>)
   b750c:	681b      	ldr	r3, [r3, #0]
   b750e:	69db      	ldr	r3, [r3, #28]
   b7510:	9301      	str	r3, [sp, #4]
   b7512:	bd08      	pop	{r3, pc}
   b7514:	00030240 	.word	0x00030240

000b7518 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b7518:	b508      	push	{r3, lr}
   b751a:	4b02      	ldr	r3, [pc, #8]	; (b7524 <network_listening+0xc>)
   b751c:	681b      	ldr	r3, [r3, #0]
   b751e:	6a1b      	ldr	r3, [r3, #32]
   b7520:	9301      	str	r3, [sp, #4]
   b7522:	bd08      	pop	{r3, pc}
   b7524:	00030240 	.word	0x00030240

000b7528 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b7528:	b508      	push	{r3, lr}
   b752a:	4b02      	ldr	r3, [pc, #8]	; (b7534 <network_set_listen_timeout+0xc>)
   b752c:	681b      	ldr	r3, [r3, #0]
   b752e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7530:	9301      	str	r3, [sp, #4]
   b7532:	bd08      	pop	{r3, pc}
   b7534:	00030240 	.word	0x00030240

000b7538 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b7538:	b508      	push	{r3, lr}
   b753a:	4b02      	ldr	r3, [pc, #8]	; (b7544 <network_get_listen_timeout+0xc>)
   b753c:	681b      	ldr	r3, [r3, #0]
   b753e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7540:	9301      	str	r3, [sp, #4]
   b7542:	bd08      	pop	{r3, pc}
   b7544:	00030240 	.word	0x00030240

000b7548 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b7548:	b508      	push	{r3, lr}
   b754a:	4b02      	ldr	r3, [pc, #8]	; (b7554 <network_is_on+0xc>)
   b754c:	681b      	ldr	r3, [r3, #0]
   b754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7550:	9301      	str	r3, [sp, #4]
   b7552:	bd08      	pop	{r3, pc}
   b7554:	00030240 	.word	0x00030240

000b7558 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7558:	b508      	push	{r3, lr}
   b755a:	4b02      	ldr	r3, [pc, #8]	; (b7564 <network_is_off+0xc>)
   b755c:	681b      	ldr	r3, [r3, #0]
   b755e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7560:	9301      	str	r3, [sp, #4]
   b7562:	bd08      	pop	{r3, pc}
   b7564:	00030240 	.word	0x00030240

000b7568 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7568:	b508      	push	{r3, lr}
   b756a:	4b02      	ldr	r3, [pc, #8]	; (b7574 <malloc+0xc>)
   b756c:	681b      	ldr	r3, [r3, #0]
   b756e:	681b      	ldr	r3, [r3, #0]
   b7570:	9301      	str	r3, [sp, #4]
   b7572:	bd08      	pop	{r3, pc}
   b7574:	0003021c 	.word	0x0003021c

000b7578 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7578:	b508      	push	{r3, lr}
   b757a:	4b02      	ldr	r3, [pc, #8]	; (b7584 <free+0xc>)
   b757c:	681b      	ldr	r3, [r3, #0]
   b757e:	685b      	ldr	r3, [r3, #4]
   b7580:	9301      	str	r3, [sp, #4]
   b7582:	bd08      	pop	{r3, pc}
   b7584:	0003021c 	.word	0x0003021c

000b7588 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7588:	b508      	push	{r3, lr}
   b758a:	4b02      	ldr	r3, [pc, #8]	; (b7594 <vsnprintf+0xc>)
   b758c:	681b      	ldr	r3, [r3, #0]
   b758e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7590:	9301      	str	r3, [sp, #4]
   b7592:	bd08      	pop	{r3, pc}
   b7594:	0003021c 	.word	0x0003021c

000b7598 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b7598:	b508      	push	{r3, lr}
   b759a:	4b02      	ldr	r3, [pc, #8]	; (b75a4 <__assert_func+0xc>)
   b759c:	681b      	ldr	r3, [r3, #0]
   b759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b75a0:	9301      	str	r3, [sp, #4]
   b75a2:	bd08      	pop	{r3, pc}
   b75a4:	0003021c 	.word	0x0003021c

000b75a8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b75a8:	b508      	push	{r3, lr}
   b75aa:	4b02      	ldr	r3, [pc, #8]	; (b75b4 <newlib_impure_ptr_callback+0xc>)
   b75ac:	681b      	ldr	r3, [r3, #0]
   b75ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b75b0:	9301      	str	r3, [sp, #4]
   b75b2:	bd08      	pop	{r3, pc}
   b75b4:	0003021c 	.word	0x0003021c

000b75b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b75b8:	2100      	movs	r1, #0
   b75ba:	f7ff bf41 	b.w	b7440 <system_delay_ms>
	...

000b75c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b75c0:	4802      	ldr	r0, [pc, #8]	; (b75cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b75c2:	2300      	movs	r3, #0
   b75c4:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b75c6:	f7ff bdb3 	b.w	b7130 <os_mutex_recursive_create>
   b75ca:	bf00      	nop
   b75cc:	2003e6c4 	.word	0x2003e6c4

000b75d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b75d0:	2200      	movs	r2, #0
   b75d2:	6840      	ldr	r0, [r0, #4]
   b75d4:	4611      	mov	r1, r2
   b75d6:	f7ff bf9f 	b.w	b7518 <network_listening>

000b75da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b75da:	2200      	movs	r2, #0
   b75dc:	6840      	ldr	r0, [r0, #4]
   b75de:	4611      	mov	r1, r2
   b75e0:	f7ff bfaa 	b.w	b7538 <network_get_listen_timeout>

000b75e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b75e4:	6840      	ldr	r0, [r0, #4]
   b75e6:	2200      	movs	r2, #0
   b75e8:	f7ff bf9e 	b.w	b7528 <network_set_listen_timeout>

000b75ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b75ec:	6840      	ldr	r0, [r0, #4]
   b75ee:	2200      	movs	r2, #0
   b75f0:	f081 0101 	eor.w	r1, r1, #1
   b75f4:	f7ff bf88 	b.w	b7508 <network_listen>

000b75f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b75f8:	2300      	movs	r3, #0
   b75fa:	6840      	ldr	r0, [r0, #4]
   b75fc:	461a      	mov	r2, r3
   b75fe:	4619      	mov	r1, r3
   b7600:	f7ff bf7a 	b.w	b74f8 <network_off>

000b7604 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7604:	2300      	movs	r3, #0
   b7606:	6840      	ldr	r0, [r0, #4]
   b7608:	461a      	mov	r2, r3
   b760a:	4619      	mov	r1, r3
   b760c:	f7ff bf6c 	b.w	b74e8 <network_on>

000b7610 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b7610:	2200      	movs	r2, #0
   b7612:	6840      	ldr	r0, [r0, #4]
   b7614:	4611      	mov	r1, r2
   b7616:	f7ff bf5f 	b.w	b74d8 <network_ready>

000b761a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b761a:	2200      	movs	r2, #0
   b761c:	6840      	ldr	r0, [r0, #4]
   b761e:	4611      	mov	r1, r2
   b7620:	f7ff bf4a 	b.w	b74b8 <network_connecting>

000b7624 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b7624:	6840      	ldr	r0, [r0, #4]
   b7626:	2200      	movs	r2, #0
   b7628:	2102      	movs	r1, #2
   b762a:	f7ff bf4d 	b.w	b74c8 <network_disconnect>

000b762e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b762e:	2300      	movs	r3, #0
   b7630:	6840      	ldr	r0, [r0, #4]
   b7632:	461a      	mov	r2, r3
   b7634:	f7ff bf38 	b.w	b74a8 <network_connect>

000b7638 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b7638:	4b02      	ldr	r3, [pc, #8]	; (b7644 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b763a:	2203      	movs	r2, #3
   b763c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b763e:	4a02      	ldr	r2, [pc, #8]	; (b7648 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b7640:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b7642:	4770      	bx	lr
   b7644:	2003e6c8 	.word	0x2003e6c8
   b7648:	000b92bc 	.word	0x000b92bc

000b764c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b764c:	4770      	bx	lr

000b764e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b764e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7650:	4606      	mov	r6, r0
   b7652:	4615      	mov	r5, r2
   b7654:	460c      	mov	r4, r1
   b7656:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b7658:	42bc      	cmp	r4, r7
   b765a:	d006      	beq.n	b766a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b765c:	6833      	ldr	r3, [r6, #0]
   b765e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7662:	689b      	ldr	r3, [r3, #8]
   b7664:	4630      	mov	r0, r6
   b7666:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b7668:	e7f6      	b.n	b7658 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b766a:	4628      	mov	r0, r5
   b766c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b766e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b766e:	7c00      	ldrb	r0, [r0, #16]
   b7670:	2200      	movs	r2, #0
   b7672:	f7ff bdb5 	b.w	b71e0 <hal_i2c_write>

000b7676 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b7676:	7c00      	ldrb	r0, [r0, #16]
   b7678:	2100      	movs	r1, #0
   b767a:	f7ff bdb9 	b.w	b71f0 <hal_i2c_available>

000b767e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b767e:	7c00      	ldrb	r0, [r0, #16]
   b7680:	2100      	movs	r1, #0
   b7682:	f7ff bdbd 	b.w	b7200 <hal_i2c_read>

000b7686 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b7686:	7c00      	ldrb	r0, [r0, #16]
   b7688:	2100      	movs	r1, #0
   b768a:	f7ff bdc1 	b.w	b7210 <hal_i2c_peek>

000b768e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b768e:	7c00      	ldrb	r0, [r0, #16]
   b7690:	2100      	movs	r1, #0
   b7692:	f7ff bdc5 	b.w	b7220 <hal_i2c_flush>

000b7696 <_ZN7TwoWireD0Ev>:
   b7696:	b510      	push	{r4, lr}
   b7698:	2114      	movs	r1, #20
   b769a:	4604      	mov	r4, r0
   b769c:	f7fc fcff 	bl	b409e <_ZdlPvj>
   b76a0:	4620      	mov	r0, r4
   b76a2:	bd10      	pop	{r4, pc}

000b76a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b76a4:	b538      	push	{r3, r4, r5, lr}
   b76a6:	4604      	mov	r4, r0
   b76a8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b76aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b76ae:	2200      	movs	r2, #0
   b76b0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b76b4:	4b09      	ldr	r3, [pc, #36]	; (b76dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b76b6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b76b8:	4608      	mov	r0, r1
   b76ba:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b76bc:	4629      	mov	r1, r5
   b76be:	f7ff fdbf 	bl	b7240 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b76c2:	30bf      	adds	r0, #191	; 0xbf
   b76c4:	d108      	bne.n	b76d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b76c6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b76c8:	07db      	lsls	r3, r3, #31
   b76ca:	d505      	bpl.n	b76d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b76cc:	6868      	ldr	r0, [r5, #4]
   b76ce:	f7ff ff53 	bl	b7578 <free>
    free(conf.tx_buffer);
   b76d2:	68e8      	ldr	r0, [r5, #12]
   b76d4:	f7ff ff50 	bl	b7578 <free>
}
   b76d8:	4620      	mov	r0, r4
   b76da:	bd38      	pop	{r3, r4, r5, pc}
   b76dc:	000b92f8 	.word	0x000b92f8

000b76e0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b76e0:	2300      	movs	r3, #0
   b76e2:	7c00      	ldrb	r0, [r0, #16]
   b76e4:	461a      	mov	r2, r3
   b76e6:	4619      	mov	r1, r3
   b76e8:	f7ff bd62 	b.w	b71b0 <hal_i2c_begin>

000b76ec <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b76ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b76ee:	2200      	movs	r2, #0
   b76f0:	2314      	movs	r3, #20
   b76f2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b76f6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b76fa:	780b      	ldrb	r3, [r1, #0]
   b76fc:	f88d 3008 	strb.w	r3, [sp, #8]
   b7700:	684b      	ldr	r3, [r1, #4]
   b7702:	9303      	str	r3, [sp, #12]
   b7704:	68cb      	ldr	r3, [r1, #12]
   b7706:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b7708:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b770a:	7a0b      	ldrb	r3, [r1, #8]
   b770c:	9305      	str	r3, [sp, #20]
   b770e:	a901      	add	r1, sp, #4
   b7710:	f7ff fd9e 	bl	b7250 <hal_i2c_request_ex>
}
   b7714:	b007      	add	sp, #28
   b7716:	f85d fb04 	ldr.w	pc, [sp], #4

000b771a <_ZN7TwoWire11requestFromEhjh>:
{
   b771a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b771c:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b771e:	f88d 1000 	strb.w	r1, [sp]
   b7722:	f04f 0164 	mov.w	r1, #100	; 0x64
   b7726:	9103      	str	r1, [sp, #12]
   b7728:	bf18      	it	ne
   b772a:	2301      	movne	r3, #1
   b772c:	4669      	mov	r1, sp
    size_ = size;
   b772e:	9201      	str	r2, [sp, #4]
   b7730:	f88d 3008 	strb.w	r3, [sp, #8]
   b7734:	f7ff ffda 	bl	b76ec <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b7738:	b005      	add	sp, #20
   b773a:	f85d fb04 	ldr.w	pc, [sp], #4

000b773e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b773e:	2301      	movs	r3, #1
   b7740:	f7ff bfeb 	b.w	b771a <_ZN7TwoWire11requestFromEhjh>

000b7744 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b7744:	7c00      	ldrb	r0, [r0, #16]
   b7746:	2200      	movs	r2, #0
   b7748:	f7ff bd3a 	b.w	b71c0 <hal_i2c_begin_transmission>

000b774c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b774c:	b2c9      	uxtb	r1, r1
   b774e:	f7ff bff9 	b.w	b7744 <_ZN7TwoWire17beginTransmissionEh>

000b7752 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b7752:	7c00      	ldrb	r0, [r0, #16]
   b7754:	2200      	movs	r2, #0
   b7756:	f7ff bd3b 	b.w	b71d0 <hal_i2c_end_transmission>

000b775a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b775a:	2101      	movs	r1, #1
   b775c:	f7ff bff9 	b.w	b7752 <_ZN7TwoWire15endTransmissionEh>

000b7760 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b7760:	4770      	bx	lr

000b7762 <_ZN9IPAddressD0Ev>:
   b7762:	b510      	push	{r4, lr}
   b7764:	2118      	movs	r1, #24
   b7766:	4604      	mov	r4, r0
   b7768:	f7fc fc99 	bl	b409e <_ZdlPvj>
   b776c:	4620      	mov	r0, r4
   b776e:	bd10      	pop	{r4, pc}

000b7770 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b7770:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b7772:	7d03      	ldrb	r3, [r0, #20]
   b7774:	2b06      	cmp	r3, #6
{
   b7776:	b08d      	sub	sp, #52	; 0x34
   b7778:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b777a:	f100 0704 	add.w	r7, r0, #4
   b777e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b7782:	d012      	beq.n	b77aa <_ZNK9IPAddress7printToER5Print+0x3a>
   b7784:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b7788:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b778c:	220a      	movs	r2, #10
   b778e:	4630      	mov	r0, r6
   b7790:	f000 f94d 	bl	b7a2e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b7794:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b7796:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b7798:	d019      	beq.n	b77ce <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b779a:	2c00      	cmp	r4, #0
   b779c:	d0f4      	beq.n	b7788 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b779e:	212e      	movs	r1, #46	; 0x2e
   b77a0:	4630      	mov	r0, r6
   b77a2:	f000 f929 	bl	b79f8 <_ZN5Print5printEc>
   b77a6:	4404      	add	r4, r0
   b77a8:	e7ee      	b.n	b7788 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b77aa:	232f      	movs	r3, #47	; 0x2f
   b77ac:	466a      	mov	r2, sp
   b77ae:	4639      	mov	r1, r7
   b77b0:	200a      	movs	r0, #10
		buf[0] = 0;
   b77b2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b77b6:	f7ff fd53 	bl	b7260 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b77ba:	4668      	mov	r0, sp
   b77bc:	f001 fb44 	bl	b8e48 <strlen>
   b77c0:	6833      	ldr	r3, [r6, #0]
   b77c2:	4602      	mov	r2, r0
   b77c4:	68db      	ldr	r3, [r3, #12]
   b77c6:	4669      	mov	r1, sp
   b77c8:	4630      	mov	r0, r6
   b77ca:	4798      	blx	r3
   b77cc:	4604      	mov	r4, r0
    }
    return n;
}
   b77ce:	4620      	mov	r0, r4
   b77d0:	b00d      	add	sp, #52	; 0x34
   b77d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b77d4 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b77d4:	b510      	push	{r4, lr}
   b77d6:	4b05      	ldr	r3, [pc, #20]	; (b77ec <_ZN9IPAddressC1Ev+0x18>)
   b77d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b77da:	2211      	movs	r2, #17
   b77dc:	f840 3b04 	str.w	r3, [r0], #4
   b77e0:	2100      	movs	r1, #0
   b77e2:	f001 fafb 	bl	b8ddc <memset>
}
   b77e6:	4620      	mov	r0, r4
   b77e8:	bd10      	pop	{r4, pc}
   b77ea:	bf00      	nop
   b77ec:	000b9320 	.word	0x000b9320

000b77f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b77f0:	4603      	mov	r3, r0
   b77f2:	4a07      	ldr	r2, [pc, #28]	; (b7810 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b77f4:	b510      	push	{r4, lr}
   b77f6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b77fa:	f101 0210 	add.w	r2, r1, #16
   b77fe:	f851 4b04 	ldr.w	r4, [r1], #4
   b7802:	f843 4b04 	str.w	r4, [r3], #4
   b7806:	4291      	cmp	r1, r2
   b7808:	d1f9      	bne.n	b77fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b780a:	780a      	ldrb	r2, [r1, #0]
   b780c:	701a      	strb	r2, [r3, #0]
}
   b780e:	bd10      	pop	{r4, pc}
   b7810:	000b9320 	.word	0x000b9320

000b7814 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b7814:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b7816:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b781a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b781e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b7822:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b7826:	2304      	movs	r3, #4
   b7828:	6041      	str	r1, [r0, #4]
   b782a:	7503      	strb	r3, [r0, #20]
}
   b782c:	bd10      	pop	{r4, pc}
	...

000b7830 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b7830:	b507      	push	{r0, r1, r2, lr}
   b7832:	4b06      	ldr	r3, [pc, #24]	; (b784c <_ZN9IPAddressC1EPKh+0x1c>)
   b7834:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b7836:	78cb      	ldrb	r3, [r1, #3]
   b7838:	9300      	str	r3, [sp, #0]
   b783a:	788b      	ldrb	r3, [r1, #2]
   b783c:	784a      	ldrb	r2, [r1, #1]
   b783e:	7809      	ldrb	r1, [r1, #0]
   b7840:	f7ff ffe8 	bl	b7814 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b7844:	b003      	add	sp, #12
   b7846:	f85d fb04 	ldr.w	pc, [sp], #4
   b784a:	bf00      	nop
   b784c:	000b9320 	.word	0x000b9320

000b7850 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b7850:	4b01      	ldr	r3, [pc, #4]	; (b7858 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b7852:	4a02      	ldr	r2, [pc, #8]	; (b785c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b7854:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b7856:	4770      	bx	lr
   b7858:	2003e6d0 	.word	0x2003e6d0
   b785c:	000b932c 	.word	0x000b932c

000b7860 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b7860:	2300      	movs	r3, #0
   b7862:	6840      	ldr	r0, [r0, #4]
   b7864:	461a      	mov	r2, r3
   b7866:	f7ff be1f 	b.w	b74a8 <network_connect>

000b786a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b786a:	6840      	ldr	r0, [r0, #4]
   b786c:	2200      	movs	r2, #0
   b786e:	2102      	movs	r1, #2
   b7870:	f7ff be2a 	b.w	b74c8 <network_disconnect>

000b7874 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b7874:	2200      	movs	r2, #0
   b7876:	6840      	ldr	r0, [r0, #4]
   b7878:	4611      	mov	r1, r2
   b787a:	f7ff be1d 	b.w	b74b8 <network_connecting>

000b787e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b787e:	2200      	movs	r2, #0
   b7880:	6840      	ldr	r0, [r0, #4]
   b7882:	4611      	mov	r1, r2
   b7884:	f7ff be28 	b.w	b74d8 <network_ready>

000b7888 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b7888:	2300      	movs	r3, #0
   b788a:	6840      	ldr	r0, [r0, #4]
   b788c:	461a      	mov	r2, r3
   b788e:	4619      	mov	r1, r3
   b7890:	f7ff be2a 	b.w	b74e8 <network_on>

000b7894 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b7894:	2300      	movs	r3, #0
   b7896:	6840      	ldr	r0, [r0, #4]
   b7898:	461a      	mov	r2, r3
   b789a:	4619      	mov	r1, r3
   b789c:	f7ff be2c 	b.w	b74f8 <network_off>

000b78a0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b78a0:	6840      	ldr	r0, [r0, #4]
   b78a2:	2100      	movs	r1, #0
   b78a4:	f7ff be50 	b.w	b7548 <network_is_on>

000b78a8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b78a8:	6840      	ldr	r0, [r0, #4]
   b78aa:	2100      	movs	r1, #0
   b78ac:	f7ff be54 	b.w	b7558 <network_is_off>

000b78b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b78b0:	6840      	ldr	r0, [r0, #4]
   b78b2:	2200      	movs	r2, #0
   b78b4:	f081 0101 	eor.w	r1, r1, #1
   b78b8:	f7ff be26 	b.w	b7508 <network_listen>

000b78bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b78bc:	6840      	ldr	r0, [r0, #4]
   b78be:	2200      	movs	r2, #0
   b78c0:	f7ff be32 	b.w	b7528 <network_set_listen_timeout>

000b78c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b78c4:	2200      	movs	r2, #0
   b78c6:	6840      	ldr	r0, [r0, #4]
   b78c8:	4611      	mov	r1, r2
   b78ca:	f7ff be35 	b.w	b7538 <network_get_listen_timeout>

000b78ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b78ce:	2200      	movs	r2, #0
   b78d0:	6840      	ldr	r0, [r0, #4]
   b78d2:	4611      	mov	r1, r2
   b78d4:	f7ff be20 	b.w	b7518 <network_listening>

000b78d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b78d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b78dc:	b095      	sub	sp, #84	; 0x54
   b78de:	4614      	mov	r4, r2
   b78e0:	460d      	mov	r5, r1
   b78e2:	4607      	mov	r7, r0
    IPAddress addr;
   b78e4:	f7ff ff76 	bl	b77d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b78e8:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b78ea:	221c      	movs	r2, #28
   b78ec:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b78ee:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b78f0:	f001 fa74 	bl	b8ddc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b78f4:	2340      	movs	r3, #64	; 0x40
   b78f6:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b78f8:	4620      	mov	r0, r4
   b78fa:	466b      	mov	r3, sp
   b78fc:	aa0c      	add	r2, sp, #48	; 0x30
   b78fe:	2100      	movs	r1, #0
   b7900:	f7ff fcbe 	bl	b7280 <netdb_getaddrinfo>
    if (!r) {
   b7904:	4604      	mov	r4, r0
   b7906:	2800      	cmp	r0, #0
   b7908:	d14b      	bne.n	b79a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b790a:	4602      	mov	r2, r0
   b790c:	2101      	movs	r1, #1
   b790e:	6868      	ldr	r0, [r5, #4]
   b7910:	f7ff fde2 	bl	b74d8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7914:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b7916:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7918:	4622      	mov	r2, r4
   b791a:	6868      	ldr	r0, [r5, #4]
   b791c:	f7ff fddc 	bl	b74d8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7920:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b7922:	4681      	mov	r9, r0
        bool ok = false;
   b7924:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7926:	2e00      	cmp	r6, #0
   b7928:	d03b      	beq.n	b79a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b792a:	2900      	cmp	r1, #0
   b792c:	d139      	bne.n	b79a2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b792e:	6873      	ldr	r3, [r6, #4]
   b7930:	2b02      	cmp	r3, #2
   b7932:	d003      	beq.n	b793c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b7934:	2b0a      	cmp	r3, #10
   b7936:	d011      	beq.n	b795c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b7938:	69f6      	ldr	r6, [r6, #28]
   b793a:	e7f4      	b.n	b7926 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b793c:	f1b8 0f00 	cmp.w	r8, #0
   b7940:	d0fa      	beq.n	b7938 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b7942:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b7944:	a806      	add	r0, sp, #24
   b7946:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b7948:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b794a:	f7ff ff71 	bl	b7830 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b794e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7950:	1d3c      	adds	r4, r7, #4
   b7952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7954:	682b      	ldr	r3, [r5, #0]
   b7956:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b7958:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b795a:	e7ed      	b.n	b7938 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b795c:	f1b9 0f00 	cmp.w	r9, #0
   b7960:	d0ea      	beq.n	b7938 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b7962:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b7964:	2210      	movs	r2, #16
   b7966:	a801      	add	r0, sp, #4
   b7968:	f001 fa38 	bl	b8ddc <memset>
                    a.v = 6;
   b796c:	2306      	movs	r3, #6
   b796e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b7972:	ad01      	add	r5, sp, #4
   b7974:	f104 0308 	add.w	r3, r4, #8
   b7978:	3418      	adds	r4, #24
   b797a:	6818      	ldr	r0, [r3, #0]
   b797c:	6859      	ldr	r1, [r3, #4]
   b797e:	462a      	mov	r2, r5
   b7980:	c203      	stmia	r2!, {r0, r1}
   b7982:	3308      	adds	r3, #8
   b7984:	42a3      	cmp	r3, r4
   b7986:	4615      	mov	r5, r2
   b7988:	d1f7      	bne.n	b797a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b798a:	a901      	add	r1, sp, #4
   b798c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b798e:	ad07      	add	r5, sp, #28
   b7990:	f7ff ff2e 	bl	b77f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b7994:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7996:	1d3c      	adds	r4, r7, #4
   b7998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b799a:	682b      	ldr	r3, [r5, #0]
   b799c:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b799e:	4649      	mov	r1, r9
   b79a0:	e7ca      	b.n	b7938 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b79a2:	9800      	ldr	r0, [sp, #0]
   b79a4:	f7ff fc64 	bl	b7270 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b79a8:	4638      	mov	r0, r7
   b79aa:	b015      	add	sp, #84	; 0x54
   b79ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b79b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b79b0:	4b02      	ldr	r3, [pc, #8]	; (b79bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b79b2:	4a03      	ldr	r2, [pc, #12]	; (b79c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b79b4:	601a      	str	r2, [r3, #0]
   b79b6:	2200      	movs	r2, #0
   b79b8:	605a      	str	r2, [r3, #4]

} // spark
   b79ba:	4770      	bx	lr
   b79bc:	2003e6d4 	.word	0x2003e6d4
   b79c0:	000b9338 	.word	0x000b9338

000b79c4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b79c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79c6:	4606      	mov	r6, r0
   b79c8:	460d      	mov	r5, r1
  size_t n = 0;
   b79ca:	188f      	adds	r7, r1, r2
   b79cc:	2400      	movs	r4, #0
  while (size--) {
   b79ce:	42bd      	cmp	r5, r7
   b79d0:	d00c      	beq.n	b79ec <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b79d2:	6833      	ldr	r3, [r6, #0]
   b79d4:	f815 1b01 	ldrb.w	r1, [r5], #1
   b79d8:	689b      	ldr	r3, [r3, #8]
   b79da:	4630      	mov	r0, r6
   b79dc:	4798      	blx	r3
     if (chunk>=0)
   b79de:	1e03      	subs	r3, r0, #0
   b79e0:	db01      	blt.n	b79e6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b79e2:	441c      	add	r4, r3
  while (size--) {
   b79e4:	e7f3      	b.n	b79ce <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b79e6:	2c00      	cmp	r4, #0
   b79e8:	bf08      	it	eq
   b79ea:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b79ec:	4620      	mov	r0, r4
   b79ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b79f0 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b79f0:	b508      	push	{r3, lr}
  return write(str);
   b79f2:	f7fe ff15 	bl	b6820 <_ZN5Print5writeEPKc>
}
   b79f6:	bd08      	pop	{r3, pc}

000b79f8 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b79f8:	6803      	ldr	r3, [r0, #0]
   b79fa:	689b      	ldr	r3, [r3, #8]
   b79fc:	4718      	bx	r3

000b79fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b79fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b7a00:	210d      	movs	r1, #13
{
   b7a02:	4605      	mov	r5, r0
  size_t n = print('\r');
   b7a04:	f7ff fff8 	bl	b79f8 <_ZN5Print5printEc>
  n += print('\n');
   b7a08:	210a      	movs	r1, #10
  size_t n = print('\r');
   b7a0a:	4604      	mov	r4, r0
  n += print('\n');
   b7a0c:	4628      	mov	r0, r5
   b7a0e:	f7ff fff3 	bl	b79f8 <_ZN5Print5printEc>
  return n;
}
   b7a12:	4420      	add	r0, r4
   b7a14:	bd38      	pop	{r3, r4, r5, pc}

000b7a16 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b7a16:	b538      	push	{r3, r4, r5, lr}
   b7a18:	4605      	mov	r5, r0
  return write(str);
   b7a1a:	f7fe ff01 	bl	b6820 <_ZN5Print5writeEPKc>
   b7a1e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b7a20:	4628      	mov	r0, r5
   b7a22:	f7ff ffec 	bl	b79fe <_ZN5Print7printlnEv>
  return n;
}
   b7a26:	4420      	add	r0, r4
   b7a28:	bd38      	pop	{r3, r4, r5, pc}

000b7a2a <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   b7a2a:	f7ff bff4 	b.w	b7a16 <_ZN5Print7printlnEPKc>

000b7a2e <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b7a2e:	b530      	push	{r4, r5, lr}
   b7a30:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b7a32:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b7a34:	2a01      	cmp	r2, #1
  *str = '\0';
   b7a36:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b7a3a:	bf98      	it	ls
   b7a3c:	220a      	movls	r2, #10
   b7a3e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b7a40:	460d      	mov	r5, r1
   b7a42:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b7a46:	fb01 5312 	mls	r3, r1, r2, r5
   b7a4a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7a4e:	2b09      	cmp	r3, #9
   b7a50:	bf94      	ite	ls
   b7a52:	3330      	addls	r3, #48	; 0x30
   b7a54:	3337      	addhi	r3, #55	; 0x37
   b7a56:	b2db      	uxtb	r3, r3
  } while(n);
   b7a58:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b7a5a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b7a5e:	d9ef      	bls.n	b7a40 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b7a60:	4621      	mov	r1, r4
   b7a62:	f7fe fedd 	bl	b6820 <_ZN5Print5writeEPKc>
}
   b7a66:	b00b      	add	sp, #44	; 0x2c
   b7a68:	bd30      	pop	{r4, r5, pc}
	...

000b7a6c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b7a6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b7a70:	ec55 4b10 	vmov	r4, r5, d0
   b7a74:	4606      	mov	r6, r0
   b7a76:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b7a78:	ee10 2a10 	vmov	r2, s0
   b7a7c:	ee10 0a10 	vmov	r0, s0
   b7a80:	462b      	mov	r3, r5
   b7a82:	4629      	mov	r1, r5
   b7a84:	f001 f8d8 	bl	b8c38 <__aeabi_dcmpun>
   b7a88:	b140      	cbz	r0, b7a9c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b7a8a:	4953      	ldr	r1, [pc, #332]	; (b7bd8 <_ZN5Print10printFloatEdh+0x16c>)
   b7a8c:	4630      	mov	r0, r6
   b7a8e:	f7fe fec7 	bl	b6820 <_ZN5Print5writeEPKc>
   b7a92:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b7a94:	4650      	mov	r0, sl
   b7a96:	b003      	add	sp, #12
   b7a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b7a9c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b7aa0:	4b4e      	ldr	r3, [pc, #312]	; (b7bdc <_ZN5Print10printFloatEdh+0x170>)
   b7aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7aa6:	4620      	mov	r0, r4
   b7aa8:	4649      	mov	r1, r9
   b7aaa:	f001 f8c5 	bl	b8c38 <__aeabi_dcmpun>
   b7aae:	b948      	cbnz	r0, b7ac4 <_ZN5Print10printFloatEdh+0x58>
   b7ab0:	4b4a      	ldr	r3, [pc, #296]	; (b7bdc <_ZN5Print10printFloatEdh+0x170>)
   b7ab2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b7ab6:	4620      	mov	r0, r4
   b7ab8:	4649      	mov	r1, r9
   b7aba:	f001 f89f 	bl	b8bfc <__aeabi_dcmple>
   b7abe:	b908      	cbnz	r0, b7ac4 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b7ac0:	4947      	ldr	r1, [pc, #284]	; (b7be0 <_ZN5Print10printFloatEdh+0x174>)
   b7ac2:	e7e3      	b.n	b7a8c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b7ac4:	4b47      	ldr	r3, [pc, #284]	; (b7be4 <_ZN5Print10printFloatEdh+0x178>)
   b7ac6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7aca:	4620      	mov	r0, r4
   b7acc:	4629      	mov	r1, r5
   b7ace:	f001 f8a9 	bl	b8c24 <__aeabi_dcmpgt>
   b7ad2:	b108      	cbz	r0, b7ad8 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b7ad4:	4944      	ldr	r1, [pc, #272]	; (b7be8 <_ZN5Print10printFloatEdh+0x17c>)
   b7ad6:	e7d9      	b.n	b7a8c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b7ad8:	4b44      	ldr	r3, [pc, #272]	; (b7bec <_ZN5Print10printFloatEdh+0x180>)
   b7ada:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b7ade:	4620      	mov	r0, r4
   b7ae0:	4629      	mov	r1, r5
   b7ae2:	f001 f881 	bl	b8be8 <__aeabi_dcmplt>
   b7ae6:	2800      	cmp	r0, #0
   b7ae8:	d1f4      	bne.n	b7ad4 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b7aea:	2200      	movs	r2, #0
   b7aec:	2300      	movs	r3, #0
   b7aee:	4620      	mov	r0, r4
   b7af0:	4629      	mov	r1, r5
   b7af2:	f001 f879 	bl	b8be8 <__aeabi_dcmplt>
   b7af6:	b1d0      	cbz	r0, b7b2e <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b7af8:	212d      	movs	r1, #45	; 0x2d
   b7afa:	4630      	mov	r0, r6
   b7afc:	f7ff ff7c 	bl	b79f8 <_ZN5Print5printEc>
     number = -number;
   b7b00:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b7b04:	4682      	mov	sl, r0
     number = -number;
   b7b06:	461d      	mov	r5, r3
  double rounding = 0.5;
   b7b08:	4939      	ldr	r1, [pc, #228]	; (b7bf0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b7b0a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b7bf8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b7b0e:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b7b12:	2000      	movs	r0, #0
    rounding /= 10.0;
   b7b14:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b7b18:	fa5f f38b 	uxtb.w	r3, fp
   b7b1c:	429f      	cmp	r7, r3
   b7b1e:	d908      	bls.n	b7b32 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b7b20:	4642      	mov	r2, r8
   b7b22:	464b      	mov	r3, r9
   b7b24:	f000 ff18 	bl	b8958 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b7b28:	f10b 0b01 	add.w	fp, fp, #1
   b7b2c:	e7f4      	b.n	b7b18 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b7b2e:	4682      	mov	sl, r0
   b7b30:	e7ea      	b.n	b7b08 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b7b32:	4622      	mov	r2, r4
   b7b34:	462b      	mov	r3, r5
   b7b36:	f000 fc2f 	bl	b8398 <__adddf3>
   b7b3a:	460d      	mov	r5, r1
   b7b3c:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b7b3e:	f001 f8b9 	bl	b8cb4 <__aeabi_d2uiz>
   b7b42:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b7b44:	f000 fd64 	bl	b8610 <__aeabi_ui2d>
   b7b48:	4602      	mov	r2, r0
   b7b4a:	460b      	mov	r3, r1
   b7b4c:	4620      	mov	r0, r4
   b7b4e:	4629      	mov	r1, r5
   b7b50:	f000 fc20 	bl	b8394 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b7b54:	220a      	movs	r2, #10
   b7b56:	4604      	mov	r4, r0
   b7b58:	460d      	mov	r5, r1
   b7b5a:	4630      	mov	r0, r6
   b7b5c:	4641      	mov	r1, r8
   b7b5e:	f7ff ff66 	bl	b7a2e <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b7b62:	4482      	add	sl, r0
  if (digits > 0) {
   b7b64:	2f00      	cmp	r7, #0
   b7b66:	d095      	beq.n	b7a94 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b7b68:	4922      	ldr	r1, [pc, #136]	; (b7bf4 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b7b6a:	f8df 908c 	ldr.w	r9, [pc, #140]	; b7bf8 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b7b6e:	4630      	mov	r0, r6
   b7b70:	f7fe fe56 	bl	b6820 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b7b74:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b7b78:	4482      	add	sl, r0
  while (digits-- > 0)
   b7b7a:	2f00      	cmp	r7, #0
   b7b7c:	d08a      	beq.n	b7a94 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b7b7e:	4642      	mov	r2, r8
   b7b80:	464b      	mov	r3, r9
   b7b82:	4620      	mov	r0, r4
   b7b84:	4629      	mov	r1, r5
   b7b86:	f000 fdbd 	bl	b8704 <__aeabi_dmul>
   b7b8a:	4604      	mov	r4, r0
   b7b8c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b7b8e:	f001 f869 	bl	b8c64 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b7b92:	f1b0 0b00 	subs.w	fp, r0, #0
   b7b96:	da1c      	bge.n	b7bd2 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b7b98:	212d      	movs	r1, #45	; 0x2d
   b7b9a:	4630      	mov	r0, r6
   b7b9c:	f7ff ff2c 	bl	b79f8 <_ZN5Print5printEc>
            val = -n;
   b7ba0:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b7ba4:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b7ba6:	220a      	movs	r2, #10
   b7ba8:	4630      	mov	r0, r6
   b7baa:	9301      	str	r3, [sp, #4]
   b7bac:	f7ff ff3f 	bl	b7a2e <_ZN5Print11printNumberEmh>
   b7bb0:	9b01      	ldr	r3, [sp, #4]
   b7bb2:	4418      	add	r0, r3
    n += print(toPrint);
   b7bb4:	4482      	add	sl, r0
    remainder -= toPrint;
   b7bb6:	4658      	mov	r0, fp
   b7bb8:	f000 fd3a 	bl	b8630 <__aeabi_i2d>
   b7bbc:	4602      	mov	r2, r0
   b7bbe:	460b      	mov	r3, r1
   b7bc0:	4620      	mov	r0, r4
   b7bc2:	4629      	mov	r1, r5
   b7bc4:	f000 fbe6 	bl	b8394 <__aeabi_dsub>
   b7bc8:	3f01      	subs	r7, #1
   b7bca:	4604      	mov	r4, r0
   b7bcc:	460d      	mov	r5, r1
   b7bce:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b7bd0:	e7d3      	b.n	b7b7a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b7bd2:	4659      	mov	r1, fp
        size_t t = 0;
   b7bd4:	2300      	movs	r3, #0
   b7bd6:	e7e6      	b.n	b7ba6 <_ZN5Print10printFloatEdh+0x13a>
   b7bd8:	000b936c 	.word	0x000b936c
   b7bdc:	7fefffff 	.word	0x7fefffff
   b7be0:	000b9370 	.word	0x000b9370
   b7be4:	41efffff 	.word	0x41efffff
   b7be8:	000b9374 	.word	0x000b9374
   b7bec:	c1efffff 	.word	0xc1efffff
   b7bf0:	3fe00000 	.word	0x3fe00000
   b7bf4:	000b9378 	.word	0x000b9378
   b7bf8:	40240000 	.word	0x40240000

000b7bfc <_ZN5Print5printEfi>:
{
   b7bfc:	b538      	push	{r3, r4, r5, lr}
   b7bfe:	4604      	mov	r4, r0
   b7c00:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b7c04:	b2cd      	uxtb	r5, r1
   b7c06:	f000 fd25 	bl	b8654 <__aeabi_f2d>
   b7c0a:	ec41 0b10 	vmov	d0, r0, r1
   b7c0e:	4629      	mov	r1, r5
   b7c10:	4620      	mov	r0, r4
}
   b7c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b7c16:	f7ff bf29 	b.w	b7a6c <_ZN5Print10printFloatEdh>

000b7c1a <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b7c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b7c1e:	b086      	sub	sp, #24
   b7c20:	af00      	add	r7, sp, #0
   b7c22:	4605      	mov	r5, r0
   b7c24:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b7c26:	1d38      	adds	r0, r7, #4
   b7c28:	2114      	movs	r1, #20
{
   b7c2a:	4614      	mov	r4, r2
    va_copy(args2, args);
   b7c2c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b7c2e:	f7ff fcab 	bl	b7588 <vsnprintf>

    if (n<bufsize)
   b7c32:	2813      	cmp	r0, #19
   b7c34:	d80e      	bhi.n	b7c54 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b7c36:	1d39      	adds	r1, r7, #4
   b7c38:	4628      	mov	r0, r5
   b7c3a:	f7fe fdf1 	bl	b6820 <_ZN5Print5writeEPKc>
   b7c3e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b7c40:	b11e      	cbz	r6, b7c4a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b7c42:	4628      	mov	r0, r5
   b7c44:	f7ff fedb 	bl	b79fe <_ZN5Print7printlnEv>
   b7c48:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b7c4a:	4620      	mov	r0, r4
   b7c4c:	3718      	adds	r7, #24
   b7c4e:	46bd      	mov	sp, r7
   b7c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b7c54:	f100 0308 	add.w	r3, r0, #8
   b7c58:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b7c5c:	46e8      	mov	r8, sp
        char bigger[n+1];
   b7c5e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b7c62:	4622      	mov	r2, r4
   b7c64:	1c41      	adds	r1, r0, #1
   b7c66:	683b      	ldr	r3, [r7, #0]
   b7c68:	4668      	mov	r0, sp
   b7c6a:	f7ff fc8d 	bl	b7588 <vsnprintf>
  return write(str);
   b7c6e:	4669      	mov	r1, sp
   b7c70:	4628      	mov	r0, r5
   b7c72:	f7fe fdd5 	bl	b6820 <_ZN5Print5writeEPKc>
   b7c76:	4604      	mov	r4, r0
   b7c78:	46c5      	mov	sp, r8
   b7c7a:	e7e1      	b.n	b7c40 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b7c7c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b7c7c:	4b01      	ldr	r3, [pc, #4]	; (b7c84 <_GLOBAL__sub_I_RGB+0x8>)
   b7c7e:	2200      	movs	r2, #0
   b7c80:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b7c82:	4770      	bx	lr
   b7c84:	2003e6dc 	.word	0x2003e6dc

000b7c88 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b7c88:	2100      	movs	r1, #0
   b7c8a:	f7ff bb49 	b.w	b7320 <hal_spi_release>

000b7c8e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b7c8e:	2100      	movs	r1, #0
   b7c90:	f7ff bb3e 	b.w	b7310 <hal_spi_acquire>

000b7c94 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b7c94:	b510      	push	{r4, lr}
   b7c96:	4604      	mov	r4, r0
   b7c98:	4608      	mov	r0, r1
{
    _spi = spi;
   b7c9a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b7c9c:	f7ff fb08 	bl	b72b0 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b7ca0:	2300      	movs	r3, #0
   b7ca2:	6063      	str	r3, [r4, #4]
}
   b7ca4:	4620      	mov	r0, r4
   b7ca6:	bd10      	pop	{r4, pc}

000b7ca8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b7ca8:	b513      	push	{r0, r1, r4, lr}
   b7caa:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b7cac:	7800      	ldrb	r0, [r0, #0]
   b7cae:	f7ff ffee 	bl	b7c8e <_ZN8SPIClass4lockEv.isra.0>
   b7cb2:	b958      	cbnz	r0, b7ccc <_ZN8SPIClass5beginEv+0x24>
   b7cb4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b7cb6:	9001      	str	r0, [sp, #4]
   b7cb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7cbc:	f7ff fae8 	bl	b7290 <hal_spi_begin>
        unlock();
   b7cc0:	9801      	ldr	r0, [sp, #4]
    }
}
   b7cc2:	b002      	add	sp, #8
   b7cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7cc8:	f7ff bfde 	b.w	b7c88 <_ZN8SPIClass6unlockEv.isra.0>
   b7ccc:	b002      	add	sp, #8
   b7cce:	bd10      	pop	{r4, pc}

000b7cd0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b7cd0:	7800      	ldrb	r0, [r0, #0]
   b7cd2:	f7ff bfd9 	b.w	b7c88 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b7cd8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b7cd8:	0840      	lsrs	r0, r0, #1
{
   b7cda:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b7cdc:	6018      	str	r0, [r3, #0]
   b7cde:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b7ce0:	6818      	ldr	r0, [r3, #0]
   b7ce2:	4288      	cmp	r0, r1
   b7ce4:	b2e5      	uxtb	r5, r4
   b7ce6:	d906      	bls.n	b7cf6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b7ce8:	3401      	adds	r4, #1
   b7cea:	2c08      	cmp	r4, #8
   b7cec:	d002      	beq.n	b7cf4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b7cee:	0840      	lsrs	r0, r0, #1
   b7cf0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b7cf2:	e7f5      	b.n	b7ce0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b7cf4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b7cf6:	4b02      	ldr	r3, [pc, #8]	; (b7d00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b7cf8:	5d5b      	ldrb	r3, [r3, r5]
   b7cfa:	7013      	strb	r3, [r2, #0]
}
   b7cfc:	bd30      	pop	{r4, r5, pc}
   b7cfe:	bf00      	nop
   b7d00:	000b937a 	.word	0x000b937a

000b7d04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b7d04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b7d08:	4606      	mov	r6, r0
   b7d0a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b7d0c:	7800      	ldrb	r0, [r0, #0]
{
   b7d0e:	460c      	mov	r4, r1
    CHECK(lock());
   b7d10:	f7ff ffbd 	bl	b7c8e <_ZN8SPIClass4lockEv.isra.0>
   b7d14:	2800      	cmp	r0, #0
   b7d16:	db1b      	blt.n	b7d50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b7d18:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b7d1a:	2214      	movs	r2, #20
   b7d1c:	2100      	movs	r1, #0
   b7d1e:	a809      	add	r0, sp, #36	; 0x24
   b7d20:	f001 f85c 	bl	b8ddc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b7d24:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b7d26:	2200      	movs	r2, #0
   b7d28:	a909      	add	r1, sp, #36	; 0x24
   b7d2a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b7d2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b7d30:	f7ff face 	bl	b72d0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b7d34:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b7d38:	b113      	cbz	r3, b7d40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b7d3a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b7d3e:	b155      	cbz	r5, b7d56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b7d40:	2700      	movs	r7, #0
   b7d42:	46b9      	mov	r9, r7
   b7d44:	46b8      	mov	r8, r7
   b7d46:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b7d48:	7923      	ldrb	r3, [r4, #4]
   b7d4a:	b15d      	cbz	r5, b7d64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b7d4c:	b1c3      	cbz	r3, b7d80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b7d4e:	2000      	movs	r0, #0
}
   b7d50:	b00f      	add	sp, #60	; 0x3c
   b7d52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b7d56:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b7d5a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b7d5e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b7d62:	e7f1      	b.n	b7d48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b7d64:	2b00      	cmp	r3, #0
   b7d66:	d135      	bne.n	b7dd4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b7d68:	68a3      	ldr	r3, [r4, #8]
   b7d6a:	4543      	cmp	r3, r8
   b7d6c:	d108      	bne.n	b7d80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b7d6e:	f88d 9020 	strb.w	r9, [sp, #32]
   b7d72:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7d76:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7d7a:	89a3      	ldrh	r3, [r4, #12]
   b7d7c:	429a      	cmp	r2, r3
   b7d7e:	d0e6      	beq.n	b7d4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b7d80:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7d82:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b7d84:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b7d88:	980a      	ldr	r0, [sp, #40]	; 0x28
   b7d8a:	ab04      	add	r3, sp, #16
   b7d8c:	f10d 020f 	add.w	r2, sp, #15
   b7d90:	f7ff ffa2 	bl	b7cd8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b7d94:	7921      	ldrb	r1, [r4, #4]
   b7d96:	b985      	cbnz	r5, b7dba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b7d98:	b989      	cbnz	r1, b7dbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7d9a:	68a3      	ldr	r3, [r4, #8]
   b7d9c:	4543      	cmp	r3, r8
   b7d9e:	d30e      	bcc.n	b7dbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b7da0:	f88d 9020 	strb.w	r9, [sp, #32]
   b7da4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b7da8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b7dac:	89a3      	ldrh	r3, [r4, #12]
   b7dae:	429a      	cmp	r2, r3
   b7db0:	d105      	bne.n	b7dbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b7db2:	9b04      	ldr	r3, [sp, #16]
   b7db4:	4543      	cmp	r3, r8
   b7db6:	d102      	bne.n	b7dbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b7db8:	e7c9      	b.n	b7d4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b7dba:	2900      	cmp	r1, #0
   b7dbc:	d1f9      	bne.n	b7db2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b7dbe:	2300      	movs	r3, #0
   b7dc0:	9301      	str	r3, [sp, #4]
   b7dc2:	7b63      	ldrb	r3, [r4, #13]
   b7dc4:	9300      	str	r3, [sp, #0]
   b7dc6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b7dca:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b7dcc:	7830      	ldrb	r0, [r6, #0]
   b7dce:	f7ff fa97 	bl	b7300 <hal_spi_set_settings>
   b7dd2:	e7bc      	b.n	b7d4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b7dd4:	e9cd 5500 	strd	r5, r5, [sp]
   b7dd8:	462b      	mov	r3, r5
   b7dda:	462a      	mov	r2, r5
   b7ddc:	2101      	movs	r1, #1
   b7dde:	e7f5      	b.n	b7dcc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b7de0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b7de0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b7de2:	7800      	ldrb	r0, [r0, #0]
   b7de4:	f7ff fa5c 	bl	b72a0 <hal_spi_transfer>
}
   b7de8:	b2c0      	uxtb	r0, r0
   b7dea:	bd08      	pop	{r3, pc}

000b7dec <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b7dec:	b530      	push	{r4, r5, lr}
   b7dee:	b087      	sub	sp, #28
   b7df0:	4604      	mov	r4, r0
   b7df2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b7df4:	9500      	str	r5, [sp, #0]
   b7df6:	7800      	ldrb	r0, [r0, #0]
   b7df8:	f7ff fa72 	bl	b72e0 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b7dfc:	b93d      	cbnz	r5, b7e0e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b7dfe:	7820      	ldrb	r0, [r4, #0]
   b7e00:	a902      	add	r1, sp, #8
   b7e02:	f7ff fa75 	bl	b72f0 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b7e06:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b7e0a:	07db      	lsls	r3, r3, #31
   b7e0c:	d4f7      	bmi.n	b7dfe <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b7e0e:	b007      	add	sp, #28
   b7e10:	bd30      	pop	{r4, r5, pc}
	...

000b7e14 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b7e14:	4b05      	ldr	r3, [pc, #20]	; (b7e2c <_GLOBAL__sub_I_System+0x18>)
   b7e16:	2202      	movs	r2, #2
   b7e18:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b7e1a:	4b05      	ldr	r3, [pc, #20]	; (b7e30 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b7e1c:	4a05      	ldr	r2, [pc, #20]	; (b7e34 <_GLOBAL__sub_I_System+0x20>)
   b7e1e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b7e20:	2000      	movs	r0, #0
   b7e22:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b7e26:	f7ff bb03 	b.w	b7430 <set_system_mode>
   b7e2a:	bf00      	nop
   b7e2c:	2003e6f8 	.word	0x2003e6f8
   b7e30:	2003e6ec 	.word	0x2003e6ec
   b7e34:	ffff0000 	.word	0xffff0000

000b7e38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b7e38:	4b02      	ldr	r3, [pc, #8]	; (b7e44 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b7e3a:	681a      	ldr	r2, [r3, #0]
   b7e3c:	4b02      	ldr	r3, [pc, #8]	; (b7e48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b7e3e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b7e40:	4770      	bx	lr
   b7e42:	bf00      	nop
   b7e44:	2003e144 	.word	0x2003e144
   b7e48:	2003e6fc 	.word	0x2003e6fc

000b7e4c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b7e4c:	4770      	bx	lr

000b7e4e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7e4e:	7441      	strb	r1, [r0, #17]
}
   b7e50:	4770      	bx	lr

000b7e52 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b7e52:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b7e54:	7c00      	ldrb	r0, [r0, #16]
   b7e56:	f7ff fa9b 	bl	b7390 <hal_usart_available_data_for_write>
}
   b7e5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e5e:	bd08      	pop	{r3, pc}

000b7e60 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b7e60:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b7e62:	7c00      	ldrb	r0, [r0, #16]
   b7e64:	f7ff fa6c 	bl	b7340 <hal_usart_available>
}
   b7e68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7e6c:	bd08      	pop	{r3, pc}

000b7e6e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b7e6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b7e70:	7c00      	ldrb	r0, [r0, #16]
   b7e72:	f7ff fa75 	bl	b7360 <hal_usart_peek>
}
   b7e76:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7e7a:	bd08      	pop	{r3, pc}

000b7e7c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b7e7c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b7e7e:	7c00      	ldrb	r0, [r0, #16]
   b7e80:	f7ff fa66 	bl	b7350 <hal_usart_read>
}
   b7e84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7e88:	bd08      	pop	{r3, pc}

000b7e8a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b7e8a:	7c00      	ldrb	r0, [r0, #16]
   b7e8c:	f7ff ba70 	b.w	b7370 <hal_usart_flush>

000b7e90 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b7e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7e92:	7c45      	ldrb	r5, [r0, #17]
{
   b7e94:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7e96:	b12d      	cbz	r5, b7ea4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b7e98:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b7e9a:	b003      	add	sp, #12
   b7e9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b7ea0:	f7ff ba46 	b.w	b7330 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b7ea4:	7c00      	ldrb	r0, [r0, #16]
   b7ea6:	9101      	str	r1, [sp, #4]
   b7ea8:	f7ff fa72 	bl	b7390 <hal_usart_available_data_for_write>
   b7eac:	2800      	cmp	r0, #0
   b7eae:	9901      	ldr	r1, [sp, #4]
   b7eb0:	dcf2      	bgt.n	b7e98 <_ZN11USARTSerial5writeEh+0x8>
}
   b7eb2:	4628      	mov	r0, r5
   b7eb4:	b003      	add	sp, #12
   b7eb6:	bd30      	pop	{r4, r5, pc}

000b7eb8 <_ZN11USARTSerialD0Ev>:
   b7eb8:	b510      	push	{r4, lr}
   b7eba:	2114      	movs	r1, #20
   b7ebc:	4604      	mov	r4, r0
   b7ebe:	f7fc f8ee 	bl	b409e <_ZdlPvj>
   b7ec2:	4620      	mov	r0, r4
   b7ec4:	bd10      	pop	{r4, pc}
	...

000b7ec8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b7ec8:	b510      	push	{r4, lr}
   b7eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7ece:	4604      	mov	r4, r0
   b7ed0:	4608      	mov	r0, r1
   b7ed2:	4611      	mov	r1, r2
   b7ed4:	2200      	movs	r2, #0
   b7ed6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b7eda:	4b04      	ldr	r3, [pc, #16]	; (b7eec <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b7edc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7ede:	2301      	movs	r3, #1
  _serial = serial;
   b7ee0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7ee2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b7ee4:	f7ff fa5c 	bl	b73a0 <hal_usart_init_ex>
}
   b7ee8:	4620      	mov	r0, r4
   b7eea:	bd10      	pop	{r4, pc}
   b7eec:	000b93a8 	.word	0x000b93a8

000b7ef0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b7ef0:	7441      	strb	r1, [r0, #17]
}
   b7ef2:	4770      	bx	lr

000b7ef4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7ef4:	4770      	bx	lr

000b7ef6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b7ef6:	4770      	bx	lr

000b7ef8 <_ZN9USBSerial4readEv>:
{
   b7ef8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b7efa:	2100      	movs	r1, #0
   b7efc:	7c00      	ldrb	r0, [r0, #16]
   b7efe:	f7ff fa77 	bl	b73f0 <HAL_USB_USART_Receive_Data>
}
   b7f02:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7f06:	bd08      	pop	{r3, pc}

000b7f08 <_ZN9USBSerial4peekEv>:
{
   b7f08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b7f0a:	2101      	movs	r1, #1
   b7f0c:	7c00      	ldrb	r0, [r0, #16]
   b7f0e:	f7ff fa6f 	bl	b73f0 <HAL_USB_USART_Receive_Data>
}
   b7f12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b7f16:	bd08      	pop	{r3, pc}

000b7f18 <_ZN9USBSerial17availableForWriteEv>:
{
   b7f18:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b7f1a:	7c00      	ldrb	r0, [r0, #16]
   b7f1c:	f7ff fa60 	bl	b73e0 <HAL_USB_USART_Available_Data_For_Write>
}
   b7f20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7f24:	bd08      	pop	{r3, pc}

000b7f26 <_ZN9USBSerial9availableEv>:
{
   b7f26:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b7f28:	7c00      	ldrb	r0, [r0, #16]
   b7f2a:	f7ff fa51 	bl	b73d0 <HAL_USB_USART_Available_Data>
}
   b7f2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b7f32:	bd08      	pop	{r3, pc}

000b7f34 <_ZN9USBSerial5writeEh>:
{
   b7f34:	b513      	push	{r0, r1, r4, lr}
   b7f36:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7f38:	7c00      	ldrb	r0, [r0, #16]
{
   b7f3a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7f3c:	f7ff fa50 	bl	b73e0 <HAL_USB_USART_Available_Data_For_Write>
   b7f40:	2800      	cmp	r0, #0
   b7f42:	9901      	ldr	r1, [sp, #4]
   b7f44:	dc01      	bgt.n	b7f4a <_ZN9USBSerial5writeEh+0x16>
   b7f46:	7c60      	ldrb	r0, [r4, #17]
   b7f48:	b120      	cbz	r0, b7f54 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b7f4a:	7c20      	ldrb	r0, [r4, #16]
   b7f4c:	f7ff fa58 	bl	b7400 <HAL_USB_USART_Send_Data>
   b7f50:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7f54:	b002      	add	sp, #8
   b7f56:	bd10      	pop	{r4, pc}

000b7f58 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b7f58:	7c00      	ldrb	r0, [r0, #16]
   b7f5a:	f7ff ba59 	b.w	b7410 <HAL_USB_USART_Flush_Data>

000b7f5e <_ZN9USBSerialD0Ev>:
   b7f5e:	b510      	push	{r4, lr}
   b7f60:	2114      	movs	r1, #20
   b7f62:	4604      	mov	r4, r0
   b7f64:	f7fc f89b 	bl	b409e <_ZdlPvj>
   b7f68:	4620      	mov	r0, r4
   b7f6a:	bd10      	pop	{r4, pc}

000b7f6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7f6c:	b510      	push	{r4, lr}
   b7f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7f72:	4604      	mov	r4, r0
   b7f74:	4608      	mov	r0, r1
   b7f76:	2100      	movs	r1, #0
   b7f78:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7f7c:	4b04      	ldr	r3, [pc, #16]	; (b7f90 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7f7e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7f80:	2301      	movs	r3, #1
  _serial = serial;
   b7f82:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7f84:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b7f86:	4611      	mov	r1, r2
   b7f88:	f7ff fa12 	bl	b73b0 <HAL_USB_USART_Init>
}
   b7f8c:	4620      	mov	r0, r4
   b7f8e:	bd10      	pop	{r4, pc}
   b7f90:	000b93d8 	.word	0x000b93d8

000b7f94 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7f94:	7c00      	ldrb	r0, [r0, #16]
   b7f96:	2200      	movs	r2, #0
   b7f98:	f7ff ba12 	b.w	b73c0 <HAL_USB_USART_Begin>

000b7f9c <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   b7f9c:	7c00      	ldrb	r0, [r0, #16]
   b7f9e:	f7ff ba3f 	b.w	b7420 <HAL_USB_USART_Is_Enabled>

000b7fa2 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   b7fa2:	f7ff bffb 	b.w	b7f9c <_ZN9USBSerial9isEnabledEv>

000b7fa6 <_Z19acquireSerialBufferv>:
{
   b7fa6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b7fa8:	2214      	movs	r2, #20
{
   b7faa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7fac:	2100      	movs	r1, #0
   b7fae:	f000 ff15 	bl	b8ddc <memset>
}
   b7fb2:	4620      	mov	r0, r4
   b7fb4:	bd10      	pop	{r4, pc}
	...

000b7fb8 <_Z16_fetch_usbserialv>:
{
   b7fb8:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7fba:	4c0f      	ldr	r4, [pc, #60]	; (b7ff8 <_Z16_fetch_usbserialv+0x40>)
{
   b7fbc:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7fbe:	a803      	add	r0, sp, #12
   b7fc0:	f7ff fff1 	bl	b7fa6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7fc4:	7821      	ldrb	r1, [r4, #0]
   b7fc6:	f3bf 8f5b 	dmb	ish
   b7fca:	f011 0101 	ands.w	r1, r1, #1
   b7fce:	d10f      	bne.n	b7ff0 <_Z16_fetch_usbserialv+0x38>
   b7fd0:	4620      	mov	r0, r4
   b7fd2:	9101      	str	r1, [sp, #4]
   b7fd4:	f7fc f865 	bl	b40a2 <__cxa_guard_acquire>
   b7fd8:	9901      	ldr	r1, [sp, #4]
   b7fda:	b148      	cbz	r0, b7ff0 <_Z16_fetch_usbserialv+0x38>
   b7fdc:	aa03      	add	r2, sp, #12
   b7fde:	4807      	ldr	r0, [pc, #28]	; (b7ffc <_Z16_fetch_usbserialv+0x44>)
   b7fe0:	f7ff ffc4 	bl	b7f6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b7fe4:	4620      	mov	r0, r4
   b7fe6:	f7fc f861 	bl	b40ac <__cxa_guard_release>
   b7fea:	4805      	ldr	r0, [pc, #20]	; (b8000 <_Z16_fetch_usbserialv+0x48>)
   b7fec:	f000 fed2 	bl	b8d94 <atexit>
	return _usbserial;
}
   b7ff0:	4802      	ldr	r0, [pc, #8]	; (b7ffc <_Z16_fetch_usbserialv+0x44>)
   b7ff2:	b008      	add	sp, #32
   b7ff4:	bd10      	pop	{r4, pc}
   b7ff6:	bf00      	nop
   b7ff8:	2003e700 	.word	0x2003e700
   b7ffc:	2003e704 	.word	0x2003e704
   b8000:	000b7ef5 	.word	0x000b7ef5

000b8004 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b8004:	2200      	movs	r2, #0
   b8006:	6840      	ldr	r0, [r0, #4]
   b8008:	4611      	mov	r1, r2
   b800a:	f7ff ba65 	b.w	b74d8 <network_ready>

000b800e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b800e:	2200      	movs	r2, #0
   b8010:	6840      	ldr	r0, [r0, #4]
   b8012:	4611      	mov	r1, r2
   b8014:	f7ff ba80 	b.w	b7518 <network_listening>

000b8018 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8018:	2200      	movs	r2, #0
   b801a:	6840      	ldr	r0, [r0, #4]
   b801c:	4611      	mov	r1, r2
   b801e:	f7ff ba8b 	b.w	b7538 <network_get_listen_timeout>

000b8022 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8022:	6840      	ldr	r0, [r0, #4]
   b8024:	2200      	movs	r2, #0
   b8026:	f7ff ba7f 	b.w	b7528 <network_set_listen_timeout>

000b802a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b802a:	6840      	ldr	r0, [r0, #4]
   b802c:	2200      	movs	r2, #0
   b802e:	f081 0101 	eor.w	r1, r1, #1
   b8032:	f7ff ba69 	b.w	b7508 <network_listen>

000b8036 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b8036:	2300      	movs	r3, #0
   b8038:	6840      	ldr	r0, [r0, #4]
   b803a:	461a      	mov	r2, r3
   b803c:	4619      	mov	r1, r3
   b803e:	f7ff ba5b 	b.w	b74f8 <network_off>

000b8042 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b8042:	2300      	movs	r3, #0
   b8044:	6840      	ldr	r0, [r0, #4]
   b8046:	461a      	mov	r2, r3
   b8048:	4619      	mov	r1, r3
   b804a:	f7ff ba4d 	b.w	b74e8 <network_on>

000b804e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b804e:	2200      	movs	r2, #0
   b8050:	6840      	ldr	r0, [r0, #4]
   b8052:	4611      	mov	r1, r2
   b8054:	f7ff ba30 	b.w	b74b8 <network_connecting>

000b8058 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b8058:	6840      	ldr	r0, [r0, #4]
   b805a:	2200      	movs	r2, #0
   b805c:	2102      	movs	r1, #2
   b805e:	f7ff ba33 	b.w	b74c8 <network_disconnect>

000b8062 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b8062:	2300      	movs	r3, #0
   b8064:	6840      	ldr	r0, [r0, #4]
   b8066:	461a      	mov	r2, r3
   b8068:	f7ff ba1e 	b.w	b74a8 <network_connect>

000b806c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b806c:	4b02      	ldr	r3, [pc, #8]	; (b8078 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b806e:	2204      	movs	r2, #4
   b8070:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b8072:	4a02      	ldr	r2, [pc, #8]	; (b807c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b8074:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b8076:	4770      	bx	lr
   b8078:	2003e718 	.word	0x2003e718
   b807c:	000b9408 	.word	0x000b9408

000b8080 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b8080:	4b01      	ldr	r3, [pc, #4]	; (b8088 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b8082:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b8084:	4770      	bx	lr
   b8086:	bf00      	nop
   b8088:	2003e148 	.word	0x2003e148

000b808c <serialEventRun>:
{
   b808c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b808e:	4b0b      	ldr	r3, [pc, #44]	; (b80bc <serialEventRun+0x30>)
   b8090:	b143      	cbz	r3, b80a4 <serialEventRun+0x18>
   b8092:	f7ff ff91 	bl	b7fb8 <_Z16_fetch_usbserialv>
   b8096:	6803      	ldr	r3, [r0, #0]
   b8098:	691b      	ldr	r3, [r3, #16]
   b809a:	4798      	blx	r3
   b809c:	2800      	cmp	r0, #0
   b809e:	dd01      	ble.n	b80a4 <serialEventRun+0x18>
        serialEvent();
   b80a0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b80a4:	4b06      	ldr	r3, [pc, #24]	; (b80c0 <serialEventRun+0x34>)
   b80a6:	b143      	cbz	r3, b80ba <serialEventRun+0x2e>
   b80a8:	f000 f94a 	bl	b8340 <_Z22__fetch_global_Serial1v>
   b80ac:	6803      	ldr	r3, [r0, #0]
   b80ae:	691b      	ldr	r3, [r3, #16]
   b80b0:	4798      	blx	r3
   b80b2:	2800      	cmp	r0, #0
   b80b4:	dd01      	ble.n	b80ba <serialEventRun+0x2e>
        serialEvent1();
   b80b6:	f3af 8000 	nop.w
}
   b80ba:	bd08      	pop	{r3, pc}
	...

000b80c4 <_post_loop>:
{
   b80c4:	b508      	push	{r3, lr}
	serialEventRun();
   b80c6:	f7ff ffe1 	bl	b808c <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b80ca:	f7ff f851 	bl	b7170 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b80ce:	4b01      	ldr	r3, [pc, #4]	; (b80d4 <_post_loop+0x10>)
   b80d0:	6018      	str	r0, [r3, #0]
}
   b80d2:	bd08      	pop	{r3, pc}
   b80d4:	2003e728 	.word	0x2003e728

000b80d8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b80d8:	4805      	ldr	r0, [pc, #20]	; (b80f0 <_Z33system_initialize_user_backup_ramv+0x18>)
   b80da:	4a06      	ldr	r2, [pc, #24]	; (b80f4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b80dc:	4906      	ldr	r1, [pc, #24]	; (b80f8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b80de:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b80e0:	1a12      	subs	r2, r2, r0
   b80e2:	f000 fe6d 	bl	b8dc0 <memcpy>
    __backup_sram_signature = signature;
   b80e6:	4b05      	ldr	r3, [pc, #20]	; (b80fc <_Z33system_initialize_user_backup_ramv+0x24>)
   b80e8:	4a05      	ldr	r2, [pc, #20]	; (b8100 <_Z33system_initialize_user_backup_ramv+0x28>)
   b80ea:	601a      	str	r2, [r3, #0]
}
   b80ec:	bd08      	pop	{r3, pc}
   b80ee:	bf00      	nop
   b80f0:	2003f400 	.word	0x2003f400
   b80f4:	2003f404 	.word	0x2003f404
   b80f8:	000b9504 	.word	0x000b9504
   b80fc:	2003f400 	.word	0x2003f400
   b8100:	9a271c1e 	.word	0x9a271c1e

000b8104 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b8104:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8106:	2300      	movs	r3, #0
   b8108:	9300      	str	r3, [sp, #0]
   b810a:	461a      	mov	r2, r3
   b810c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b8110:	f7ff f9b0 	bl	b7474 <system_ctrl_set_result>
}
   b8114:	b003      	add	sp, #12
   b8116:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b811c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b811c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b811e:	8843      	ldrh	r3, [r0, #2]
   b8120:	2b0a      	cmp	r3, #10
   b8122:	d008      	beq.n	b8136 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b8124:	2b50      	cmp	r3, #80	; 0x50
   b8126:	d10b      	bne.n	b8140 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b8128:	4b09      	ldr	r3, [pc, #36]	; (b8150 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b812a:	681b      	ldr	r3, [r3, #0]
   b812c:	b14b      	cbz	r3, b8142 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b812e:	b003      	add	sp, #12
   b8130:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b8134:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b8136:	f7ff ffe5 	bl	b8104 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b813a:	b003      	add	sp, #12
   b813c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b8140:	2300      	movs	r3, #0
   b8142:	9300      	str	r3, [sp, #0]
   b8144:	461a      	mov	r2, r3
   b8146:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b814a:	f7ff f993 	bl	b7474 <system_ctrl_set_result>
}
   b814e:	e7f4      	b.n	b813a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b8150:	2003e724 	.word	0x2003e724

000b8154 <module_user_init_hook>:
{
   b8154:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b8156:	4812      	ldr	r0, [pc, #72]	; (b81a0 <module_user_init_hook+0x4c>)
   b8158:	2100      	movs	r1, #0
   b815a:	f7ff fa25 	bl	b75a8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b815e:	4b11      	ldr	r3, [pc, #68]	; (b81a4 <module_user_init_hook+0x50>)
   b8160:	681a      	ldr	r2, [r3, #0]
   b8162:	4b11      	ldr	r3, [pc, #68]	; (b81a8 <module_user_init_hook+0x54>)
   b8164:	429a      	cmp	r2, r3
   b8166:	4b11      	ldr	r3, [pc, #68]	; (b81ac <module_user_init_hook+0x58>)
   b8168:	bf0c      	ite	eq
   b816a:	2201      	moveq	r2, #1
   b816c:	2200      	movne	r2, #0
   b816e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b8170:	d001      	beq.n	b8176 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b8172:	f7ff ffb1 	bl	b80d8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b8176:	f7fe ffe3 	bl	b7140 <HAL_RNG_GetRandomNumber>
   b817a:	4604      	mov	r4, r0
    srand(seed);
   b817c:	f000 fe36 	bl	b8dec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b8180:	4b0b      	ldr	r3, [pc, #44]	; (b81b0 <module_user_init_hook+0x5c>)
   b8182:	b113      	cbz	r3, b818a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b8184:	4620      	mov	r0, r4
   b8186:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b818a:	2100      	movs	r1, #0
   b818c:	4808      	ldr	r0, [pc, #32]	; (b81b0 <module_user_init_hook+0x5c>)
   b818e:	f7ff f983 	bl	b7498 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b8192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b8196:	4807      	ldr	r0, [pc, #28]	; (b81b4 <module_user_init_hook+0x60>)
   b8198:	2100      	movs	r1, #0
   b819a:	f7ff b961 	b.w	b7460 <system_ctrl_set_app_request_handler>
   b819e:	bf00      	nop
   b81a0:	000b8081 	.word	0x000b8081
   b81a4:	2003f400 	.word	0x2003f400
   b81a8:	9a271c1e 	.word	0x9a271c1e
   b81ac:	2003e720 	.word	0x2003e720
   b81b0:	00000000 	.word	0x00000000
   b81b4:	000b811d 	.word	0x000b811d

000b81b8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b81b8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b81ba:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b81bc:	d902      	bls.n	b81c4 <pinAvailable+0xc>
    return false;
   b81be:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b81c0:	b002      	add	sp, #8
   b81c2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b81c4:	f1a0 030b 	sub.w	r3, r0, #11
   b81c8:	2b02      	cmp	r3, #2
   b81ca:	d81a      	bhi.n	b8202 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b81cc:	4c17      	ldr	r4, [pc, #92]	; (b822c <pinAvailable+0x74>)
   b81ce:	7821      	ldrb	r1, [r4, #0]
   b81d0:	f3bf 8f5b 	dmb	ish
   b81d4:	f011 0101 	ands.w	r1, r1, #1
   b81d8:	d10b      	bne.n	b81f2 <pinAvailable+0x3a>
   b81da:	4620      	mov	r0, r4
   b81dc:	9101      	str	r1, [sp, #4]
   b81de:	f7fb ff60 	bl	b40a2 <__cxa_guard_acquire>
   b81e2:	9901      	ldr	r1, [sp, #4]
   b81e4:	b128      	cbz	r0, b81f2 <pinAvailable+0x3a>
   b81e6:	4812      	ldr	r0, [pc, #72]	; (b8230 <pinAvailable+0x78>)
   b81e8:	f7ff fd54 	bl	b7c94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b81ec:	4620      	mov	r0, r4
   b81ee:	f7fb ff5d 	bl	b40ac <__cxa_guard_release>
   b81f2:	4b0f      	ldr	r3, [pc, #60]	; (b8230 <pinAvailable+0x78>)
   b81f4:	7818      	ldrb	r0, [r3, #0]
   b81f6:	f7ff f863 	bl	b72c0 <hal_spi_is_enabled>
   b81fa:	2800      	cmp	r0, #0
   b81fc:	d1df      	bne.n	b81be <pinAvailable+0x6>
  return true; // 'pin' is available
   b81fe:	2001      	movs	r0, #1
   b8200:	e7de      	b.n	b81c0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b8202:	2801      	cmp	r0, #1
   b8204:	d809      	bhi.n	b821a <pinAvailable+0x62>
   b8206:	f000 f85b 	bl	b82c0 <_Z19__fetch_global_Wirev>
   b820a:	2100      	movs	r1, #0
   b820c:	7c00      	ldrb	r0, [r0, #16]
   b820e:	f7ff f80f 	bl	b7230 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b8212:	f080 0001 	eor.w	r0, r0, #1
   b8216:	b2c0      	uxtb	r0, r0
   b8218:	e7d2      	b.n	b81c0 <pinAvailable+0x8>
   b821a:	3809      	subs	r0, #9
   b821c:	2801      	cmp	r0, #1
   b821e:	d8ee      	bhi.n	b81fe <pinAvailable+0x46>
   b8220:	f000 f88e 	bl	b8340 <_Z22__fetch_global_Serial1v>
   b8224:	7c00      	ldrb	r0, [r0, #16]
   b8226:	f7ff f8ab 	bl	b7380 <hal_usart_is_enabled>
   b822a:	e7f2      	b.n	b8212 <pinAvailable+0x5a>
   b822c:	2003e1b0 	.word	0x2003e1b0
   b8230:	2003e1b4 	.word	0x2003e1b4

000b8234 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b8234:	2823      	cmp	r0, #35	; 0x23
{
   b8236:	b538      	push	{r3, r4, r5, lr}
   b8238:	4604      	mov	r4, r0
   b823a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b823c:	d80a      	bhi.n	b8254 <pinMode+0x20>
   b823e:	29ff      	cmp	r1, #255	; 0xff
   b8240:	d008      	beq.n	b8254 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b8242:	f7ff ffb9 	bl	b81b8 <pinAvailable>
   b8246:	b128      	cbz	r0, b8254 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b8248:	4629      	mov	r1, r5
   b824a:	4620      	mov	r0, r4
}
   b824c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b8250:	f7fe bf96 	b.w	b7180 <HAL_Pin_Mode>
}
   b8254:	bd38      	pop	{r3, r4, r5, pc}

000b8256 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b8256:	b538      	push	{r3, r4, r5, lr}
   b8258:	4604      	mov	r4, r0
   b825a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b825c:	f7fe ff98 	bl	b7190 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b8260:	28ff      	cmp	r0, #255	; 0xff
   b8262:	d010      	beq.n	b8286 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b8264:	2806      	cmp	r0, #6
   b8266:	d804      	bhi.n	b8272 <digitalWrite+0x1c>
   b8268:	234d      	movs	r3, #77	; 0x4d
   b826a:	fa23 f000 	lsr.w	r0, r3, r0
   b826e:	07c3      	lsls	r3, r0, #31
   b8270:	d409      	bmi.n	b8286 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b8272:	4620      	mov	r0, r4
   b8274:	f7ff ffa0 	bl	b81b8 <pinAvailable>
   b8278:	b128      	cbz	r0, b8286 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b827a:	4629      	mov	r1, r5
   b827c:	4620      	mov	r0, r4
}
   b827e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b8282:	f7fe bf8d 	b.w	b71a0 <HAL_GPIO_Write>
}
   b8286:	bd38      	pop	{r3, r4, r5, pc}

000b8288 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b8288:	4770      	bx	lr
	...

000b828c <_Z17acquireWireBufferv>:
{
   b828c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b828e:	4b0a      	ldr	r3, [pc, #40]	; (b82b8 <_Z17acquireWireBufferv+0x2c>)
   b8290:	6003      	str	r3, [r0, #0]
   b8292:	2301      	movs	r3, #1
{
   b8294:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b8296:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b8298:	4908      	ldr	r1, [pc, #32]	; (b82bc <_Z17acquireWireBufferv+0x30>)
   b829a:	2020      	movs	r0, #32
   b829c:	f000 f874 	bl	b8388 <_ZnajRKSt9nothrow_t>
	};
   b82a0:	2520      	movs	r5, #32
   b82a2:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b82a4:	4905      	ldr	r1, [pc, #20]	; (b82bc <_Z17acquireWireBufferv+0x30>)
	};
   b82a6:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b82a8:	4628      	mov	r0, r5
   b82aa:	f000 f86d 	bl	b8388 <_ZnajRKSt9nothrow_t>
	};
   b82ae:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b82b2:	4620      	mov	r0, r4
   b82b4:	bd38      	pop	{r3, r4, r5, pc}
   b82b6:	bf00      	nop
   b82b8:	00010018 	.word	0x00010018
   b82bc:	000b943c 	.word	0x000b943c

000b82c0 <_Z19__fetch_global_Wirev>:
{
   b82c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b82c2:	4d0e      	ldr	r5, [pc, #56]	; (b82fc <_Z19__fetch_global_Wirev+0x3c>)
   b82c4:	7829      	ldrb	r1, [r5, #0]
   b82c6:	f3bf 8f5b 	dmb	ish
   b82ca:	f011 0401 	ands.w	r4, r1, #1
{
   b82ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b82d0:	d111      	bne.n	b82f6 <_Z19__fetch_global_Wirev+0x36>
   b82d2:	4628      	mov	r0, r5
   b82d4:	f7fb fee5 	bl	b40a2 <__cxa_guard_acquire>
   b82d8:	b168      	cbz	r0, b82f6 <_Z19__fetch_global_Wirev+0x36>
   b82da:	4668      	mov	r0, sp
   b82dc:	f7ff ffd6 	bl	b828c <_Z17acquireWireBufferv>
   b82e0:	466a      	mov	r2, sp
   b82e2:	4621      	mov	r1, r4
   b82e4:	4806      	ldr	r0, [pc, #24]	; (b8300 <_Z19__fetch_global_Wirev+0x40>)
   b82e6:	f7ff f9dd 	bl	b76a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b82ea:	4628      	mov	r0, r5
   b82ec:	f7fb fede 	bl	b40ac <__cxa_guard_release>
   b82f0:	4804      	ldr	r0, [pc, #16]	; (b8304 <_Z19__fetch_global_Wirev+0x44>)
   b82f2:	f000 fd4f 	bl	b8d94 <atexit>
	return wire;
}
   b82f6:	4802      	ldr	r0, [pc, #8]	; (b8300 <_Z19__fetch_global_Wirev+0x40>)
   b82f8:	b007      	add	sp, #28
   b82fa:	bd30      	pop	{r4, r5, pc}
   b82fc:	2003e72c 	.word	0x2003e72c
   b8300:	2003e730 	.word	0x2003e730
   b8304:	000b8289 	.word	0x000b8289

000b8308 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8308:	4770      	bx	lr
	...

000b830c <_Z20acquireSerial1Bufferv>:
{
   b830c:	b538      	push	{r3, r4, r5, lr}
   b830e:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b8310:	2514      	movs	r5, #20
   b8312:	462a      	mov	r2, r5
   b8314:	2100      	movs	r1, #0
   b8316:	f000 fd61 	bl	b8ddc <memset>
   b831a:	8025      	strh	r5, [r4, #0]
   b831c:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b831e:	4907      	ldr	r1, [pc, #28]	; (b833c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b8320:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8322:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b8324:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b8326:	f000 f82f 	bl	b8388 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b832a:	4904      	ldr	r1, [pc, #16]	; (b833c <_Z20acquireSerial1Bufferv+0x30>)
    };
   b832c:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b832e:	4628      	mov	r0, r5
   b8330:	f000 f82a 	bl	b8388 <_ZnajRKSt9nothrow_t>
    };
   b8334:	60e0      	str	r0, [r4, #12]
}
   b8336:	4620      	mov	r0, r4
   b8338:	bd38      	pop	{r3, r4, r5, pc}
   b833a:	bf00      	nop
   b833c:	000b943c 	.word	0x000b943c

000b8340 <_Z22__fetch_global_Serial1v>:
{
   b8340:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8342:	4d0e      	ldr	r5, [pc, #56]	; (b837c <_Z22__fetch_global_Serial1v+0x3c>)
   b8344:	7829      	ldrb	r1, [r5, #0]
   b8346:	f3bf 8f5b 	dmb	ish
   b834a:	f011 0401 	ands.w	r4, r1, #1
{
   b834e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b8350:	d111      	bne.n	b8376 <_Z22__fetch_global_Serial1v+0x36>
   b8352:	4628      	mov	r0, r5
   b8354:	f7fb fea5 	bl	b40a2 <__cxa_guard_acquire>
   b8358:	b168      	cbz	r0, b8376 <_Z22__fetch_global_Serial1v+0x36>
   b835a:	a801      	add	r0, sp, #4
   b835c:	f7ff ffd6 	bl	b830c <_Z20acquireSerial1Bufferv>
   b8360:	aa01      	add	r2, sp, #4
   b8362:	4621      	mov	r1, r4
   b8364:	4806      	ldr	r0, [pc, #24]	; (b8380 <_Z22__fetch_global_Serial1v+0x40>)
   b8366:	f7ff fdaf 	bl	b7ec8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b836a:	4628      	mov	r0, r5
   b836c:	f7fb fe9e 	bl	b40ac <__cxa_guard_release>
   b8370:	4804      	ldr	r0, [pc, #16]	; (b8384 <_Z22__fetch_global_Serial1v+0x44>)
   b8372:	f000 fd0f 	bl	b8d94 <atexit>
    return serial1;
}
   b8376:	4802      	ldr	r0, [pc, #8]	; (b8380 <_Z22__fetch_global_Serial1v+0x40>)
   b8378:	b007      	add	sp, #28
   b837a:	bd30      	pop	{r4, r5, pc}
   b837c:	2003e744 	.word	0x2003e744
   b8380:	2003e748 	.word	0x2003e748
   b8384:	000b8309 	.word	0x000b8309

000b8388 <_ZnajRKSt9nothrow_t>:
   b8388:	f7fb be87 	b.w	b409a <_Znaj>

000b838c <__aeabi_drsub>:
   b838c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b8390:	e002      	b.n	b8398 <__adddf3>
   b8392:	bf00      	nop

000b8394 <__aeabi_dsub>:
   b8394:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b8398 <__adddf3>:
   b8398:	b530      	push	{r4, r5, lr}
   b839a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b839e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b83a2:	ea94 0f05 	teq	r4, r5
   b83a6:	bf08      	it	eq
   b83a8:	ea90 0f02 	teqeq	r0, r2
   b83ac:	bf1f      	itttt	ne
   b83ae:	ea54 0c00 	orrsne.w	ip, r4, r0
   b83b2:	ea55 0c02 	orrsne.w	ip, r5, r2
   b83b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b83ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b83be:	f000 80e2 	beq.w	b8586 <__adddf3+0x1ee>
   b83c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b83c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b83ca:	bfb8      	it	lt
   b83cc:	426d      	neglt	r5, r5
   b83ce:	dd0c      	ble.n	b83ea <__adddf3+0x52>
   b83d0:	442c      	add	r4, r5
   b83d2:	ea80 0202 	eor.w	r2, r0, r2
   b83d6:	ea81 0303 	eor.w	r3, r1, r3
   b83da:	ea82 0000 	eor.w	r0, r2, r0
   b83de:	ea83 0101 	eor.w	r1, r3, r1
   b83e2:	ea80 0202 	eor.w	r2, r0, r2
   b83e6:	ea81 0303 	eor.w	r3, r1, r3
   b83ea:	2d36      	cmp	r5, #54	; 0x36
   b83ec:	bf88      	it	hi
   b83ee:	bd30      	pophi	{r4, r5, pc}
   b83f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b83f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b83f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b83fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b8400:	d002      	beq.n	b8408 <__adddf3+0x70>
   b8402:	4240      	negs	r0, r0
   b8404:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b8408:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b840c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8410:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b8414:	d002      	beq.n	b841c <__adddf3+0x84>
   b8416:	4252      	negs	r2, r2
   b8418:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b841c:	ea94 0f05 	teq	r4, r5
   b8420:	f000 80a7 	beq.w	b8572 <__adddf3+0x1da>
   b8424:	f1a4 0401 	sub.w	r4, r4, #1
   b8428:	f1d5 0e20 	rsbs	lr, r5, #32
   b842c:	db0d      	blt.n	b844a <__adddf3+0xb2>
   b842e:	fa02 fc0e 	lsl.w	ip, r2, lr
   b8432:	fa22 f205 	lsr.w	r2, r2, r5
   b8436:	1880      	adds	r0, r0, r2
   b8438:	f141 0100 	adc.w	r1, r1, #0
   b843c:	fa03 f20e 	lsl.w	r2, r3, lr
   b8440:	1880      	adds	r0, r0, r2
   b8442:	fa43 f305 	asr.w	r3, r3, r5
   b8446:	4159      	adcs	r1, r3
   b8448:	e00e      	b.n	b8468 <__adddf3+0xd0>
   b844a:	f1a5 0520 	sub.w	r5, r5, #32
   b844e:	f10e 0e20 	add.w	lr, lr, #32
   b8452:	2a01      	cmp	r2, #1
   b8454:	fa03 fc0e 	lsl.w	ip, r3, lr
   b8458:	bf28      	it	cs
   b845a:	f04c 0c02 	orrcs.w	ip, ip, #2
   b845e:	fa43 f305 	asr.w	r3, r3, r5
   b8462:	18c0      	adds	r0, r0, r3
   b8464:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b8468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b846c:	d507      	bpl.n	b847e <__adddf3+0xe6>
   b846e:	f04f 0e00 	mov.w	lr, #0
   b8472:	f1dc 0c00 	rsbs	ip, ip, #0
   b8476:	eb7e 0000 	sbcs.w	r0, lr, r0
   b847a:	eb6e 0101 	sbc.w	r1, lr, r1
   b847e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b8482:	d31b      	bcc.n	b84bc <__adddf3+0x124>
   b8484:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b8488:	d30c      	bcc.n	b84a4 <__adddf3+0x10c>
   b848a:	0849      	lsrs	r1, r1, #1
   b848c:	ea5f 0030 	movs.w	r0, r0, rrx
   b8490:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b8494:	f104 0401 	add.w	r4, r4, #1
   b8498:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b849c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b84a0:	f080 809a 	bcs.w	b85d8 <__adddf3+0x240>
   b84a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b84a8:	bf08      	it	eq
   b84aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b84ae:	f150 0000 	adcs.w	r0, r0, #0
   b84b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b84b6:	ea41 0105 	orr.w	r1, r1, r5
   b84ba:	bd30      	pop	{r4, r5, pc}
   b84bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b84c0:	4140      	adcs	r0, r0
   b84c2:	eb41 0101 	adc.w	r1, r1, r1
   b84c6:	3c01      	subs	r4, #1
   b84c8:	bf28      	it	cs
   b84ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b84ce:	d2e9      	bcs.n	b84a4 <__adddf3+0x10c>
   b84d0:	f091 0f00 	teq	r1, #0
   b84d4:	bf04      	itt	eq
   b84d6:	4601      	moveq	r1, r0
   b84d8:	2000      	moveq	r0, #0
   b84da:	fab1 f381 	clz	r3, r1
   b84de:	bf08      	it	eq
   b84e0:	3320      	addeq	r3, #32
   b84e2:	f1a3 030b 	sub.w	r3, r3, #11
   b84e6:	f1b3 0220 	subs.w	r2, r3, #32
   b84ea:	da0c      	bge.n	b8506 <__adddf3+0x16e>
   b84ec:	320c      	adds	r2, #12
   b84ee:	dd08      	ble.n	b8502 <__adddf3+0x16a>
   b84f0:	f102 0c14 	add.w	ip, r2, #20
   b84f4:	f1c2 020c 	rsb	r2, r2, #12
   b84f8:	fa01 f00c 	lsl.w	r0, r1, ip
   b84fc:	fa21 f102 	lsr.w	r1, r1, r2
   b8500:	e00c      	b.n	b851c <__adddf3+0x184>
   b8502:	f102 0214 	add.w	r2, r2, #20
   b8506:	bfd8      	it	le
   b8508:	f1c2 0c20 	rsble	ip, r2, #32
   b850c:	fa01 f102 	lsl.w	r1, r1, r2
   b8510:	fa20 fc0c 	lsr.w	ip, r0, ip
   b8514:	bfdc      	itt	le
   b8516:	ea41 010c 	orrle.w	r1, r1, ip
   b851a:	4090      	lslle	r0, r2
   b851c:	1ae4      	subs	r4, r4, r3
   b851e:	bfa2      	ittt	ge
   b8520:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b8524:	4329      	orrge	r1, r5
   b8526:	bd30      	popge	{r4, r5, pc}
   b8528:	ea6f 0404 	mvn.w	r4, r4
   b852c:	3c1f      	subs	r4, #31
   b852e:	da1c      	bge.n	b856a <__adddf3+0x1d2>
   b8530:	340c      	adds	r4, #12
   b8532:	dc0e      	bgt.n	b8552 <__adddf3+0x1ba>
   b8534:	f104 0414 	add.w	r4, r4, #20
   b8538:	f1c4 0220 	rsb	r2, r4, #32
   b853c:	fa20 f004 	lsr.w	r0, r0, r4
   b8540:	fa01 f302 	lsl.w	r3, r1, r2
   b8544:	ea40 0003 	orr.w	r0, r0, r3
   b8548:	fa21 f304 	lsr.w	r3, r1, r4
   b854c:	ea45 0103 	orr.w	r1, r5, r3
   b8550:	bd30      	pop	{r4, r5, pc}
   b8552:	f1c4 040c 	rsb	r4, r4, #12
   b8556:	f1c4 0220 	rsb	r2, r4, #32
   b855a:	fa20 f002 	lsr.w	r0, r0, r2
   b855e:	fa01 f304 	lsl.w	r3, r1, r4
   b8562:	ea40 0003 	orr.w	r0, r0, r3
   b8566:	4629      	mov	r1, r5
   b8568:	bd30      	pop	{r4, r5, pc}
   b856a:	fa21 f004 	lsr.w	r0, r1, r4
   b856e:	4629      	mov	r1, r5
   b8570:	bd30      	pop	{r4, r5, pc}
   b8572:	f094 0f00 	teq	r4, #0
   b8576:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b857a:	bf06      	itte	eq
   b857c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b8580:	3401      	addeq	r4, #1
   b8582:	3d01      	subne	r5, #1
   b8584:	e74e      	b.n	b8424 <__adddf3+0x8c>
   b8586:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b858a:	bf18      	it	ne
   b858c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b8590:	d029      	beq.n	b85e6 <__adddf3+0x24e>
   b8592:	ea94 0f05 	teq	r4, r5
   b8596:	bf08      	it	eq
   b8598:	ea90 0f02 	teqeq	r0, r2
   b859c:	d005      	beq.n	b85aa <__adddf3+0x212>
   b859e:	ea54 0c00 	orrs.w	ip, r4, r0
   b85a2:	bf04      	itt	eq
   b85a4:	4619      	moveq	r1, r3
   b85a6:	4610      	moveq	r0, r2
   b85a8:	bd30      	pop	{r4, r5, pc}
   b85aa:	ea91 0f03 	teq	r1, r3
   b85ae:	bf1e      	ittt	ne
   b85b0:	2100      	movne	r1, #0
   b85b2:	2000      	movne	r0, #0
   b85b4:	bd30      	popne	{r4, r5, pc}
   b85b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b85ba:	d105      	bne.n	b85c8 <__adddf3+0x230>
   b85bc:	0040      	lsls	r0, r0, #1
   b85be:	4149      	adcs	r1, r1
   b85c0:	bf28      	it	cs
   b85c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b85c6:	bd30      	pop	{r4, r5, pc}
   b85c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b85cc:	bf3c      	itt	cc
   b85ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b85d2:	bd30      	popcc	{r4, r5, pc}
   b85d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b85d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b85dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b85e0:	f04f 0000 	mov.w	r0, #0
   b85e4:	bd30      	pop	{r4, r5, pc}
   b85e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b85ea:	bf1a      	itte	ne
   b85ec:	4619      	movne	r1, r3
   b85ee:	4610      	movne	r0, r2
   b85f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b85f4:	bf1c      	itt	ne
   b85f6:	460b      	movne	r3, r1
   b85f8:	4602      	movne	r2, r0
   b85fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b85fe:	bf06      	itte	eq
   b8600:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b8604:	ea91 0f03 	teqeq	r1, r3
   b8608:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b860c:	bd30      	pop	{r4, r5, pc}
   b860e:	bf00      	nop

000b8610 <__aeabi_ui2d>:
   b8610:	f090 0f00 	teq	r0, #0
   b8614:	bf04      	itt	eq
   b8616:	2100      	moveq	r1, #0
   b8618:	4770      	bxeq	lr
   b861a:	b530      	push	{r4, r5, lr}
   b861c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8620:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8624:	f04f 0500 	mov.w	r5, #0
   b8628:	f04f 0100 	mov.w	r1, #0
   b862c:	e750      	b.n	b84d0 <__adddf3+0x138>
   b862e:	bf00      	nop

000b8630 <__aeabi_i2d>:
   b8630:	f090 0f00 	teq	r0, #0
   b8634:	bf04      	itt	eq
   b8636:	2100      	moveq	r1, #0
   b8638:	4770      	bxeq	lr
   b863a:	b530      	push	{r4, r5, lr}
   b863c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b8640:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b8644:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b8648:	bf48      	it	mi
   b864a:	4240      	negmi	r0, r0
   b864c:	f04f 0100 	mov.w	r1, #0
   b8650:	e73e      	b.n	b84d0 <__adddf3+0x138>
   b8652:	bf00      	nop

000b8654 <__aeabi_f2d>:
   b8654:	0042      	lsls	r2, r0, #1
   b8656:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b865a:	ea4f 0131 	mov.w	r1, r1, rrx
   b865e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b8662:	bf1f      	itttt	ne
   b8664:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b8668:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b866c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b8670:	4770      	bxne	lr
   b8672:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b8676:	bf08      	it	eq
   b8678:	4770      	bxeq	lr
   b867a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b867e:	bf04      	itt	eq
   b8680:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b8684:	4770      	bxeq	lr
   b8686:	b530      	push	{r4, r5, lr}
   b8688:	f44f 7460 	mov.w	r4, #896	; 0x380
   b868c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b8690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8694:	e71c      	b.n	b84d0 <__adddf3+0x138>
   b8696:	bf00      	nop

000b8698 <__aeabi_ul2d>:
   b8698:	ea50 0201 	orrs.w	r2, r0, r1
   b869c:	bf08      	it	eq
   b869e:	4770      	bxeq	lr
   b86a0:	b530      	push	{r4, r5, lr}
   b86a2:	f04f 0500 	mov.w	r5, #0
   b86a6:	e00a      	b.n	b86be <__aeabi_l2d+0x16>

000b86a8 <__aeabi_l2d>:
   b86a8:	ea50 0201 	orrs.w	r2, r0, r1
   b86ac:	bf08      	it	eq
   b86ae:	4770      	bxeq	lr
   b86b0:	b530      	push	{r4, r5, lr}
   b86b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b86b6:	d502      	bpl.n	b86be <__aeabi_l2d+0x16>
   b86b8:	4240      	negs	r0, r0
   b86ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b86be:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b86c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b86c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b86ca:	f43f aed8 	beq.w	b847e <__adddf3+0xe6>
   b86ce:	f04f 0203 	mov.w	r2, #3
   b86d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b86d6:	bf18      	it	ne
   b86d8:	3203      	addne	r2, #3
   b86da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b86de:	bf18      	it	ne
   b86e0:	3203      	addne	r2, #3
   b86e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b86e6:	f1c2 0320 	rsb	r3, r2, #32
   b86ea:	fa00 fc03 	lsl.w	ip, r0, r3
   b86ee:	fa20 f002 	lsr.w	r0, r0, r2
   b86f2:	fa01 fe03 	lsl.w	lr, r1, r3
   b86f6:	ea40 000e 	orr.w	r0, r0, lr
   b86fa:	fa21 f102 	lsr.w	r1, r1, r2
   b86fe:	4414      	add	r4, r2
   b8700:	e6bd      	b.n	b847e <__adddf3+0xe6>
   b8702:	bf00      	nop

000b8704 <__aeabi_dmul>:
   b8704:	b570      	push	{r4, r5, r6, lr}
   b8706:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b870a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b870e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8712:	bf1d      	ittte	ne
   b8714:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b8718:	ea94 0f0c 	teqne	r4, ip
   b871c:	ea95 0f0c 	teqne	r5, ip
   b8720:	f000 f8de 	bleq	b88e0 <__aeabi_dmul+0x1dc>
   b8724:	442c      	add	r4, r5
   b8726:	ea81 0603 	eor.w	r6, r1, r3
   b872a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b872e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b8732:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b8736:	bf18      	it	ne
   b8738:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b873c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b8744:	d038      	beq.n	b87b8 <__aeabi_dmul+0xb4>
   b8746:	fba0 ce02 	umull	ip, lr, r0, r2
   b874a:	f04f 0500 	mov.w	r5, #0
   b874e:	fbe1 e502 	umlal	lr, r5, r1, r2
   b8752:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b8756:	fbe0 e503 	umlal	lr, r5, r0, r3
   b875a:	f04f 0600 	mov.w	r6, #0
   b875e:	fbe1 5603 	umlal	r5, r6, r1, r3
   b8762:	f09c 0f00 	teq	ip, #0
   b8766:	bf18      	it	ne
   b8768:	f04e 0e01 	orrne.w	lr, lr, #1
   b876c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b8770:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b8774:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b8778:	d204      	bcs.n	b8784 <__aeabi_dmul+0x80>
   b877a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b877e:	416d      	adcs	r5, r5
   b8780:	eb46 0606 	adc.w	r6, r6, r6
   b8784:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b8788:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b878c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b8790:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b8794:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b8798:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b879c:	bf88      	it	hi
   b879e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b87a2:	d81e      	bhi.n	b87e2 <__aeabi_dmul+0xde>
   b87a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b87a8:	bf08      	it	eq
   b87aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b87ae:	f150 0000 	adcs.w	r0, r0, #0
   b87b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b87b6:	bd70      	pop	{r4, r5, r6, pc}
   b87b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b87bc:	ea46 0101 	orr.w	r1, r6, r1
   b87c0:	ea40 0002 	orr.w	r0, r0, r2
   b87c4:	ea81 0103 	eor.w	r1, r1, r3
   b87c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b87cc:	bfc2      	ittt	gt
   b87ce:	ebd4 050c 	rsbsgt	r5, r4, ip
   b87d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b87d6:	bd70      	popgt	{r4, r5, r6, pc}
   b87d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b87dc:	f04f 0e00 	mov.w	lr, #0
   b87e0:	3c01      	subs	r4, #1
   b87e2:	f300 80ab 	bgt.w	b893c <__aeabi_dmul+0x238>
   b87e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b87ea:	bfde      	ittt	le
   b87ec:	2000      	movle	r0, #0
   b87ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b87f2:	bd70      	pople	{r4, r5, r6, pc}
   b87f4:	f1c4 0400 	rsb	r4, r4, #0
   b87f8:	3c20      	subs	r4, #32
   b87fa:	da35      	bge.n	b8868 <__aeabi_dmul+0x164>
   b87fc:	340c      	adds	r4, #12
   b87fe:	dc1b      	bgt.n	b8838 <__aeabi_dmul+0x134>
   b8800:	f104 0414 	add.w	r4, r4, #20
   b8804:	f1c4 0520 	rsb	r5, r4, #32
   b8808:	fa00 f305 	lsl.w	r3, r0, r5
   b880c:	fa20 f004 	lsr.w	r0, r0, r4
   b8810:	fa01 f205 	lsl.w	r2, r1, r5
   b8814:	ea40 0002 	orr.w	r0, r0, r2
   b8818:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b881c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b8820:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8824:	fa21 f604 	lsr.w	r6, r1, r4
   b8828:	eb42 0106 	adc.w	r1, r2, r6
   b882c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8830:	bf08      	it	eq
   b8832:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8836:	bd70      	pop	{r4, r5, r6, pc}
   b8838:	f1c4 040c 	rsb	r4, r4, #12
   b883c:	f1c4 0520 	rsb	r5, r4, #32
   b8840:	fa00 f304 	lsl.w	r3, r0, r4
   b8844:	fa20 f005 	lsr.w	r0, r0, r5
   b8848:	fa01 f204 	lsl.w	r2, r1, r4
   b884c:	ea40 0002 	orr.w	r0, r0, r2
   b8850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8854:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b8858:	f141 0100 	adc.w	r1, r1, #0
   b885c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8860:	bf08      	it	eq
   b8862:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b8866:	bd70      	pop	{r4, r5, r6, pc}
   b8868:	f1c4 0520 	rsb	r5, r4, #32
   b886c:	fa00 f205 	lsl.w	r2, r0, r5
   b8870:	ea4e 0e02 	orr.w	lr, lr, r2
   b8874:	fa20 f304 	lsr.w	r3, r0, r4
   b8878:	fa01 f205 	lsl.w	r2, r1, r5
   b887c:	ea43 0302 	orr.w	r3, r3, r2
   b8880:	fa21 f004 	lsr.w	r0, r1, r4
   b8884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8888:	fa21 f204 	lsr.w	r2, r1, r4
   b888c:	ea20 0002 	bic.w	r0, r0, r2
   b8890:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b8894:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b8898:	bf08      	it	eq
   b889a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b889e:	bd70      	pop	{r4, r5, r6, pc}
   b88a0:	f094 0f00 	teq	r4, #0
   b88a4:	d10f      	bne.n	b88c6 <__aeabi_dmul+0x1c2>
   b88a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b88aa:	0040      	lsls	r0, r0, #1
   b88ac:	eb41 0101 	adc.w	r1, r1, r1
   b88b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b88b4:	bf08      	it	eq
   b88b6:	3c01      	subeq	r4, #1
   b88b8:	d0f7      	beq.n	b88aa <__aeabi_dmul+0x1a6>
   b88ba:	ea41 0106 	orr.w	r1, r1, r6
   b88be:	f095 0f00 	teq	r5, #0
   b88c2:	bf18      	it	ne
   b88c4:	4770      	bxne	lr
   b88c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b88ca:	0052      	lsls	r2, r2, #1
   b88cc:	eb43 0303 	adc.w	r3, r3, r3
   b88d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b88d4:	bf08      	it	eq
   b88d6:	3d01      	subeq	r5, #1
   b88d8:	d0f7      	beq.n	b88ca <__aeabi_dmul+0x1c6>
   b88da:	ea43 0306 	orr.w	r3, r3, r6
   b88de:	4770      	bx	lr
   b88e0:	ea94 0f0c 	teq	r4, ip
   b88e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b88e8:	bf18      	it	ne
   b88ea:	ea95 0f0c 	teqne	r5, ip
   b88ee:	d00c      	beq.n	b890a <__aeabi_dmul+0x206>
   b88f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b88f4:	bf18      	it	ne
   b88f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b88fa:	d1d1      	bne.n	b88a0 <__aeabi_dmul+0x19c>
   b88fc:	ea81 0103 	eor.w	r1, r1, r3
   b8900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8904:	f04f 0000 	mov.w	r0, #0
   b8908:	bd70      	pop	{r4, r5, r6, pc}
   b890a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b890e:	bf06      	itte	eq
   b8910:	4610      	moveq	r0, r2
   b8912:	4619      	moveq	r1, r3
   b8914:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8918:	d019      	beq.n	b894e <__aeabi_dmul+0x24a>
   b891a:	ea94 0f0c 	teq	r4, ip
   b891e:	d102      	bne.n	b8926 <__aeabi_dmul+0x222>
   b8920:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b8924:	d113      	bne.n	b894e <__aeabi_dmul+0x24a>
   b8926:	ea95 0f0c 	teq	r5, ip
   b892a:	d105      	bne.n	b8938 <__aeabi_dmul+0x234>
   b892c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b8930:	bf1c      	itt	ne
   b8932:	4610      	movne	r0, r2
   b8934:	4619      	movne	r1, r3
   b8936:	d10a      	bne.n	b894e <__aeabi_dmul+0x24a>
   b8938:	ea81 0103 	eor.w	r1, r1, r3
   b893c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b8940:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8944:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b8948:	f04f 0000 	mov.w	r0, #0
   b894c:	bd70      	pop	{r4, r5, r6, pc}
   b894e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b8952:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b8956:	bd70      	pop	{r4, r5, r6, pc}

000b8958 <__aeabi_ddiv>:
   b8958:	b570      	push	{r4, r5, r6, lr}
   b895a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b895e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b8962:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b8966:	bf1d      	ittte	ne
   b8968:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b896c:	ea94 0f0c 	teqne	r4, ip
   b8970:	ea95 0f0c 	teqne	r5, ip
   b8974:	f000 f8a7 	bleq	b8ac6 <__aeabi_ddiv+0x16e>
   b8978:	eba4 0405 	sub.w	r4, r4, r5
   b897c:	ea81 0e03 	eor.w	lr, r1, r3
   b8980:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8984:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b8988:	f000 8088 	beq.w	b8a9c <__aeabi_ddiv+0x144>
   b898c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b8990:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b8994:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b8998:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b899c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b89a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b89a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b89a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b89ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b89b0:	429d      	cmp	r5, r3
   b89b2:	bf08      	it	eq
   b89b4:	4296      	cmpeq	r6, r2
   b89b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b89ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b89be:	d202      	bcs.n	b89c6 <__aeabi_ddiv+0x6e>
   b89c0:	085b      	lsrs	r3, r3, #1
   b89c2:	ea4f 0232 	mov.w	r2, r2, rrx
   b89c6:	1ab6      	subs	r6, r6, r2
   b89c8:	eb65 0503 	sbc.w	r5, r5, r3
   b89cc:	085b      	lsrs	r3, r3, #1
   b89ce:	ea4f 0232 	mov.w	r2, r2, rrx
   b89d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b89d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b89da:	ebb6 0e02 	subs.w	lr, r6, r2
   b89de:	eb75 0e03 	sbcs.w	lr, r5, r3
   b89e2:	bf22      	ittt	cs
   b89e4:	1ab6      	subcs	r6, r6, r2
   b89e6:	4675      	movcs	r5, lr
   b89e8:	ea40 000c 	orrcs.w	r0, r0, ip
   b89ec:	085b      	lsrs	r3, r3, #1
   b89ee:	ea4f 0232 	mov.w	r2, r2, rrx
   b89f2:	ebb6 0e02 	subs.w	lr, r6, r2
   b89f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   b89fa:	bf22      	ittt	cs
   b89fc:	1ab6      	subcs	r6, r6, r2
   b89fe:	4675      	movcs	r5, lr
   b8a00:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b8a04:	085b      	lsrs	r3, r3, #1
   b8a06:	ea4f 0232 	mov.w	r2, r2, rrx
   b8a0a:	ebb6 0e02 	subs.w	lr, r6, r2
   b8a0e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8a12:	bf22      	ittt	cs
   b8a14:	1ab6      	subcs	r6, r6, r2
   b8a16:	4675      	movcs	r5, lr
   b8a18:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b8a1c:	085b      	lsrs	r3, r3, #1
   b8a1e:	ea4f 0232 	mov.w	r2, r2, rrx
   b8a22:	ebb6 0e02 	subs.w	lr, r6, r2
   b8a26:	eb75 0e03 	sbcs.w	lr, r5, r3
   b8a2a:	bf22      	ittt	cs
   b8a2c:	1ab6      	subcs	r6, r6, r2
   b8a2e:	4675      	movcs	r5, lr
   b8a30:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b8a34:	ea55 0e06 	orrs.w	lr, r5, r6
   b8a38:	d018      	beq.n	b8a6c <__aeabi_ddiv+0x114>
   b8a3a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b8a3e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b8a42:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b8a46:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b8a4a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b8a4e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b8a52:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b8a56:	d1c0      	bne.n	b89da <__aeabi_ddiv+0x82>
   b8a58:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8a5c:	d10b      	bne.n	b8a76 <__aeabi_ddiv+0x11e>
   b8a5e:	ea41 0100 	orr.w	r1, r1, r0
   b8a62:	f04f 0000 	mov.w	r0, #0
   b8a66:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b8a6a:	e7b6      	b.n	b89da <__aeabi_ddiv+0x82>
   b8a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b8a70:	bf04      	itt	eq
   b8a72:	4301      	orreq	r1, r0
   b8a74:	2000      	moveq	r0, #0
   b8a76:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b8a7a:	bf88      	it	hi
   b8a7c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b8a80:	f63f aeaf 	bhi.w	b87e2 <__aeabi_dmul+0xde>
   b8a84:	ebb5 0c03 	subs.w	ip, r5, r3
   b8a88:	bf04      	itt	eq
   b8a8a:	ebb6 0c02 	subseq.w	ip, r6, r2
   b8a8e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b8a92:	f150 0000 	adcs.w	r0, r0, #0
   b8a96:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b8a9a:	bd70      	pop	{r4, r5, r6, pc}
   b8a9c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b8aa0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b8aa4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b8aa8:	bfc2      	ittt	gt
   b8aaa:	ebd4 050c 	rsbsgt	r5, r4, ip
   b8aae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b8ab2:	bd70      	popgt	{r4, r5, r6, pc}
   b8ab4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8ab8:	f04f 0e00 	mov.w	lr, #0
   b8abc:	3c01      	subs	r4, #1
   b8abe:	e690      	b.n	b87e2 <__aeabi_dmul+0xde>
   b8ac0:	ea45 0e06 	orr.w	lr, r5, r6
   b8ac4:	e68d      	b.n	b87e2 <__aeabi_dmul+0xde>
   b8ac6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b8aca:	ea94 0f0c 	teq	r4, ip
   b8ace:	bf08      	it	eq
   b8ad0:	ea95 0f0c 	teqeq	r5, ip
   b8ad4:	f43f af3b 	beq.w	b894e <__aeabi_dmul+0x24a>
   b8ad8:	ea94 0f0c 	teq	r4, ip
   b8adc:	d10a      	bne.n	b8af4 <__aeabi_ddiv+0x19c>
   b8ade:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b8ae2:	f47f af34 	bne.w	b894e <__aeabi_dmul+0x24a>
   b8ae6:	ea95 0f0c 	teq	r5, ip
   b8aea:	f47f af25 	bne.w	b8938 <__aeabi_dmul+0x234>
   b8aee:	4610      	mov	r0, r2
   b8af0:	4619      	mov	r1, r3
   b8af2:	e72c      	b.n	b894e <__aeabi_dmul+0x24a>
   b8af4:	ea95 0f0c 	teq	r5, ip
   b8af8:	d106      	bne.n	b8b08 <__aeabi_ddiv+0x1b0>
   b8afa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b8afe:	f43f aefd 	beq.w	b88fc <__aeabi_dmul+0x1f8>
   b8b02:	4610      	mov	r0, r2
   b8b04:	4619      	mov	r1, r3
   b8b06:	e722      	b.n	b894e <__aeabi_dmul+0x24a>
   b8b08:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b8b0c:	bf18      	it	ne
   b8b0e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b8b12:	f47f aec5 	bne.w	b88a0 <__aeabi_dmul+0x19c>
   b8b16:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b8b1a:	f47f af0d 	bne.w	b8938 <__aeabi_dmul+0x234>
   b8b1e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b8b22:	f47f aeeb 	bne.w	b88fc <__aeabi_dmul+0x1f8>
   b8b26:	e712      	b.n	b894e <__aeabi_dmul+0x24a>

000b8b28 <__gedf2>:
   b8b28:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b8b2c:	e006      	b.n	b8b3c <__cmpdf2+0x4>
   b8b2e:	bf00      	nop

000b8b30 <__ledf2>:
   b8b30:	f04f 0c01 	mov.w	ip, #1
   b8b34:	e002      	b.n	b8b3c <__cmpdf2+0x4>
   b8b36:	bf00      	nop

000b8b38 <__cmpdf2>:
   b8b38:	f04f 0c01 	mov.w	ip, #1
   b8b3c:	f84d cd04 	str.w	ip, [sp, #-4]!
   b8b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8b48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8b4c:	bf18      	it	ne
   b8b4e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b8b52:	d01b      	beq.n	b8b8c <__cmpdf2+0x54>
   b8b54:	b001      	add	sp, #4
   b8b56:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b8b5a:	bf0c      	ite	eq
   b8b5c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b8b60:	ea91 0f03 	teqne	r1, r3
   b8b64:	bf02      	ittt	eq
   b8b66:	ea90 0f02 	teqeq	r0, r2
   b8b6a:	2000      	moveq	r0, #0
   b8b6c:	4770      	bxeq	lr
   b8b6e:	f110 0f00 	cmn.w	r0, #0
   b8b72:	ea91 0f03 	teq	r1, r3
   b8b76:	bf58      	it	pl
   b8b78:	4299      	cmppl	r1, r3
   b8b7a:	bf08      	it	eq
   b8b7c:	4290      	cmpeq	r0, r2
   b8b7e:	bf2c      	ite	cs
   b8b80:	17d8      	asrcs	r0, r3, #31
   b8b82:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b8b86:	f040 0001 	orr.w	r0, r0, #1
   b8b8a:	4770      	bx	lr
   b8b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8b94:	d102      	bne.n	b8b9c <__cmpdf2+0x64>
   b8b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8b9a:	d107      	bne.n	b8bac <__cmpdf2+0x74>
   b8b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8ba4:	d1d6      	bne.n	b8b54 <__cmpdf2+0x1c>
   b8ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8baa:	d0d3      	beq.n	b8b54 <__cmpdf2+0x1c>
   b8bac:	f85d 0b04 	ldr.w	r0, [sp], #4
   b8bb0:	4770      	bx	lr
   b8bb2:	bf00      	nop

000b8bb4 <__aeabi_cdrcmple>:
   b8bb4:	4684      	mov	ip, r0
   b8bb6:	4610      	mov	r0, r2
   b8bb8:	4662      	mov	r2, ip
   b8bba:	468c      	mov	ip, r1
   b8bbc:	4619      	mov	r1, r3
   b8bbe:	4663      	mov	r3, ip
   b8bc0:	e000      	b.n	b8bc4 <__aeabi_cdcmpeq>
   b8bc2:	bf00      	nop

000b8bc4 <__aeabi_cdcmpeq>:
   b8bc4:	b501      	push	{r0, lr}
   b8bc6:	f7ff ffb7 	bl	b8b38 <__cmpdf2>
   b8bca:	2800      	cmp	r0, #0
   b8bcc:	bf48      	it	mi
   b8bce:	f110 0f00 	cmnmi.w	r0, #0
   b8bd2:	bd01      	pop	{r0, pc}

000b8bd4 <__aeabi_dcmpeq>:
   b8bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8bd8:	f7ff fff4 	bl	b8bc4 <__aeabi_cdcmpeq>
   b8bdc:	bf0c      	ite	eq
   b8bde:	2001      	moveq	r0, #1
   b8be0:	2000      	movne	r0, #0
   b8be2:	f85d fb08 	ldr.w	pc, [sp], #8
   b8be6:	bf00      	nop

000b8be8 <__aeabi_dcmplt>:
   b8be8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8bec:	f7ff ffea 	bl	b8bc4 <__aeabi_cdcmpeq>
   b8bf0:	bf34      	ite	cc
   b8bf2:	2001      	movcc	r0, #1
   b8bf4:	2000      	movcs	r0, #0
   b8bf6:	f85d fb08 	ldr.w	pc, [sp], #8
   b8bfa:	bf00      	nop

000b8bfc <__aeabi_dcmple>:
   b8bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8c00:	f7ff ffe0 	bl	b8bc4 <__aeabi_cdcmpeq>
   b8c04:	bf94      	ite	ls
   b8c06:	2001      	movls	r0, #1
   b8c08:	2000      	movhi	r0, #0
   b8c0a:	f85d fb08 	ldr.w	pc, [sp], #8
   b8c0e:	bf00      	nop

000b8c10 <__aeabi_dcmpge>:
   b8c10:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8c14:	f7ff ffce 	bl	b8bb4 <__aeabi_cdrcmple>
   b8c18:	bf94      	ite	ls
   b8c1a:	2001      	movls	r0, #1
   b8c1c:	2000      	movhi	r0, #0
   b8c1e:	f85d fb08 	ldr.w	pc, [sp], #8
   b8c22:	bf00      	nop

000b8c24 <__aeabi_dcmpgt>:
   b8c24:	f84d ed08 	str.w	lr, [sp, #-8]!
   b8c28:	f7ff ffc4 	bl	b8bb4 <__aeabi_cdrcmple>
   b8c2c:	bf34      	ite	cc
   b8c2e:	2001      	movcc	r0, #1
   b8c30:	2000      	movcs	r0, #0
   b8c32:	f85d fb08 	ldr.w	pc, [sp], #8
   b8c36:	bf00      	nop

000b8c38 <__aeabi_dcmpun>:
   b8c38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b8c3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8c40:	d102      	bne.n	b8c48 <__aeabi_dcmpun+0x10>
   b8c42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b8c46:	d10a      	bne.n	b8c5e <__aeabi_dcmpun+0x26>
   b8c48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b8c4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b8c50:	d102      	bne.n	b8c58 <__aeabi_dcmpun+0x20>
   b8c52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b8c56:	d102      	bne.n	b8c5e <__aeabi_dcmpun+0x26>
   b8c58:	f04f 0000 	mov.w	r0, #0
   b8c5c:	4770      	bx	lr
   b8c5e:	f04f 0001 	mov.w	r0, #1
   b8c62:	4770      	bx	lr

000b8c64 <__aeabi_d2iz>:
   b8c64:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8c68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8c6c:	d215      	bcs.n	b8c9a <__aeabi_d2iz+0x36>
   b8c6e:	d511      	bpl.n	b8c94 <__aeabi_d2iz+0x30>
   b8c70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8c74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8c78:	d912      	bls.n	b8ca0 <__aeabi_d2iz+0x3c>
   b8c7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8c7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8c82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b8c8a:	fa23 f002 	lsr.w	r0, r3, r2
   b8c8e:	bf18      	it	ne
   b8c90:	4240      	negne	r0, r0
   b8c92:	4770      	bx	lr
   b8c94:	f04f 0000 	mov.w	r0, #0
   b8c98:	4770      	bx	lr
   b8c9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8c9e:	d105      	bne.n	b8cac <__aeabi_d2iz+0x48>
   b8ca0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b8ca4:	bf08      	it	eq
   b8ca6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b8caa:	4770      	bx	lr
   b8cac:	f04f 0000 	mov.w	r0, #0
   b8cb0:	4770      	bx	lr
   b8cb2:	bf00      	nop

000b8cb4 <__aeabi_d2uiz>:
   b8cb4:	004a      	lsls	r2, r1, #1
   b8cb6:	d211      	bcs.n	b8cdc <__aeabi_d2uiz+0x28>
   b8cb8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b8cbc:	d211      	bcs.n	b8ce2 <__aeabi_d2uiz+0x2e>
   b8cbe:	d50d      	bpl.n	b8cdc <__aeabi_d2uiz+0x28>
   b8cc0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b8cc4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b8cc8:	d40e      	bmi.n	b8ce8 <__aeabi_d2uiz+0x34>
   b8cca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8cce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b8cd2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b8cd6:	fa23 f002 	lsr.w	r0, r3, r2
   b8cda:	4770      	bx	lr
   b8cdc:	f04f 0000 	mov.w	r0, #0
   b8ce0:	4770      	bx	lr
   b8ce2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b8ce6:	d102      	bne.n	b8cee <__aeabi_d2uiz+0x3a>
   b8ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8cec:	4770      	bx	lr
   b8cee:	f04f 0000 	mov.w	r0, #0
   b8cf2:	4770      	bx	lr

000b8cf4 <__aeabi_d2f>:
   b8cf4:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b8cf8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b8cfc:	bf24      	itt	cs
   b8cfe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b8d02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b8d06:	d90d      	bls.n	b8d24 <__aeabi_d2f+0x30>
   b8d08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b8d0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b8d10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b8d14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b8d18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b8d1c:	bf08      	it	eq
   b8d1e:	f020 0001 	biceq.w	r0, r0, #1
   b8d22:	4770      	bx	lr
   b8d24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b8d28:	d121      	bne.n	b8d6e <__aeabi_d2f+0x7a>
   b8d2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b8d2e:	bfbc      	itt	lt
   b8d30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b8d34:	4770      	bxlt	lr
   b8d36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b8d3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b8d3e:	f1c2 0218 	rsb	r2, r2, #24
   b8d42:	f1c2 0c20 	rsb	ip, r2, #32
   b8d46:	fa10 f30c 	lsls.w	r3, r0, ip
   b8d4a:	fa20 f002 	lsr.w	r0, r0, r2
   b8d4e:	bf18      	it	ne
   b8d50:	f040 0001 	orrne.w	r0, r0, #1
   b8d54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b8d58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b8d5c:	fa03 fc0c 	lsl.w	ip, r3, ip
   b8d60:	ea40 000c 	orr.w	r0, r0, ip
   b8d64:	fa23 f302 	lsr.w	r3, r3, r2
   b8d68:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b8d6c:	e7cc      	b.n	b8d08 <__aeabi_d2f+0x14>
   b8d6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b8d72:	d107      	bne.n	b8d84 <__aeabi_d2f+0x90>
   b8d74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b8d78:	bf1e      	ittt	ne
   b8d7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b8d7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b8d82:	4770      	bxne	lr
   b8d84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b8d88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b8d8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b8d90:	4770      	bx	lr
   b8d92:	bf00      	nop

000b8d94 <atexit>:
   b8d94:	2300      	movs	r3, #0
   b8d96:	4601      	mov	r1, r0
   b8d98:	461a      	mov	r2, r3
   b8d9a:	4618      	mov	r0, r3
   b8d9c:	f000 b85c 	b.w	b8e58 <__register_exitproc>

000b8da0 <memcmp>:
   b8da0:	b510      	push	{r4, lr}
   b8da2:	3901      	subs	r1, #1
   b8da4:	4402      	add	r2, r0
   b8da6:	4290      	cmp	r0, r2
   b8da8:	d101      	bne.n	b8dae <memcmp+0xe>
   b8daa:	2000      	movs	r0, #0
   b8dac:	e005      	b.n	b8dba <memcmp+0x1a>
   b8dae:	7803      	ldrb	r3, [r0, #0]
   b8db0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b8db4:	42a3      	cmp	r3, r4
   b8db6:	d001      	beq.n	b8dbc <memcmp+0x1c>
   b8db8:	1b18      	subs	r0, r3, r4
   b8dba:	bd10      	pop	{r4, pc}
   b8dbc:	3001      	adds	r0, #1
   b8dbe:	e7f2      	b.n	b8da6 <memcmp+0x6>

000b8dc0 <memcpy>:
   b8dc0:	440a      	add	r2, r1
   b8dc2:	4291      	cmp	r1, r2
   b8dc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b8dc8:	d100      	bne.n	b8dcc <memcpy+0xc>
   b8dca:	4770      	bx	lr
   b8dcc:	b510      	push	{r4, lr}
   b8dce:	f811 4b01 	ldrb.w	r4, [r1], #1
   b8dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
   b8dd6:	4291      	cmp	r1, r2
   b8dd8:	d1f9      	bne.n	b8dce <memcpy+0xe>
   b8dda:	bd10      	pop	{r4, pc}

000b8ddc <memset>:
   b8ddc:	4402      	add	r2, r0
   b8dde:	4603      	mov	r3, r0
   b8de0:	4293      	cmp	r3, r2
   b8de2:	d100      	bne.n	b8de6 <memset+0xa>
   b8de4:	4770      	bx	lr
   b8de6:	f803 1b01 	strb.w	r1, [r3], #1
   b8dea:	e7f9      	b.n	b8de0 <memset+0x4>

000b8dec <srand>:
   b8dec:	b538      	push	{r3, r4, r5, lr}
   b8dee:	4b10      	ldr	r3, [pc, #64]	; (b8e30 <srand+0x44>)
   b8df0:	681d      	ldr	r5, [r3, #0]
   b8df2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8df4:	4604      	mov	r4, r0
   b8df6:	b9b3      	cbnz	r3, b8e26 <srand+0x3a>
   b8df8:	2018      	movs	r0, #24
   b8dfa:	f7fe fbb5 	bl	b7568 <malloc>
   b8dfe:	4602      	mov	r2, r0
   b8e00:	63a8      	str	r0, [r5, #56]	; 0x38
   b8e02:	b920      	cbnz	r0, b8e0e <srand+0x22>
   b8e04:	4b0b      	ldr	r3, [pc, #44]	; (b8e34 <srand+0x48>)
   b8e06:	480c      	ldr	r0, [pc, #48]	; (b8e38 <srand+0x4c>)
   b8e08:	2142      	movs	r1, #66	; 0x42
   b8e0a:	f7fe fbc5 	bl	b7598 <__assert_func>
   b8e0e:	490b      	ldr	r1, [pc, #44]	; (b8e3c <srand+0x50>)
   b8e10:	4b0b      	ldr	r3, [pc, #44]	; (b8e40 <srand+0x54>)
   b8e12:	e9c0 1300 	strd	r1, r3, [r0]
   b8e16:	4b0b      	ldr	r3, [pc, #44]	; (b8e44 <srand+0x58>)
   b8e18:	6083      	str	r3, [r0, #8]
   b8e1a:	230b      	movs	r3, #11
   b8e1c:	8183      	strh	r3, [r0, #12]
   b8e1e:	2100      	movs	r1, #0
   b8e20:	2001      	movs	r0, #1
   b8e22:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b8e26:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b8e28:	2200      	movs	r2, #0
   b8e2a:	611c      	str	r4, [r3, #16]
   b8e2c:	615a      	str	r2, [r3, #20]
   b8e2e:	bd38      	pop	{r3, r4, r5, pc}
   b8e30:	2003e148 	.word	0x2003e148
   b8e34:	000b943d 	.word	0x000b943d
   b8e38:	000b9454 	.word	0x000b9454
   b8e3c:	abcd330e 	.word	0xabcd330e
   b8e40:	e66d1234 	.word	0xe66d1234
   b8e44:	0005deec 	.word	0x0005deec

000b8e48 <strlen>:
   b8e48:	4603      	mov	r3, r0
   b8e4a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b8e4e:	2a00      	cmp	r2, #0
   b8e50:	d1fb      	bne.n	b8e4a <strlen+0x2>
   b8e52:	1a18      	subs	r0, r3, r0
   b8e54:	3801      	subs	r0, #1
   b8e56:	4770      	bx	lr

000b8e58 <__register_exitproc>:
   b8e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8e5c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b8f18 <__register_exitproc+0xc0>
   b8e60:	4606      	mov	r6, r0
   b8e62:	f8d8 0000 	ldr.w	r0, [r8]
   b8e66:	461f      	mov	r7, r3
   b8e68:	460d      	mov	r5, r1
   b8e6a:	4691      	mov	r9, r2
   b8e6c:	f000 f856 	bl	b8f1c <__retarget_lock_acquire_recursive>
   b8e70:	4b25      	ldr	r3, [pc, #148]	; (b8f08 <__register_exitproc+0xb0>)
   b8e72:	681c      	ldr	r4, [r3, #0]
   b8e74:	b934      	cbnz	r4, b8e84 <__register_exitproc+0x2c>
   b8e76:	4c25      	ldr	r4, [pc, #148]	; (b8f0c <__register_exitproc+0xb4>)
   b8e78:	601c      	str	r4, [r3, #0]
   b8e7a:	4b25      	ldr	r3, [pc, #148]	; (b8f10 <__register_exitproc+0xb8>)
   b8e7c:	b113      	cbz	r3, b8e84 <__register_exitproc+0x2c>
   b8e7e:	681b      	ldr	r3, [r3, #0]
   b8e80:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b8e84:	6863      	ldr	r3, [r4, #4]
   b8e86:	2b1f      	cmp	r3, #31
   b8e88:	dd07      	ble.n	b8e9a <__register_exitproc+0x42>
   b8e8a:	f8d8 0000 	ldr.w	r0, [r8]
   b8e8e:	f000 f847 	bl	b8f20 <__retarget_lock_release_recursive>
   b8e92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b8e96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b8e9a:	b34e      	cbz	r6, b8ef0 <__register_exitproc+0x98>
   b8e9c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b8ea0:	b988      	cbnz	r0, b8ec6 <__register_exitproc+0x6e>
   b8ea2:	4b1c      	ldr	r3, [pc, #112]	; (b8f14 <__register_exitproc+0xbc>)
   b8ea4:	b923      	cbnz	r3, b8eb0 <__register_exitproc+0x58>
   b8ea6:	f8d8 0000 	ldr.w	r0, [r8]
   b8eaa:	f000 f838 	bl	b8f1e <__retarget_lock_release>
   b8eae:	e7f0      	b.n	b8e92 <__register_exitproc+0x3a>
   b8eb0:	f44f 7084 	mov.w	r0, #264	; 0x108
   b8eb4:	f7fe fb58 	bl	b7568 <malloc>
   b8eb8:	2800      	cmp	r0, #0
   b8eba:	d0f4      	beq.n	b8ea6 <__register_exitproc+0x4e>
   b8ebc:	2300      	movs	r3, #0
   b8ebe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b8ec2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b8ec6:	6863      	ldr	r3, [r4, #4]
   b8ec8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b8ecc:	2201      	movs	r2, #1
   b8ece:	409a      	lsls	r2, r3
   b8ed0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b8ed4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b8ed8:	4313      	orrs	r3, r2
   b8eda:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b8ede:	2e02      	cmp	r6, #2
   b8ee0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b8ee4:	bf02      	ittt	eq
   b8ee6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b8eea:	4313      	orreq	r3, r2
   b8eec:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b8ef0:	6863      	ldr	r3, [r4, #4]
   b8ef2:	f8d8 0000 	ldr.w	r0, [r8]
   b8ef6:	1c5a      	adds	r2, r3, #1
   b8ef8:	3302      	adds	r3, #2
   b8efa:	6062      	str	r2, [r4, #4]
   b8efc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b8f00:	f000 f80e 	bl	b8f20 <__retarget_lock_release_recursive>
   b8f04:	2000      	movs	r0, #0
   b8f06:	e7c6      	b.n	b8e96 <__register_exitproc+0x3e>
   b8f08:	2003e7e8 	.word	0x2003e7e8
   b8f0c:	2003e75c 	.word	0x2003e75c
   b8f10:	00000000 	.word	0x00000000
   b8f14:	000b7569 	.word	0x000b7569
   b8f18:	2003e1ac 	.word	0x2003e1ac

000b8f1c <__retarget_lock_acquire_recursive>:
   b8f1c:	4770      	bx	lr

000b8f1e <__retarget_lock_release>:
   b8f1e:	4770      	bx	lr

000b8f20 <__retarget_lock_release_recursive>:
   b8f20:	4770      	bx	lr

000b8f22 <link_code_end>:
	...

000b8f24 <dynalib_user>:
   b8f24:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b8f34:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   b8f44:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   b8f54:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   b8f64:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   b8f74:	4f4d 4544 7525 003e 6f43 6c75 2064 6f6e     MODE%u>.Could no
   b8f84:	2074 6966 646e 4120 3753 3433 0031 6f43     t find AS7341.Co
   b8f94:	6c75 6e64 7427 6620 6e69 2064 5452 0043     uldn't find RTC.
   b8fa4:	5452 2043 7369 4e20 544f 7220 6e75 696e     RTC is NOT runni
   b8fb4:	676e 0021 5741 3539 3332 6e20 746f 6620     ng!.AW9523 not f
   b8fc4:	756f 646e 203f 6843 6365 206b 6977 6972     ound? Check wiri
   b8fd4:	676e 0021 5741 3539 3332 6620 756f 646e     ng!.AW9523 found
   b8fe4:	0021 5f34 5f39 3432 375f 3030 736d 315f     !.4_9_24_700ms_1
   b8ff4:	3832 5f78 5f32 7574 6272 6469 7469 2e79     28x_2_turbidity.
   b9004:	7363 0076 6144 6574 6120 646e 5420 6d69     csv.Date and Tim
   b9014:	2c65 5341 4554 2c50 5441 4d49 2c45 4147     e,ASTEP,ATIME,GA
   b9024:	4e49 4c2c 4445 5320 6174 7574 2c73 454c     IN,LED Status,LE
   b9034:	2044 6e49 6574 736e 7469 2c79 6554 7473     D Intensity,Test
   b9044:	532c 6365 6e6f 7364 4d2c 6c69 696c 6573     ,Seconds,Millise
   b9054:	6f63 646e 2c73 7954 6570 462c 2031 4228     conds,Type,F1 (B
   b9064:	7361 6369 2c29 3246 2820 6142 6973 2963     asic),F2 (Basic)
   b9074:	462c 2033 4228 7361 6369 2c29 3446 2820     ,F3 (Basic),F4 (
   b9084:	6142 6973 2963 462c 2035 4228 7361 6369     Basic),F5 (Basic
   b9094:	2c29 3646 2820 6142 6973 2963 462c 2037     ),F6 (Basic),F7 
   b90a4:	4228 7361 6369 2c29 3846 2820 6142 6973     (Basic),F8 (Basi
   b90b4:	2963 432c 656c 7261 2820 6142 6973 2963     c),Clear (Basic)
   b90c4:	4e2c 5249 2820 6142 6973 2963 542c 7079     ,NIR (Basic),Typ
   b90d4:	2c65 3146 2820 6152 2977 462c 2032 5228     e,F1 (Raw),F2 (R
   b90e4:	7761 2c29 3346 2820 6152 2977 462c 2034     aw),F3 (Raw),F4 
   b90f4:	5228 7761 2c29 3546 2820 6152 2977 462c     (Raw),F5 (Raw),F
   b9104:	2036 5228 7761 2c29 3746 2820 6152 2977     6 (Raw),F7 (Raw)
   b9114:	462c 2038 5228 7761 2c29 6c43 6165 2072     ,F8 (Raw),Clear 
   b9124:	5228 7761 2c29 494e 2052 5228 7761 2c29     (Raw),NIR (Raw),
   b9134:	4120 7070 6f72 2078 6954 656d 4500 7272      Approx Time.Err
   b9144:	726f 6f20 6570 696e 676e 6620 6c69 2165     or opening file!
   b9154:	4c00 4445 4920 544e 4e45 4953 5954 003a     .LED INTENSITY:.
   b9164:	2820 2900 0020 7245 6f72 2072 6572 6461      (.) .Error read
   b9174:	6e69 2067 6c61 206c 6863 6e61 656e 736c     ing all channels
   b9184:	0021 3146 3420 3531 6d6e 3a20 0020 2020     !.F1 415nm : .  
   b9194:	5200 7761 5620 6c61 6575 3a20 0020 3246     .Raw Value : .F2
   b91a4:	3420 3534 6d6e 3a20 0020 3346 3420 3038      445nm : .F3 480
   b91b4:	6d6e 3a20 0020 3446 3520 3531 6d6e 3a20     nm : .F4 515nm :
   b91c4:	0020 3546 3520 3535 6d6e 3a20 0020 3646      .F5 555nm : .F6
   b91d4:	3520 3039 6d6e 3a20 0020 3746 3620 3033      590nm : .F7 630
   b91e4:	6d6e 3a20 0020 3846 3620 3038 6d6e 3a20     nm : .F8 680nm :
   b91f4:	0020 6c43 6165 2072 2020 3a20 0020 494e      .Clear    : .NI
   b9204:	2052 2020 2020 3a20 0020 454c 2044 4e4f     R      : .LED ON
   b9214:	3200 3535 3000 4200 5341 4349 4320 554f     .255.0.BASIC COU
   b9224:	544e 0053 4152 2057 4156 554c 5345 0000     NTS.RAW VALUES..

000b9234 <_ZTVN8particle11SPISettingsE>:
	...
   b923c:	4181 000b 40b3 000b 40d1 000b               .A...@...@..

000b9248 <_ZTV4File>:
	...
   b9250:	40cf 000b 40df 000b 411f 000b 4119 000b     .@...@...A...A..
   b9260:	40b5 000b 40f9 000b 40f3 000b 40ed 000b     .@...@...@...@..

000b9270 <CSWTCH.61>:
   b9270:	0000 3f00 0000 3f80 0000 4000 0000 4080     ...?...?...@...@
   b9280:	0000 4100 0000 4180 0000 4200 0000 4280     ...A...A...B...B
   b9290:	0000 4300 0000 4380 0000 4400               ...C...C...D

000b929c <_ZTV15Adafruit_AS7341>:
	...
   b92a4:	4d05 000b                                   .M..

000b92a8 <_ZL11daysInMonth>:
   b92a8:	1c1f 1e1f 1e1f 1f1f 1f1e 1f1e               ............

000b92b4 <_ZTVN5spark13EthernetClassE>:
	...
   b92bc:	762f 000b 7625 000b 761b 000b 7611 000b     /v..%v...v...v..
   b92cc:	7605 000b 75f9 000b 78a1 000b 78a9 000b     .v...u...x...x..
   b92dc:	75ed 000b 75e5 000b 75db 000b 75d1 000b     .u...u...u...u..
   b92ec:	78d9 000b                                   .x..

000b92f0 <_ZTV7TwoWire>:
	...
   b92f8:	764d 000b 7697 000b 766f 000b 764f 000b     Mv...v..ov..Ov..
   b9308:	7677 000b 767f 000b 7687 000b 768f 000b     wv...v...v...v..

000b9318 <_ZTV9IPAddress>:
	...
   b9320:	7771 000b 7761 000b 7763 000b 7061 0070     qw..aw..cw..app.

000b9330 <_ZTVN5spark12NetworkClassE>:
	...
   b9338:	7861 000b 786b 000b 7875 000b 787f 000b     ax..kx..ux...x..
   b9348:	7889 000b 7895 000b 78a1 000b 78a9 000b     .x...x...x...x..
   b9358:	78b1 000b 78bd 000b 78c5 000b 78cf 000b     .x...x...x...x..
   b9368:	78d9 000b 616e 006e 6e69 0066 766f 0066     .x..nan.inf.ovf.
   b9378:	002e                                        ..

000b937a <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b937a:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b938a:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b939a:	6d69 0065 0000                              ime...

000b93a0 <_ZTV11USARTSerial>:
	...
   b93a8:	7e4d 000b 7eb9 000b 7e91 000b 79c5 000b     M~...~...~...y..
   b93b8:	7e61 000b 7e7d 000b 7e6f 000b 7e8b 000b     a~..}~..o~...~..
   b93c8:	7e4f 000b 7e53 000b                         O~..S~..

000b93d0 <_ZTV9USBSerial>:
	...
   b93d8:	7ef7 000b 7f5f 000b 7f35 000b 79c5 000b     .~.._...5....y..
   b93e8:	7f27 000b 7ef9 000b 7f09 000b 7f59 000b     '....~......Y...
   b93f8:	7f19 000b 7ef1 000b                         .....~..

000b9400 <_ZTVN5spark9WiFiClassE>:
	...
   b9408:	8063 000b 8059 000b 804f 000b 8005 000b     c...Y...O.......
   b9418:	8043 000b 8037 000b 78a1 000b 78a9 000b     C...7....x...x..
   b9428:	802b 000b 8023 000b 8019 000b 800f 000b     +...#...........
   b9438:	78d9 000b                                   .x..

000b943c <_ZSt7nothrow>:
   b943c:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b944c:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b945c:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b946c:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b947c:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b948c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b949c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b94ad <link_const_variable_data_end>:
   b94ad:	00          	.byte	0x00
	...

000b94b0 <link_constructors_location>:
   b94b0:	000b4bc5 	.word	0x000b4bc5
   b94b4:	000b75c1 	.word	0x000b75c1
   b94b8:	000b7639 	.word	0x000b7639
   b94bc:	000b7851 	.word	0x000b7851
   b94c0:	000b79b1 	.word	0x000b79b1
   b94c4:	000b7c7d 	.word	0x000b7c7d
   b94c8:	000b7e15 	.word	0x000b7e15
   b94cc:	000b7e39 	.word	0x000b7e39
   b94d0:	000b806d 	.word	0x000b806d

000b94d4 <link_constructors_end>:
	...
